var b4=Object.create;var{defineProperty:E7,getPrototypeOf:_4,getOwnPropertyNames:u4}=Object;var m4=Object.prototype.hasOwnProperty;var f4=(Q,J,Z)=>{Z=Q!=null?b4(_4(Q)):{};const $=J||!Q||!Q.__esModule?E7(Z,"default",{value:Q,enumerable:!0}):Z;for(let G of u4(Q))if(!m4.call($,G))E7($,G,{get:()=>Q[G],enumerable:!0});return $};var G0=(Q,J)=>()=>(J||Q((J={exports:{}}).exports,J),J.exports);var AJ=G0((Az,W7)=>{var g4=function(Q){var J=typeof Q;return Q!=null&&(J=="object"||J=="function")};W7.exports=g4});var j7=G0((Rz,T7)=>{var h4=typeof global=="object"&&global&&global.Object===Object&&global;T7.exports=h4});var yJ=G0((Vz,D7)=>{var y4=j7(),x4=typeof self=="object"&&self&&self.Object===Object&&self,c4=y4||x4||Function("return this")();D7.exports=c4});var S7=G0((Yz,C7)=>{var d4=yJ(),p4=function(){return d4.Date.now()};C7.exports=p4});var w7=G0((Xz,I7)=>{var i4=function(Q){var J=Q.length;while(J--&&l4.test(Q.charAt(J)));return J},l4=/\s/;I7.exports=i4});var v7=G0((Bz,P7)=>{var s4=function(Q){return Q?Q.slice(0,a4(Q)+1).replace(n4,""):Q},a4=w7(),n4=/^\s+/;P7.exports=s4});var j9=G0((Oz,b7)=>{var r4=yJ(),o4=r4.Symbol;b7.exports=o4});var f7=G0((Nz,m7)=>{var JG=function(Q){var J=t4.call(Q,xJ),Z=Q[xJ];try{Q[xJ]=void 0;var $=!0}catch(F){}var G=e4.call(Q);if($)if(J)Q[xJ]=Z;else delete Q[xJ];return G},_7=j9(),u7=Object.prototype,t4=u7.hasOwnProperty,e4=u7.toString,xJ=_7?_7.toStringTag:void 0;m7.exports=JG});var h7=G0((Hz,g7)=>{var $G=function(Q){return ZG.call(Q)},QG=Object.prototype,ZG=QG.toString;g7.exports=$G});var H6=G0((kz,c7)=>{var qG=function(Q){if(Q==null)return Q===void 0?KG:UG;return x7&&x7 in Object(Q)?GG(Q):FG(Q)},y7=j9(),GG=f7(),FG=h7(),UG="[object Null]",KG="[object Undefined]",x7=y7?y7.toStringTag:void 0;c7.exports=qG});var p7=G0((Ez,d7)=>{var MG=function(Q){return Q!=null&&typeof Q=="object"};d7.exports=MG});var RJ=G0((Wz,l7)=>{var RG=function(Q){return typeof Q=="symbol"||zG(Q)&&LG(Q)==AG},LG=H6(),zG=p7(),AG="[object Symbol]";l7.exports=RG});var s7=G0((Tz,n7)=>{var HG=function(Q){if(typeof Q=="number")return Q;if(YG(Q))return a7;if(i7(Q)){var J=typeof Q.valueOf=="function"?Q.valueOf():Q;Q=i7(J)?J+"":J}if(typeof Q!="string")return Q===0?Q:+Q;Q=VG(Q);var Z=BG.test(Q);return Z||OG.test(Q)?NG(Q.slice(2),Z?2:8):XG.test(Q)?a7:+Q},VG=v7(),i7=AJ(),YG=RJ(),a7=NaN,XG=/^[-+]0x[0-9a-f]+$/i,BG=/^0b[01]+$/i,OG=/^0o[0-7]+$/i,NG=parseInt;n7.exports=HG});var t7=G0((jz,o7)=>{var jG=function(Q,J,Z){var $,G,F,U,K,M,q=0,L=!1,z=!1,A=!0;if(typeof Q!="function")throw new TypeError(EG);if(J=r7(J)||0,kG(Z))L=!!Z.leading,z="maxWait"in Z,F=z?WG(r7(Z.maxWait)||0,J):F,A="trailing"in Z?!!Z.trailing:A;function V(D){var k=$,C=G;return $=G=void 0,q=D,U=Q.apply(C,k),U}function R(D){return q=D,K=setTimeout(B,J),L?V(D):U}function Y(D){var k=D-M,C=D-q,E=J-k;return z?TG(E,F-C):E}function X(D){var k=D-M,C=D-q;return M===void 0||k>=J||k<0||z&&C>=F}function B(){var D=k6();if(X(D))return O(D);K=setTimeout(B,Y(D))}function O(D){if(K=void 0,A&&$)return V(D);return $=G=void 0,U}function N(){if(K!==void 0)clearTimeout(K);q=0,$=M=G=K=void 0}function H(){return K===void 0?U:O(k6())}function j(){var D=k6(),k=X(D);if($=arguments,G=this,M=D,k){if(K===void 0)return R(M);if(z)return clearTimeout(K),K=setTimeout(B,J),V(M)}if(K===void 0)K=setTimeout(B,J);return U}return j.cancel=N,j.flush=H,j},kG=AJ(),k6=S7(),r7=s7(),EG="Expected a function",WG=Math.max,TG=Math.min;o7.exports=jG});var JQ=G0((E6,e7)=>{(function(){var Q,J,Z,$,G,F,U,K,M,q,L,z,A,V,R;Z=Math.floor,q=Math.min,J=function(Y,X){if(Y<X)return-1;if(Y>X)return 1;return 0},M=function(Y,X,B,O,N){var H;if(B==null)B=0;if(N==null)N=J;if(B<0)throw new Error("lo must be non-negative");if(O==null)O=Y.length;while(B<O)if(H=Z((B+O)/2),N(X,Y[H])<0)O=H;else B=H+1;return[].splice.apply(Y,[B,B-B].concat(X)),X},F=function(Y,X,B){if(B==null)B=J;return Y.push(X),V(Y,0,Y.length-1,B)},G=function(Y,X){var B,O;if(X==null)X=J;if(B=Y.pop(),Y.length)O=Y[0],Y[0]=B,R(Y,0,X);else O=B;return O},K=function(Y,X,B){var O;if(B==null)B=J;return O=Y[0],Y[0]=X,R(Y,0,B),O},U=function(Y,X,B){var O;if(B==null)B=J;if(Y.length&&B(Y[0],X)<0)O=[Y[0],X],X=O[0],Y[0]=O[1],R(Y,0,B);return X},$=function(Y,X){var B,O,N,H,j,D,k,C;if(X==null)X=J;D=function(){C=[];for(var E=0,S=Z(Y.length/2);0<=S?E<S:E>S;0<=S?E++:E--)C.push(E);return C}.apply(this).reverse(),k=[];for(O=0,H=D.length;O<H;O++)B=D[O],k.push(R(Y,B,X));return k},A=function(Y,X,B){var O;if(B==null)B=J;if(O=Y.indexOf(X),O===-1)return;return V(Y,0,O,B),R(Y,O,B)},L=function(Y,X,B){var O,N,H,j,D;if(B==null)B=J;if(N=Y.slice(0,X),!N.length)return N;$(N,B),D=Y.slice(X);for(H=0,j=D.length;H<j;H++)O=D[H],U(N,O,B);return N.sort(B).reverse()},z=function(Y,X,B){var O,N,H,j,D,k,C,E,S,w;if(B==null)B=J;if(X*10<=Y.length){if(j=Y.slice(0,X).sort(B),!j.length)return j;H=j[j.length-1],E=Y.slice(X);for(D=0,C=E.length;D<C;D++)if(O=E[D],B(O,H)<0)M(j,O,0,null,B),j.pop(),H=j[j.length-1];return j}$(Y,B),w=[];for(N=k=0,S=q(X,Y.length);0<=S?k<S:k>S;N=0<=S?++k:--k)w.push(G(Y,B));return w},V=function(Y,X,B,O){var N,H,j;if(O==null)O=J;N=Y[B];while(B>X){if(j=B-1>>1,H=Y[j],O(N,H)<0){Y[B]=H,B=j;continue}break}return Y[B]=N},R=function(Y,X,B){var O,N,H,j,D;if(B==null)B=J;N=Y.length,D=X,H=Y[X],O=2*X+1;while(O<N){if(j=O+1,j<N&&!(B(Y[O],Y[j])<0))O=j;Y[X]=Y[O],X=O,O=2*X+1}return Y[X]=H,V(Y,D,X,B)},Q=function(){Y.push=F,Y.pop=G,Y.replace=K,Y.pushpop=U,Y.heapify=$,Y.updateItem=A,Y.nlargest=L,Y.nsmallest=z;function Y(X){this.cmp=X!=null?X:J,this.nodes=[]}return Y.prototype.push=function(X){return F(this.nodes,X,this.cmp)},Y.prototype.pop=function(){return G(this.nodes,this.cmp)},Y.prototype.peek=function(){return this.nodes[0]},Y.prototype.contains=function(X){return this.nodes.indexOf(X)!==-1},Y.prototype.replace=function(X){return K(this.nodes,X,this.cmp)},Y.prototype.pushpop=function(X){return U(this.nodes,X,this.cmp)},Y.prototype.heapify=function(){return $(this.nodes,this.cmp)},Y.prototype.updateItem=function(X){return A(this.nodes,X,this.cmp)},Y.prototype.clear=function(){return this.nodes=[]},Y.prototype.empty=function(){return this.nodes.length===0},Y.prototype.size=function(){return this.nodes.length},Y.prototype.clone=function(){var X=new Y;return X.nodes=this.nodes.slice(0),X},Y.prototype.toArray=function(){return this.nodes.slice(0)},Y.prototype.insert=Y.prototype.push,Y.prototype.top=Y.prototype.peek,Y.prototype.front=Y.prototype.peek,Y.prototype.has=Y.prototype.contains,Y.prototype.copy=Y.prototype.clone,Y}(),function(Y,X){if(typeof define==="function"&&define.amd)return define([],X);else if(typeof E6==="object")return e7.exports=X();else return Y.Heap=X()}(this,function(){return Q})}).call(E6)});var cJ=G0((Dz,QQ)=>{var DG=Array.isArray;QQ.exports=DG});var $Q=G0((Cz,ZQ)=>{var PG=function(Q,J){if(CG(Q))return!1;var Z=typeof Q;if(Z=="number"||Z=="symbol"||Z=="boolean"||Q==null||SG(Q))return!0;return wG.test(Q)||!IG.test(Q)||J!=null&&Q in Object(J)},CG=cJ(),SG=RJ(),IG=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,wG=/^\w*$/;ZQ.exports=PG});var FQ=G0((Sz,GQ)=>{var gG=function(Q){if(!bG(Q))return!1;var J=vG(Q);return J==uG||J==mG||J==_G||J==fG},vG=H6(),bG=AJ(),_G="[object AsyncFunction]",uG="[object Function]",mG="[object GeneratorFunction]",fG="[object Proxy]";GQ.exports=gG});var KQ=G0((Iz,UQ)=>{var hG=yJ(),yG=hG["__core-js_shared__"];UQ.exports=yG});var LQ=G0((wz,MQ)=>{var xG=function(Q){return!!qQ&&qQ in Q},W6=KQ(),qQ=function(){var Q=/[^.]+$/.exec(W6&&W6.keys&&W6.keys.IE_PROTO||"");return Q?"Symbol(src)_1."+Q:""}();MQ.exports=xG});var AQ=G0((Pz,zQ)=>{var pG=function(Q){if(Q!=null){try{return dG.call(Q)}catch(J){}try{return Q+""}catch(J){}}return""},cG=Function.prototype,dG=cG.toString;zQ.exports=pG});var VQ=G0((vz,RQ)=>{var Z1=function(Q){if(!aG(Q)||iG(Q))return!1;var J=lG(Q)?Q1:rG;return J.test(nG(Q))},lG=FQ(),iG=LQ(),aG=AJ(),nG=AQ(),sG=/[\\^$.*+?()[\]{}|]/g,rG=/^\[object .+?Constructor\]$/,oG=Function.prototype,tG=Object.prototype,eG=oG.toString,J1=tG.hasOwnProperty,Q1=RegExp("^"+eG.call(J1).replace(sG,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");RQ.exports=Z1});var XQ=G0((bz,YQ)=>{var $1=function(Q,J){return Q==null?void 0:Q[J]};YQ.exports=$1});var D9=G0((_z,BQ)=>{var U1=function(Q,J){var Z=F1(Q,J);return G1(Z)?Z:void 0},G1=VQ(),F1=XQ();BQ.exports=U1});var dJ=G0((uz,OQ)=>{var K1=D9(),q1=K1(Object,"create");OQ.exports=q1});var kQ=G0((mz,HQ)=>{var M1=function(){this.__data__=NQ?NQ(null):{},this.size=0},NQ=dJ();HQ.exports=M1});var WQ=G0((fz,EQ)=>{var L1=function(Q){var J=this.has(Q)&&delete this.__data__[Q];return this.size-=J?1:0,J};EQ.exports=L1});var jQ=G0((gz,TQ)=>{var Y1=function(Q){var J=this.__data__;if(z1){var Z=J[Q];return Z===A1?void 0:Z}return V1.call(J,Q)?J[Q]:void 0},z1=dJ(),A1="__lodash_hash_undefined__",R1=Object.prototype,V1=R1.hasOwnProperty;TQ.exports=Y1});var CQ=G0((hz,DQ)=>{var N1=function(Q){var J=this.__data__;return X1?J[Q]!==void 0:O1.call(J,Q)},X1=dJ(),B1=Object.prototype,O1=B1.hasOwnProperty;DQ.exports=N1});var IQ=G0((yz,SQ)=>{var E1=function(Q,J){var Z=this.__data__;return this.size+=this.has(Q)?0:1,Z[Q]=H1&&J===void 0?k1:J,this},H1=dJ(),k1="__lodash_hash_undefined__";SQ.exports=E1});var PQ=G0((xz,wQ)=>{var VJ=function(Q){var J=-1,Z=Q==null?0:Q.length;this.clear();while(++J<Z){var $=Q[J];this.set($[0],$[1])}},W1=kQ(),T1=WQ(),j1=jQ(),D1=CQ(),C1=IQ();VJ.prototype.clear=W1;VJ.prototype.delete=T1;VJ.prototype.get=j1;VJ.prototype.has=D1;VJ.prototype.set=C1;wQ.exports=VJ});var bQ=G0((cz,vQ)=>{var S1=function(){this.__data__=[],this.size=0};vQ.exports=S1});var T6=G0((dz,_Q)=>{var I1=function(Q,J){return Q===J||Q!==Q&&J!==J};_Q.exports=I1});var pJ=G0((pz,uQ)=>{var P1=function(Q,J){var Z=Q.length;while(Z--)if(w1(Q[Z][0],J))return Z;return-1},w1=T6();uQ.exports=P1});var fQ=G0((lz,mQ)=>{var u1=function(Q){var J=this.__data__,Z=v1(J,Q);if(Z<0)return!1;var $=J.length-1;if(Z==$)J.pop();else _1.call(J,Z,1);return--this.size,!0},v1=pJ(),b1=Array.prototype,_1=b1.splice;mQ.exports=u1});var hQ=G0((iz,gQ)=>{var f1=function(Q){var J=this.__data__,Z=m1(J,Q);return Z<0?void 0:J[Z][1]},m1=pJ();gQ.exports=f1});var xQ=G0((az,yQ)=>{var h1=function(Q){return g1(this.__data__,Q)>-1},g1=pJ();yQ.exports=h1});var dQ=G0((nz,cQ)=>{var x1=function(Q,J){var Z=this.__data__,$=y1(Z,Q);if($<0)++this.size,Z.push([Q,J]);else Z[$][1]=J;return this},y1=pJ();cQ.exports=x1});var lQ=G0((sz,pQ)=>{var YJ=function(Q){var J=-1,Z=Q==null?0:Q.length;this.clear();while(++J<Z){var $=Q[J];this.set($[0],$[1])}},c1=bQ(),d1=fQ(),p1=hQ(),l1=xQ(),i1=dQ();YJ.prototype.clear=c1;YJ.prototype.delete=d1;YJ.prototype.get=p1;YJ.prototype.has=l1;YJ.prototype.set=i1;pQ.exports=YJ});var aQ=G0((rz,iQ)=>{var a1=D9(),n1=yJ(),s1=a1(n1,"Map");iQ.exports=s1});var rQ=G0((oz,sQ)=>{var t1=function(){this.size=0,this.__data__={hash:new nQ,map:new(o1||r1),string:new nQ}},nQ=PQ(),r1=lQ(),o1=aQ();sQ.exports=t1});var tQ=G0((tz,oQ)=>{var e1=function(Q){var J=typeof Q;return J=="string"||J=="number"||J=="symbol"||J=="boolean"?Q!=="__proto__":Q===null};oQ.exports=e1});var lJ=G0((ez,eQ)=>{var QF=function(Q,J){var Z=Q.__data__;return JF(J)?Z[typeof J=="string"?"string":"hash"]:Z.map},JF=tQ();eQ.exports=QF});var Q5=G0((JA,J5)=>{var $F=function(Q){var J=ZF(this,Q).delete(Q);return this.size-=J?1:0,J},ZF=lJ();J5.exports=$F});var $5=G0((QA,Z5)=>{var FF=function(Q){return GF(this,Q).get(Q)},GF=lJ();Z5.exports=FF});var F5=G0((ZA,G5)=>{var KF=function(Q){return UF(this,Q).has(Q)},UF=lJ();G5.exports=KF});var K5=G0(($A,U5)=>{var MF=function(Q,J){var Z=qF(this,Q),$=Z.size;return Z.set(Q,J),this.size+=Z.size==$?0:1,this},qF=lJ();U5.exports=MF});var M5=G0((GA,q5)=>{var XJ=function(Q){var J=-1,Z=Q==null?0:Q.length;this.clear();while(++J<Z){var $=Q[J];this.set($[0],$[1])}},LF=rQ(),zF=Q5(),AF=$5(),RF=F5(),VF=K5();XJ.prototype.clear=LF;XJ.prototype.delete=zF;XJ.prototype.get=AF;XJ.prototype.has=RF;XJ.prototype.set=VF;q5.exports=XJ});var A5=G0((FA,z5)=>{var j6=function(Q,J){if(typeof Q!="function"||J!=null&&typeof J!="function")throw new TypeError(YF);var Z=function(){var $=arguments,G=J?J.apply(this,$):$[0],F=Z.cache;if(F.has(G))return F.get(G);var U=Q.apply(this,$);return Z.cache=F.set(G,U)||F,U};return Z.cache=new(j6.Cache||L5),Z},L5=M5(),YF="Expected a function";j6.Cache=L5;z5.exports=j6});var V5=G0((UA,R5)=>{var OF=function(Q){var J=XF(Q,function($){if(Z.size===BF)Z.clear();return $}),Z=J.cache;return J},XF=A5(),BF=500;R5.exports=OF});var D6=G0((KA,Y5)=>{var NF=V5(),HF=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,kF=/\\(\\)?/g,EF=NF(function(Q){var J=[];if(Q.charCodeAt(0)===46)J.push("");return Q.replace(HF,function(Z,$,G,F){J.push(G?F.replace(kF,"$1"):$||Z)}),J});Y5.exports=EF});var C6=G0((qA,X5)=>{var WF=function(Q,J){var Z=-1,$=Q==null?0:Q.length,G=Array($);while(++Z<$)G[Z]=J(Q[Z],Z,Q);return G};X5.exports=WF});var E5=G0((MA,k5)=>{var H5=function(Q){if(typeof Q=="string")return Q;if(jF(Q))return TF(Q,H5)+"";if(DF(Q))return N5?N5.call(Q):"";var J=Q+"";return J=="0"&&1/Q==-CF?"-0":J},B5=j9(),TF=C6(),jF=cJ(),DF=RJ(),CF=Infinity,O5=B5?B5.prototype:void 0,N5=O5?O5.toString:void 0;k5.exports=H5});var S6=G0((LA,W5)=>{var IF=function(Q){return Q==null?"":SF(Q)},SF=E5();W5.exports=IF});var I6=G0((zA,T5)=>{var _F=function(Q,J){if(wF(Q))return Q;return PF(Q,J)?[Q]:vF(bF(Q))},wF=cJ(),PF=$Q(),vF=D6(),bF=S6();T5.exports=_F});var C9=G0((AA,j5)=>{var fF=function(Q){if(typeof Q=="string"||uF(Q))return Q;var J=Q+"";return J=="0"&&1/Q==-mF?"-0":J},uF=RJ(),mF=Infinity;j5.exports=fF});var C5=G0((RA,D5)=>{var yF=function(Q,J){J=gF(J,Q);var Z=0,$=J.length;while(Q!=null&&Z<$)Q=Q[hF(J[Z++])];return Z&&Z==$?Q:void 0},gF=I6(),hF=C9();D5.exports=yF});var I5=G0((VA,S5)=>{var cF=function(Q,J,Z){var $=Q==null?void 0:xF(Q,J);return $===void 0?Z:$},xF=C5();S5.exports=cF});var P5=G0((YA,w5)=>{var dF=D9(),pF=function(){try{var Q=dF(Object,"defineProperty");return Q({},"",{}),Q}catch(J){}}();w5.exports=pF});var _5=G0((XA,b5)=>{var lF=function(Q,J,Z){if(J=="__proto__"&&v5)v5(Q,J,{configurable:!0,enumerable:!0,value:Z,writable:!0});else Q[J]=Z},v5=P5();b5.exports=lF});var m5=G0((BA,u5)=>{var rF=function(Q,J,Z){var $=Q[J];if(!(sF.call(Q,J)&&aF($,Z))||Z===void 0&&!(J in Q))iF(Q,J,Z)},iF=_5(),aF=T6(),nF=Object.prototype,sF=nF.hasOwnProperty;u5.exports=rF});var g5=G0((OA,f5)=>{var eF=function(Q,J){var Z=typeof Q;return J=J==null?oF:J,!!J&&(Z=="number"||Z!="symbol"&&tF.test(Q))&&(Q>-1&&Q%1==0&&Q<J)},oF=9007199254740991,tF=/^(?:0|[1-9]\d*)$/;f5.exports=eF});var x5=G0((NA,y5)=>{var GU=function(Q,J,Z,$){if(!h5(Q))return Q;J=QU(J,Q);var G=-1,F=J.length,U=F-1,K=Q;while(K!=null&&++G<F){var M=$U(J[G]),q=Z;if(M==="__proto__"||M==="constructor"||M==="prototype")return Q;if(G!=U){var L=K[M];if(q=$?$(L,M,K):void 0,q===void 0)q=h5(L)?L:ZU(J[G+1])?[]:{}}JU(K,M,q),K=K[M]}return Q},JU=m5(),QU=I6(),ZU=g5(),h5=AJ(),$U=C9();y5.exports=GU});var d5=G0((HA,c5)=>{var UU=function(Q,J,Z){return Q==null?Q:FU(Q,J,Z)},FU=x5();c5.exports=UU});var l5=G0((kA,p5)=>{var KU=function(Q,J){var Z=-1,$=Q.length;J||(J=Array($));while(++Z<$)J[Z]=Q[Z];return J};p5.exports=KU});var a5=G0((EA,i5)=>{var YU=function(Q){if(LU(Q))return qU(Q,RU);return zU(Q)?[Q]:MU(AU(VU(Q)))},qU=C6(),MU=l5(),LU=cJ(),zU=RJ(),AU=D6(),RU=C9(),VU=S6();i5.exports=YU});var E4=G0((WA,k4)=>{var A9=function(Q){return Q&&typeof Q==="object"&&"default"in Q?Q:{default:Q}},d0=function(Q){return d0=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(J){return typeof J}:function(J){return J&&typeof Symbol=="function"&&J.constructor===Symbol&&J!==Symbol.prototype?"symbol":typeof J},d0(Q)},t6=function(Q,J){if(!(Q instanceof J))throw new TypeError("Cannot call a class as a function")},n5=function(Q,J){for(var Z=0;Z<J.length;Z++){var $=J[Z];if($.enumerable=$.enumerable||!1,$.configurable=!0,"value"in $)$.writable=!0;Object.defineProperty(Q,$.key,$)}},e6=function(Q,J,Z){if(J)n5(Q.prototype,J);if(Z)n5(Q,Z);return Object.defineProperty(Q,"prototype",{writable:!1}),Q},rZ=function(Q,J,Z){if(J in Q)Object.defineProperty(Q,J,{value:Z,enumerable:!0,configurable:!0,writable:!0});else Q[J]=Z;return Q},H8=function(Q,J){return TU(Q)||jU(Q,J)||DU(Q,J)||CU()},TU=function(Q){if(Array.isArray(Q))return Q},jU=function(Q,J){var Z=Q==null?null:typeof Symbol!=="undefined"&&Q[Symbol.iterator]||Q["@@iterator"];if(Z==null)return;var $=[],G=!0,F=!1,U,K;try{for(Z=Z.call(Q);!(G=(U=Z.next()).done);G=!0)if($.push(U.value),J&&$.length===J)break}catch(M){F=!0,K=M}finally{try{if(!G&&Z.return!=null)Z.return()}finally{if(F)throw K}}return $},DU=function(Q,J){if(!Q)return;if(typeof Q==="string")return s5(Q,J);var Z=Object.prototype.toString.call(Q).slice(8,-1);if(Z==="Object"&&Q.constructor)Z=Q.constructor.name;if(Z==="Map"||Z==="Set")return Array.from(Q);if(Z==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(Z))return s5(Q,J)},s5=function(Q,J){if(J==null||J>Q.length)J=Q.length;for(var Z=0,$=new Array(J);Z<J;Z++)$[Z]=Q[Z];return $},CU=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},q6=function(Q,J,Z,$,G,F){var U;if(f0(Q))U=Q;else U=IJ[Q]||IJ.euclidean;if(J===0&&f0(Q))return U(G,F);else return U(J,Z,$,G,F)},L7=function(Q,J,Z,$){var G=[],F=new PJ,U=Q.cy(),K=U.hasCompoundNodes();for(var M=0;M<Q.length;M++){var q=Q[M];if(Z)G.push(q);else if(K)$(G,F,q)}while(G.length>0){var L=G.shift();if(J(L),F.add(L.id()),K)$(G,F,L)}return Q},I$=function(Q,J,Z){if(Z.isParent()){var $=Z._private.children;for(var G=0;G<$.length;G++){var F=$[G];if(!J.has(F.id()))Q.push(F)}}},w$=function(Q,J,Z){if(Z.isChild()){var $=Z._private.parent;if(!J.has($.id()))Q.push($)}},QM=function(Q,J,Z){w$(Q,J,Z),I$(Q,J,Z)},_6=function(Q){return function(J){var Z=this;if(J===void 0)J=!0;if(Z.length===0)return;if(Z.isNode()&&!Z.removed()){var $=0,G=Z[0],F=G._private.edges;for(var U=0;U<F.length;U++){var K=F[U];if(!J&&K.isLoop())continue;$+=Q(G,K)}return $}else return}},OJ=function(Q,J){return function(Z){var $,G=this.nodes();for(var F=0;F<G.length;F++){var U=G[F],K=U[Q](Z);if(K!==void 0&&($===void 0||J(K,$)))$=K}return $}},nJ=function(){return!1},u9=function(){return!0},L6=function(){var Q=arguments.length>0&&arguments[0]!==void 0?arguments[0]:HM,J=arguments.length>1?arguments[1]:void 0;for(var Z=0;Z<EZ.length;Z++){var $=EZ[Z];this[$]=Q[$]||h$[$]}this.context=J||this.context,this.listeners=[],this.emitting=0},p$=function(Q,J,Z){var $=Z._private,G=$.styleCache=$.styleCache||[],F;if((F=G[Q])!=null)return F;else return F=G[Q]=J(Z),F},z6=function(Q,J){return Q=ZJ(Q),function Z($){return p$(Q,J,$)}},A6=function(Q,J){Q=ZJ(Q);var Z=function $(G){return J.call(G)};return function $(){var G=this[0];if(G)return p$(Q,Z,G)}},m6=function(Q,J){var Z=Q._private,$=Z.data.parent?Q.parents():null;if($)for(var G=0;G<$.length;G++){var F=$[G];if(!J(F))return!1}return!0},z7=function(Q){var J=Q.ok,Z=Q.edgeOkViaNode||Q.ok,$=Q.parentOk||Q.ok;return function(){var G=this.cy();if(!G.styleEnabled())return!0;var F=this[0],U=G.hasCompoundNodes();if(F){var K=F._private;if(!J(F))return!1;if(F.isNode())return!U||m6(F,$);else{var{source:M,target:q}=K;return Z(M)&&(!U||m6(M,Z))&&(M===q||Z(q)&&(!U||m6(q,Z)))}}}},TZ=function(Q){return function(){var J=arguments,Z=[];if(J.length===2){var $=J[0],G=J[1];this.on(Q.event,$,G)}else if(J.length===1&&f0(J[0])){var F=J[0];this.on(Q.event,F)}else if(J.length===0||J.length===1&&b0(J[0])){var U=J.length===1?J[0]:null;for(var K=0;K<this.length;K++){var M=this[K],q=!Q.ableField||M._private[Q.ableField],L=M._private[Q.field]!=Q.value;if(Q.overrideAble){var z=Q.overrideAble(M);if(z!==void 0){if(q=z,!z)return this}}if(q){if(M._private[Q.field]=Q.value,L)Z.push(M)}}var A=this.spawn(Z);if(A.updateStyle(),A.emit(Q.event),U)A.emit(U)}return this}},_J=function(Q){c8[Q.field]=function(){var J=this[0];if(J){if(Q.overrideField){var Z=Q.overrideField(J);if(Z!==void 0)return Z}return J._private[Q.field]}},c8[Q.on]=TZ({event:Q.on,field:Q.field,ableField:Q.ableField,overrideAble:Q.overrideAble,value:!0}),c8[Q.off]=TZ({event:Q.off,field:Q.field,ableField:Q.ableField,overrideAble:Q.overrideAble,value:!1})},SZ=function(Q){return function J(Z){var $=[];for(var G=0;G<this.length;G++){var F=this[G],U=F._private[Q.attr];if(U)$.push(U)}return this.spawn($,!0).filter(Z)}},IZ=function(Q){return function J(Z){var $=[],G=this._private.cy,F=Q||{};if(R0(Z))Z=G.$(Z);for(var U=0;U<Z.length;U++){var K=Z[U]._private.edges;for(var M=0;M<K.length;M++){var q=K[M],L=q._private.data,z=this.hasElementWithId(L.source)&&Z.hasElementWithId(L.target),A=Z.hasElementWithId(L.source)&&this.hasElementWithId(L.target),V=z||A;if(!V)continue;if(F.thisIsSrc||F.thisIsTgt){if(F.thisIsSrc&&!z)continue;if(F.thisIsTgt&&!A)continue}$.push(q)}}return this.spawn($,!0)}},wZ=function(Q){var J={codirected:!1};return Q=V0({},J,Q),function Z($){var G=[],F=this.edges(),U=Q;for(var K=0;K<F.length;K++){var M=F[K],q=M._private,L=q.source,z=L._private.data.id,A=q.data.target,V=L._private.edges;for(var R=0;R<V.length;R++){var Y=V[R],X=Y._private.data,B=X.target,O=X.source,N=B===A&&O===z,H=z===B&&A===O;if(U.codirected&&N||!U.codirected&&(N||H))G.push(Y)}}return this.spawn(G,!0).filter($)}},PM=function(Q,J,Z,$){var G=4,F=0.001,U=0.0000001,K=10,M=11,q=1/(M-1),L=typeof Float32Array!=="undefined";if(arguments.length!==4)return!1;for(var z=0;z<4;++z)if(typeof arguments[z]!=="number"||isNaN(arguments[z])||!isFinite(arguments[z]))return!1;Q=Math.min(Q,1),Z=Math.min(Z,1),Q=Math.max(Q,0),Z=Math.max(Z,0);var A=L?new Float32Array(M):new Array(M);function V(S,w){return 1-3*w+3*S}function R(S,w){return 3*w-6*S}function Y(S){return 3*S}function X(S,w,T){return((V(w,T)*S+R(w,T))*S+Y(w))*S}function B(S,w,T){return 3*V(w,T)*S*S+2*R(w,T)*S+Y(w)}function O(S,w){for(var T=0;T<G;++T){var v=B(w,Q,Z);if(v===0)return w;var I=X(w,Q,Z)-S;w-=I/v}return w}function N(){for(var S=0;S<M;++S)A[S]=X(S*q,Q,Z)}function H(S,w,T){var v,I,_=0;do if(I=w+(T-w)/2,v=X(I,Q,Z)-S,v>0)T=I;else w=I;while(Math.abs(v)>U&&++_<K);return I}function j(S){var w=0,T=1,v=M-1;for(;T!==v&&A[T]<=S;++T)w+=q;--T;var I=(S-A[T])/(A[T+1]-A[T]),_=w+I*q,b=B(_,Q,Z);if(b>=F)return O(S,_);else if(b===0)return _;else return H(S,w,w+q)}var D=!1;function k(){if(D=!0,Q!==J||Z!==$)N()}var C=function S(w){if(!D)k();if(Q===J&&Z===$)return w;if(w===0)return 0;if(w===1)return 1;return X(j(w),J,$)};C.getControlPoints=function(){return[{x:Q,y:J},{x:Z,y:$}]};var E="generateBezier("+[Q,J,Z,$]+")";return C.toString=function(){return E},C},PZ=function(Q,J,Z,$,G){if($===1)return Z;if(J===Z)return Z;var F=G(J,Z,$);if(Q==null)return F;if(Q.roundValue||Q.color)F=Math.round(F);if(Q.min!==void 0)F=Math.max(F,Q.min);if(Q.max!==void 0)F=Math.min(F,Q.max);return F},vZ=function(Q,J){if(Q.pfValue!=null||Q.value!=null)if(Q.pfValue!=null&&(J==null||J.type.units!=="%"))return Q.pfValue;else return Q.value;else return Q},NJ=function(Q,J,Z,$,G){var F=G!=null?G.type:null;if(Z<0)Z=0;else if(Z>1)Z=1;var U=vZ(Q,G),K=vZ(J,G);if($0(U)&&$0(K))return PZ(F,U,K,Z,$);else if(b0(U)&&b0(K)){var M=[];for(var q=0;q<K.length;q++){var L=U[q],z=K[q];if(L!=null&&z!=null){var A=PZ(F,L,z,Z,$);M.push(A)}else M.push(z)}return M}return},bM=function(Q,J,Z,$){var G=!$,F=Q._private,U=J._private,K=U.easing,M=U.startTime,q=$?Q:Q.cy(),L=q.style();if(!U.easingImpl)if(K==null)U.easingImpl=d9.linear;else{var z;if(R0(K)){var A=L.parse("transition-timing-function",K);z=A.value}else z=K;var V,R;if(R0(z))V=z,R=[];else V=z[1],R=z.slice(2).map(function(h){return+h});if(R.length>0){if(V==="spring")R.push(U.duration);U.easingImpl=d9[V].apply(null,R)}else U.easingImpl=d9[V]}var Y=U.easingImpl,X;if(U.duration===0)X=1;else X=(Z-M)/U.duration;if(U.applying)X=U.progress;if(X<0)X=0;else if(X>1)X=1;if(U.delay==null){var{startPosition:B,position:O}=U;if(O&&G&&!Q.locked()){var N={};if(sJ(B.x,O.x))N.x=NJ(B.x,O.x,X,Y);if(sJ(B.y,O.y))N.y=NJ(B.y,O.y,X,Y);Q.position(N)}var{startPan:H,pan:j}=U,D=F.pan,k=j!=null&&$;if(k){if(sJ(H.x,j.x))D.x=NJ(H.x,j.x,X,Y);if(sJ(H.y,j.y))D.y=NJ(H.y,j.y,X,Y);Q.emit("pan")}var{startZoom:C,zoom:E}=U,S=E!=null&&$;if(S){if(sJ(C,E))F.zoom=U9(F.minZoom,NJ(C,E,X,Y),F.maxZoom);Q.emit("zoom")}if(k||S)Q.emit("viewport");var w=U.style;if(w&&w.length>0&&G){for(var T=0;T<w.length;T++){var v=w[T],I=v.name,_=v,b=U.startStyle[I],P=L.properties[b.name],u=NJ(b,_,X,Y,P);L.overrideBypass(Q,I,u)}Q.emit("style")}}return U.progress=X,X},sJ=function(Q,J){if(Q==null||J==null)return!1;if($0(Q)&&$0(J))return!0;else if(Q&&J)return!0;return!1},_M=function(Q,J,Z,$){var G=J._private;G.started=!0,G.startTime=Z-G.progress*G.duration},bZ=function(Q,J){var Z=J._private.aniEles,$=[];function G(L,z){var A=L._private,V=A.animation.current,R=A.animation.queue,Y=!1;if(V.length===0){var X=R.shift();if(X)V.push(X)}var B=function j(D){for(var k=D.length-1;k>=0;k--){var C=D[k];C()}D.splice(0,D.length)};for(var O=V.length-1;O>=0;O--){var N=V[O],H=N._private;if(H.stopped){V.splice(O,1),H.hooked=!1,H.playing=!1,H.started=!1,B(H.frames);continue}if(!H.playing&&!H.applying)continue;if(H.playing&&H.applying)H.applying=!1;if(!H.started)_M(L,N,Q);if(bM(L,N,Q,z),H.applying)H.applying=!1;if(B(H.frames),H.step!=null)H.step(Q);if(N.completed())V.splice(O,1),H.hooked=!1,H.playing=!1,H.started=!1,B(H.completes);Y=!0}if(!z&&V.length===0&&R.length===0)$.push(L);return Y}var F=!1;for(var U=0;U<Z.length;U++){var K=Z[U],M=G(K);F=F||M}var q=G(J,!0);if(F||q)if(Z.length>0)J.notify("draw",Z);else J.notify("draw");Z.unmerge($),J.emit("step")},i$=function(Q){this.options=V0({},cM,dM,Q)},a$=function(Q){this.options=V0({},pM,Q)},n$=function(Q){this.options=V0({},lM,Q)},Y6=function(Q){this.options=V0({},iM,Q),this.options.layout=this;var J=this.options.eles.nodes(),Z=this.options.eles.edges(),$=Z.filter(function(G){var F=G.source().data("id"),U=G.target().data("id"),K=J.some(function(q){return q.data("id")===F}),M=J.some(function(q){return q.data("id")===U});return!K||!M});this.options.eles=this.options.eles.not($)},r$=function(Q){this.options=V0({},ML,Q)},V7=function(Q){this.options=V0({},LL,Q)},o$=function(Q){this.options=V0({},zL,Q)},t$=function(Q){this.options=V0({},AL,Q)},e$=function(Q){this.options=Q,this.notifications=0},J4=function(Q){var J=[];if(Q==null)return;for(var Z=0;Z<Q.length;Z+=2){var $=Q[Z],G=Q[Z+1];J.push({x:$,y:G})}return J},VL=function(Q,J,Z){var $=function M(q,L,z,A){return l0(q,L,z,A)},G=J._private,F=G.rstyle.bezierPts;for(var U=0;U<Q.bezierProjPcts.length;U++){var K=Q.bezierProjPcts[U];F.push({x:$(Z[0],Z[2],Z[4],K),y:$(Z[1],Z[3],Z[5],K)})}},lL=function(Q,J){for(var Z=0;Z<J.length;Z++){var $=J[Z];Q.lineTo($.x,$.y)}},iL=function(Q,J,Z){var $;for(var G=0;G<J.length;G++){var F=J[G];if(G===0)$=F;Q.lineTo(F.x,F.y)}Q.quadraticCurveTo(Z.x,Z.y,$.x,$.y)},iZ=function(Q,J,Z){if(Q.beginPath)Q.beginPath();var $=J;for(var G=0;G<$.length;G++){var F=$[G];Q.lineTo(F.x,F.y)}var U=Z,K=Z[0];Q.moveTo(K.x,K.y);for(var G=1;G<U.length;G++){var F=U[G];Q.lineTo(F.x,F.y)}if(Q.closePath)Q.closePath()},aL=function(Q,J,Z,$,G){if(Q.beginPath)Q.beginPath();Q.arc(Z,$,G,0,Math.PI*2,!1);var F=J,U=F[0];Q.moveTo(U.x,U.y);for(var K=0;K<F.length;K++){var M=F[K];Q.lineTo(M.x,M.y)}if(Q.closePath)Q.closePath()},nL=function(Q,J,Z,$){Q.arc(J,Z,$,0,Math.PI*2,!1)},Jz=function(Q,J,Z,$,G){var F=arguments.length>5&&arguments[5]!==void 0?arguments[5]:5;Q.beginPath(),Q.moveTo(J+F,Z),Q.lineTo(J+$-F,Z),Q.quadraticCurveTo(J+$,Z,J+$,Z+F),Q.lineTo(J+$,Z+G-F),Q.quadraticCurveTo(J+$,Z+G,J+$-F,Z+G),Q.lineTo(J+F,Z+G),Q.quadraticCurveTo(J,Z+G,J,Z+G-F),Q.lineTo(J,Z+F),Q.quadraticCurveTo(J,Z,J+F,Z),Q.closePath(),Q.fill()},Zz=function(Q,J){var Z=atob(Q),$=new ArrayBuffer(Z.length),G=new Uint8Array($);for(var F=0;F<Z.length;F++)G[F]=Z.charCodeAt(F);return new Blob([$],{type:J})},sZ=function(Q){var J=Q.indexOf(",");return Q.substr(J+1)},R4=function(Q,J,Z){var $=function G(){return J.toDataURL(Z,Q.quality)};switch(Q.output){case"blob-promise":return new vJ(function(G,F){try{J.toBlob(function(U){if(U!=null)G(U);else F(new Error("`canvas.toBlob()` sent a null value in its callback"))},Z,Q.quality)}catch(U){F(U)}});case"blob":return Zz(sZ($()),Z);case"base64":return sZ($());case"base64uri":default:return $()}},Y4=function(Q){var J=this;J.data={canvases:new Array(S0.CANVAS_LAYERS),contexts:new Array(S0.CANVAS_LAYERS),canvasNeedsRedraw:new Array(S0.CANVAS_LAYERS),bufferCanvases:new Array(S0.BUFFER_COUNT),bufferContexts:new Array(S0.CANVAS_LAYERS)};var Z="-webkit-tap-highlight-color",$="rgba(0,0,0,0)";J.data.canvasContainer=document.createElement("div");var G=J.data.canvasContainer.style;J.data.canvasContainer.style[Z]=$,G.position="relative",G.zIndex="0",G.overflow="hidden";var F=Q.cy.container();F.appendChild(J.data.canvasContainer),F.style[Z]=$;var U={"-webkit-user-select":"none","-moz-user-select":"-moz-none","user-select":"none","-webkit-tap-highlight-color":"rgba(0,0,0,0)","outline-style":"none"};if(fU())U["-ms-touch-action"]="none",U["touch-action"]="none";for(var K=0;K<S0.CANVAS_LAYERS;K++){var M=J.data.canvases[K]=document.createElement("canvas");J.data.contexts[K]=M.getContext("2d"),Object.keys(U).forEach(function(n){M.style[n]=U[n]}),M.style.position="absolute",M.setAttribute("data-id","layer"+K),M.style.zIndex=String(S0.CANVAS_LAYERS-K),J.data.canvasContainer.appendChild(M),J.data.canvasNeedsRedraw[K]=!1}J.data.topCanvas=J.data.canvases[0],J.data.canvases[S0.NODE].setAttribute("data-id","layer"+S0.NODE+"-node"),J.data.canvases[S0.SELECT_BOX].setAttribute("data-id","layer"+S0.SELECT_BOX+"-selectbox"),J.data.canvases[S0.DRAG].setAttribute("data-id","layer"+S0.DRAG+"-drag");for(var K=0;K<S0.BUFFER_COUNT;K++)J.data.bufferCanvases[K]=document.createElement("canvas"),J.data.bufferContexts[K]=J.data.bufferCanvases[K].getContext("2d"),J.data.bufferCanvases[K].style.position="absolute",J.data.bufferCanvases[K].setAttribute("data-id","buffer"+K),J.data.bufferCanvases[K].style.zIndex=String(-K-1),J.data.bufferCanvases[K].style.visibility="hidden";J.pathsEnabled=!0;var q=L8(),L=function n(f){return{x:(f.x1+f.x2)/2,y:(f.y1+f.y2)/2}},z=function n(f){return{x:-f.w/2,y:-f.h/2}},A=function n(f){var o=f[0]._private,e=o.oldBackgroundTimestamp===o.backgroundTimestamp;return!e},V=function n(f){return f[0]._private.nodeKey},R=function n(f){return f[0]._private.labelStyleKey},Y=function n(f){return f[0]._private.sourceLabelStyleKey},X=function n(f){return f[0]._private.targetLabelStyleKey},B=function n(f,o,e,t,J0){return J.drawElement(f,o,e,!1,!1,J0)},O=function n(f,o,e,t,J0){return J.drawElementText(f,o,e,t,"main",J0)},N=function n(f,o,e,t,J0){return J.drawElementText(f,o,e,t,"source",J0)},H=function n(f,o,e,t,J0){return J.drawElementText(f,o,e,t,"target",J0)},j=function n(f){return f.boundingBox(),f[0]._private.bodyBounds},D=function n(f){return f.boundingBox(),f[0]._private.labelBounds.main||q},k=function n(f){return f.boundingBox(),f[0]._private.labelBounds.source||q},C=function n(f){return f.boundingBox(),f[0]._private.labelBounds.target||q},E=function n(f,o){return o},S=function n(f){return L(j(f))},w=function n(f,o,e){var t=f?f+"-":"";return{x:o.x+e.pstyle(t+"text-margin-x").pfValue,y:o.y+e.pstyle(t+"text-margin-y").pfValue}},T=function n(f,o,e){var t=f[0]._private.rscratch;return{x:t[o],y:t[e]}},v=function n(f){return w("",T(f,"labelX","labelY"),f)},I=function n(f){return w("source",T(f,"sourceLabelX","sourceLabelY"),f)},_=function n(f){return w("target",T(f,"targetLabelX","targetLabelY"),f)},b=function n(f){return z(j(f))},P=function n(f){return z(k(f))},u=function n(f){return z(C(f))},h=function n(f){var o=D(f),e=z(D(f));if(f.isNode()){switch(f.pstyle("text-halign").value){case"left":e.x=-o.w;break;case"right":e.x=0;break}switch(f.pstyle("text-valign").value){case"top":e.y=-o.h;break;case"bottom":e.y=0;break}}return e},p=J.data.eleTxrCache=new eJ(J,{getKey:V,doesEleInvalidateKey:A,drawElement:B,getBoundingBox:j,getRotationPoint:S,getRotationOffset:b,allowEdgeTxrCaching:!1,allowParentTxrCaching:!1}),m=J.data.lblTxrCache=new eJ(J,{getKey:R,drawElement:O,getBoundingBox:D,getRotationPoint:v,getRotationOffset:h,isVisible:E}),c=J.data.slbTxrCache=new eJ(J,{getKey:Y,drawElement:N,getBoundingBox:k,getRotationPoint:I,getRotationOffset:P,isVisible:E}),i=J.data.tlbTxrCache=new eJ(J,{getKey:X,drawElement:H,getBoundingBox:C,getRotationPoint:_,getRotationOffset:u,isVisible:E}),r=J.data.lyrTxrCache=new q4(J);J.onUpdateEleCalcs(function n(f,o){p.invalidateElements(o),m.invalidateElements(o),c.invalidateElements(o),i.invalidateElements(o),r.invalidateElements(o);for(var e=0;e<o.length;e++){var t=o[e]._private;t.oldBackgroundTimestamp=t.backgroundTimestamp}});var a=function n(f){for(var o=0;o<f.length;o++)r.enqueueElementRefinement(f[o].ele)};p.onDequeue(a),m.onDequeue(a),c.onDequeue(a),i.onDequeue(a)},O4=function(Q,J,Z){var $=Z,G=function k(C){P0("Can not register `"+J+"` for `"+Q+"` since `"+C+"` already exists in the prototype and can not be overridden")};if(Q==="core")if(z9.prototype[J])return G(J);else z9.prototype[J]=Z;else if(Q==="collection")if(r0.prototype[J])return G(J);else r0.prototype[J]=Z;else if(Q==="layout"){var F=function k(C){if(this.options=C,Z.call(this,C),!D0(this._private))this._private={};this._private.cy=C.cy,this._private.listeners=[],this.createEmitter()},U=F.prototype=Object.create(Z.prototype),K=[];for(var M=0;M<K.length;M++){var q=K[M];U[q]=U[q]||function(){return this}}if(U.start&&!U.run)U.run=function(){return this.start(),this};else if(!U.start&&U.run)U.start=function(){return this.run(),this};var L=Z.prototype.stop;if(U.stop=function(){var k=this.options;if(k&&k.animate){var C=this.animations;if(C)for(var E=0;E<C.length;E++)C[E].stop()}if(L)L.call(this);else this.emit("layoutstop");return this},!U.destroy)U.destroy=function(){return this};U.cy=function(){return this._private.cy};var z=function k(C){return C._private.cy},A={addEventFields:function k(C,E){E.layout=C,E.cy=z(C),E.target=C},bubble:function k(){return!0},parent:function k(C){return z(C)}};V0(U,{createEmitter:function k(){return this._private.emitter=new L6(A,this),this},emitter:function k(){return this._private.emitter},on:function k(C,E){return this.emitter().on(C,E),this},one:function k(C,E){return this.emitter().one(C,E),this},once:function k(C,E){return this.emitter().one(C,E),this},removeListener:function k(C,E){return this.emitter().removeListener(C,E),this},removeAllListeners:function k(){return this.emitter().removeAllListeners(),this},emit:function k(C,E){return this.emitter().emit(C,E),this}}),w0.eventAliasesOn(U),$=F}else if(Q==="renderer"&&J!=="null"&&J!=="base"){var V=N4("renderer","base"),R=V.prototype,Y=Z,X=Z.prototype,B=function k(){V.apply(this,arguments),Y.apply(this,arguments)},O=B.prototype;for(var N in R){var H=R[N],j=X[N]!=null;if(j)return G(N);O[N]=H}for(var D in X)O[D]=X[D];R.clientFunctions.forEach(function(k){O[k]=O[k]||function(){h0("Renderer does not implement `renderer."+k+"()` on its prototype")}}),$=B}else if(Q==="__proto__"||Q==="constructor"||Q==="prototype")return h0(Q+" is an illegal type to be registered, possibly lead to prototype pollutions");return Z$({map:X4,keys:[Q,J],value:$})},N4=function(Q,J){return $$({map:X4,keys:[Q,J]})},Kz=function(Q,J,Z,$,G){return Z$({map:B4,keys:[Q,J,Z,$],value:G})},qz=function(Q,J,Z,$){return $$({map:B4,keys:[Q,J,Z,$]})},XU=t7(),BU=JQ(),OU=I5(),NU=d5(),HU=a5(),G6=A9(XU),R9=A9(BU),kU=A9(OU),EU=A9(NU),WU=A9(HU),x0=typeof window==="undefined"?null:window,r5=x0?x0.navigator:null;x0&&x0.document;var SU=d0(""),oZ=d0({}),IU=d0(function(){}),wU=typeof HTMLElement==="undefined"?"undefined":d0(HTMLElement),V9=function Q(J){return J&&J.instanceString&&f0(J.instanceString)?J.instanceString():null},R0=function Q(J){return J!=null&&d0(J)==SU},f0=function Q(J){return J!=null&&d0(J)===IU},b0=function Q(J){return!z8(J)&&(Array.isArray?Array.isArray(J):J!=null&&J instanceof Array)},D0=function Q(J){return J!=null&&d0(J)===oZ&&!b0(J)&&J.constructor===Object},PU=function Q(J){return J!=null&&d0(J)===oZ},$0=function Q(J){return J!=null&&d0(J)===d0(1)&&!isNaN(J)},vU=function Q(J){return $0(J)&&Math.floor(J)===J},a9=function Q(J){if(wU==="undefined")return;else return J!=null&&J instanceof HTMLElement},z8=function Q(J){return Y9(J)||tZ(J)},Y9=function Q(J){return V9(J)==="collection"&&J._private.single},tZ=function Q(J){return V9(J)==="collection"&&!J._private.single},J7=function Q(J){return V9(J)==="core"},eZ=function Q(J){return V9(J)==="stylesheet"},bU=function Q(J){return V9(J)==="event"},d8=function Q(J){if(J===void 0||J===null)return!0;else if(J===""||J.match(/^\s+$/))return!0;return!1},_U=function Q(J){if(typeof HTMLElement==="undefined")return!1;else return J instanceof HTMLElement},uU=function Q(J){return D0(J)&&$0(J.x1)&&$0(J.x2)&&$0(J.y1)&&$0(J.y2)},mU=function Q(J){return PU(J)&&f0(J.then)},fU=function Q(){return r5&&r5.userAgent.match(/msie|trident|edge/i)},Z9=function Q(J,Z){if(!Z)Z=function G(){if(arguments.length===1)return arguments[0];else if(arguments.length===0)return"undefined";var F=[];for(var U=0;U<arguments.length;U++)F.push(arguments[U]);return F.join("$")};var $=function G(){var F=this,U=arguments,K,M=Z.apply(F,U),q=G.cache;if(!(K=q[M]))K=q[M]=J.apply(F,U);return K};return $.cache={},$},Q7=Z9(function(Q){return Q.replace(/([A-Z])/g,function(J){return"-"+J.toLowerCase()})}),F6=Z9(function(Q){return Q.replace(/(-\w)/g,function(J){return J[1].toUpperCase()})}),J$=Z9(function(Q,J){return Q+J[0].toUpperCase()+J.substring(1)},function(Q,J){return Q+"$"+J}),o5=function Q(J){if(d8(J))return J;return J.charAt(0).toUpperCase()+J.substring(1)},c0="(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))",gU="rgb[a]?\\(("+c0+"[%]?)\\s*,\\s*("+c0+"[%]?)\\s*,\\s*("+c0+"[%]?)(?:\\s*,\\s*("+c0+"))?\\)",hU="rgb[a]?\\((?:"+c0+"[%]?)\\s*,\\s*(?:"+c0+"[%]?)\\s*,\\s*(?:"+c0+"[%]?)(?:\\s*,\\s*(?:"+c0+"))?\\)",yU="hsl[a]?\\(("+c0+")\\s*,\\s*("+c0+"[%])\\s*,\\s*("+c0+"[%])(?:\\s*,\\s*("+c0+"))?\\)",xU="hsl[a]?\\((?:"+c0+")\\s*,\\s*(?:"+c0+"[%])\\s*,\\s*(?:"+c0+"[%])(?:\\s*,\\s*(?:"+c0+"))?\\)",cU="\\#[0-9a-fA-F]{3}",dU="\\#[0-9a-fA-F]{6}",Q$=function Q(J,Z){if(J<Z)return-1;else if(J>Z)return 1;else return 0},pU=function Q(J,Z){return-1*Q$(J,Z)},V0=Object.assign!=null?Object.assign.bind(Object):function(Q){var J=arguments;for(var Z=1;Z<J.length;Z++){var $=J[Z];if($==null)continue;var G=Object.keys($);for(var F=0;F<G.length;F++){var U=G[F];Q[U]=$[U]}}return Q},lU=function Q(J){if(!(J.length===4||J.length===7)||J[0]!=="#")return;var Z=J.length===4,$,G,F,U=16;if(Z)$=parseInt(J[1]+J[1],U),G=parseInt(J[2]+J[2],U),F=parseInt(J[3]+J[3],U);else $=parseInt(J[1]+J[2],U),G=parseInt(J[3]+J[4],U),F=parseInt(J[5]+J[6],U);return[$,G,F]},iU=function Q(J){var Z,$,G,F,U,K,M,q;function L(R,Y,X){if(X<0)X+=1;if(X>1)X-=1;if(X<0.16666666666666666)return R+(Y-R)*6*X;if(X<0.5)return Y;if(X<0.6666666666666666)return R+(Y-R)*(0.6666666666666666-X)*6;return R}var z=new RegExp("^"+yU+"$").exec(J);if(z){if($=parseInt(z[1]),$<0)$=(360- -1*$%360)%360;else if($>360)$=$%360;if($/=360,G=parseFloat(z[2]),G<0||G>100)return;if(G=G/100,F=parseFloat(z[3]),F<0||F>100)return;if(F=F/100,U=z[4],U!==void 0){if(U=parseFloat(U),U<0||U>1)return}if(G===0)K=M=q=Math.round(F*255);else{var A=F<0.5?F*(1+G):F+G-F*G,V=2*F-A;K=Math.round(255*L(V,A,$+0.3333333333333333)),M=Math.round(255*L(V,A,$)),q=Math.round(255*L(V,A,$-0.3333333333333333))}Z=[K,M,q,U]}return Z},aU=function Q(J){var Z,$=new RegExp("^"+gU+"$").exec(J);if($){Z=[];var G=[];for(var F=1;F<=3;F++){var U=$[F];if(U[U.length-1]==="%")G[F]=!0;if(U=parseFloat(U),G[F])U=U/100*255;if(U<0||U>255)return;Z.push(Math.floor(U))}var K=G[1]||G[2]||G[3],M=G[1]&&G[2]&&G[3];if(K&&!M)return;var q=$[4];if(q!==void 0){if(q=parseFloat(q),q<0||q>1)return;Z.push(q)}}return Z},nU=function Q(J){return rU[J.toLowerCase()]},sU=function Q(J){return(b0(J)?J:null)||nU(J)||lU(J)||aU(J)||iU(J)},rU={transparent:[0,0,0,0],aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],grey:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},Z$=function Q(J){var{map:Z,keys:$}=J,G=$.length;for(var F=0;F<G;F++){var U=$[F];if(D0(U))throw Error("Tried to set map with object key");if(F<$.length-1){if(Z[U]==null)Z[U]={};Z=Z[U]}else Z[U]=J.value}},$$=function Q(J){var{map:Z,keys:$}=J,G=$.length;for(var F=0;F<G;F++){var U=$[F];if(D0(U))throw Error("Tried to get map with object key");if(Z=Z[U],Z==null)return Z}return Z},w6=x0?x0.performance:null,G$=w6&&w6.now?function(){return w6.now()}:function(){return Date.now()},oU=function(){if(x0){if(x0.requestAnimationFrame)return function(Q){x0.requestAnimationFrame(Q)};else if(x0.mozRequestAnimationFrame)return function(Q){x0.mozRequestAnimationFrame(Q)};else if(x0.webkitRequestAnimationFrame)return function(Q){x0.webkitRequestAnimationFrame(Q)};else if(x0.msRequestAnimationFrame)return function(Q){x0.msRequestAnimationFrame(Q)}}return function(Q){if(Q)setTimeout(function(){Q(G$())},16.666666666666668)}}(),n9=function Q(J){return oU(J)},P8=G$,kJ=9261,F$=65599,rJ=5381,U$=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:kJ,$=Z,G;for(;;){if(G=J.next(),G.done)break;$=$*F$+G.value|0}return $},$9=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:kJ;return Z*F$+J|0},G9=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:rJ;return(Z<<5)+Z+J|0},tU=function Q(J,Z){return J*2097152+Z},f8=function Q(J){return J[0]*2097152+J[1]},S9=function Q(J,Z){return[$9(J[0],Z[0]),G9(J[1],Z[1])]},eU=function Q(J,Z){var $={value:0,done:!1},G=0,F=J.length,U={next:function K(){if(G<F)$.value=J[G++];else $.done=!0;return $}};return U$(U,Z)},ZJ=function Q(J,Z){var $={value:0,done:!1},G=0,F=J.length,U={next:function K(){if(G<F)$.value=J.charCodeAt(G++);else $.done=!0;return $}};return U$(U,Z)},K$=function Q(){return JK(arguments)},JK=function Q(J){var Z;for(var $=0;$<J.length;$++){var G=J[$];if($===0)Z=ZJ(G);else Z=ZJ(G,Z)}return Z},t5=!0,QK=console.warn!=null,ZK=console.trace!=null,Z7=Number.MAX_SAFE_INTEGER||9007199254740991,q$=function Q(){return!0},s9=function Q(){return!1},e5=function Q(){return 0},$7=function Q(){},h0=function Q(J){throw new Error(J)},M$=function Q(J){if(J!==void 0)t5=!!J;else return t5},P0=function Q(J){if(!M$())return;if(QK)console.warn(J);else if(console.log(J),ZK)console.trace()},$K=function Q(J){return V0({},J)},j8=function Q(J){if(J==null)return J;if(b0(J))return J.slice();else if(D0(J))return $K(J);else return J},GK=function Q(J){return J.slice()},L$=function Q(J,Z){for(Z=J="";J++<36;Z+=J*51&52?(J^15?8^Math.random()*(J^20?16:4):4).toString(16):"-");return Z},FK={},z$=function Q(){return FK},o0=function Q(J){var Z=Object.keys(J);return function($){var G={};for(var F=0;F<Z.length;F++){var U=Z[F],K=$==null?void 0:$[U];G[U]=K===void 0?J[U]:K}return G}},p8=function Q(J,Z,$){for(var G=J.length-1;G>=0;G--)if(J[G]===Z){if(J.splice(G,1),$)break}},G7=function Q(J){J.splice(0,J.length)},UK=function Q(J,Z){for(var $=0;$<Z.length;$++){var G=Z[$];J.push(G)}},E8=function Q(J,Z,$){if($)Z=J$($,Z);return J[Z]},h8=function Q(J,Z,$,G){if($)Z=J$($,Z);J[Z]=G},KK=function(){function Q(){t6(this,Q),this._obj={}}return e6(Q,[{key:"set",value:function J(Z,$){return this._obj[Z]=$,this}},{key:"delete",value:function J(Z){return this._obj[Z]=void 0,this}},{key:"clear",value:function J(){this._obj={}}},{key:"has",value:function J(Z){return this._obj[Z]!==void 0}},{key:"get",value:function J(Z){return this._obj[Z]}}]),Q}(),D8=typeof Map!=="undefined"?Map:KK,qK="undefined",MK=function(){function Q(J){if(t6(this,Q),this._obj=Object.create(null),this.size=0,J!=null){var Z;if(J.instanceString!=null&&J.instanceString()===this.instanceString())Z=J.toArray();else Z=J;for(var $=0;$<Z.length;$++)this.add(Z[$])}}return e6(Q,[{key:"instanceString",value:function J(){return"set"}},{key:"add",value:function J(Z){var $=this._obj;if($[Z]!==1)$[Z]=1,this.size++}},{key:"delete",value:function J(Z){var $=this._obj;if($[Z]===1)$[Z]=0,this.size--}},{key:"clear",value:function J(){this._obj=Object.create(null)}},{key:"has",value:function J(Z){return this._obj[Z]===1}},{key:"toArray",value:function J(){var Z=this;return Object.keys(this._obj).filter(function($){return Z.has($)})}},{key:"forEach",value:function J(Z,$){return this.toArray().forEach(Z,$)}}]),Q}(),PJ=(typeof Set==="undefined"?"undefined":d0(Set))!==qK?Set:MK,U6=function Q(J,Z){var $=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;if(J===void 0||Z===void 0||!J7(J)){h0("An element must have a core reference and parameters set");return}var G=Z.group;if(G==null)if(Z.data&&Z.data.source!=null&&Z.data.target!=null)G="edges";else G="nodes";if(G!=="nodes"&&G!=="edges"){h0("An element must be of type `nodes` or `edges`; you specified `"+G+"`");return}this.length=1,this[0]=this;var F=this._private={cy:J,single:!0,data:Z.data||{},position:Z.position||{x:0,y:0},autoWidth:void 0,autoHeight:void 0,autoPadding:void 0,compoundBoundsClean:!1,listeners:[],group:G,style:{},rstyle:{},styleCxts:[],styleKeys:{},removed:!0,selected:Z.selected?!0:!1,selectable:Z.selectable===void 0?!0:Z.selectable?!0:!1,locked:Z.locked?!0:!1,grabbed:!1,grabbable:Z.grabbable===void 0?!0:Z.grabbable?!0:!1,pannable:Z.pannable===void 0?G==="edges"?!0:!1:Z.pannable?!0:!1,active:!1,classes:new PJ,animation:{current:[],queue:[]},rscratch:{},scratch:Z.scratch||{},edges:[],children:[],parent:Z.parent&&Z.parent.isNode()?Z.parent:null,traversalCache:{},backgrounding:!1,bbCache:null,bbCacheShift:{x:0,y:0},bodyBounds:null,overlayBounds:null,labelBounds:{all:null,source:null,target:null,main:null},arrowBounds:{source:null,target:null,"mid-source":null,"mid-target":null}};if(F.position.x==null)F.position.x=0;if(F.position.y==null)F.position.y=0;if(Z.renderedPosition){var U=Z.renderedPosition,K=J.pan(),M=J.zoom();F.position={x:(U.x-K.x)/M,y:(U.y-K.y)/M}}var q=[];if(b0(Z.classes))q=Z.classes;else if(R0(Z.classes))q=Z.classes.split(/\s+/);for(var L=0,z=q.length;L<z;L++){var A=q[L];if(!A||A==="")continue;F.classes.add(A)}this.createEmitter();var V=Z.style||Z.css;if(V)P0("Setting a `style` bypass at element creation should be done only when absolutely necessary.  Try to use the stylesheet instead."),this.style(V);if($===void 0||$)this.restore()},JZ=function Q(J){return J={bfs:J.bfs||!J.dfs,dfs:J.dfs||!J.bfs},function Z($,G,F){var U;if(D0($)&&!z8($))U=$,$=U.roots||U.root,G=U.visit,F=U.directed;F=arguments.length===2&&!f0(G)?G:F,G=f0(G)?G:function(){};var K=this._private.cy,M=$=R0($)?this.filter($):$,q=[],L=[],z={},A={},V={},R=0,Y,X=this.byGroup(),B=X.nodes,O=X.edges;for(var N=0;N<M.length;N++){var H=M[N],j=H.id();if(H.isNode()){if(q.unshift(H),J.bfs)V[j]=!0,L.push(H);A[j]=0}}var D=function T(){var v=J.bfs?q.shift():q.pop(),I=v.id();if(J.dfs){if(V[I])return"continue";V[I]=!0,L.push(v)}var _=A[I],b=z[I],P=b!=null?b.source():null,u=b!=null?b.target():null,h=b==null?void 0:v.same(P)?u[0]:P[0],p=void 0;if(p=G(v,b,h,R++,_),p===!0)return Y=v,"break";if(p===!1)return"break";var m=v.connectedEdges().filter(function(n){return(!F||n.source().same(v))&&O.has(n)});for(var c=0;c<m.length;c++){var i=m[c],r=i.connectedNodes().filter(function(n){return!n.same(v)&&B.has(n)}),a=r.id();if(r.length!==0&&!V[a]){if(r=r[0],q.push(r),J.bfs)V[a]=!0,L.push(r);z[a]=i,A[a]=A[I]+1}}};while(q.length!==0){var k=D();if(k==="continue")continue;if(k==="break")break}var C=K.collection();for(var E=0;E<L.length;E++){var S=L[E],w=z[S.id()];if(w!=null)C.push(w);C.push(S)}return{path:K.collection(C),found:K.collection(Y)}}},F9={breadthFirstSearch:JZ({bfs:!0}),depthFirstSearch:JZ({dfs:!0})};F9.bfs=F9.breadthFirstSearch;F9.dfs=F9.depthFirstSearch;var LK=o0({root:null,weight:function Q(J){return 1},directed:!1}),zK={dijkstra:function Q(J){if(!D0(J)){var Z=arguments;J={root:Z[0],weight:Z[1],directed:Z[2]}}var $=LK(J),G=$.root,F=$.weight,U=$.directed,K=this,M=F,q=R0(G)?this.filter(G)[0]:G[0],L={},z={},A={},V=this.byGroup(),R=V.nodes,Y=V.edges;Y.unmergeBy(function(_){return _.isLoop()});var X=function _(b){return L[b.id()]},B=function _(b,P){L[b.id()]=P,O.updateItem(b)},O=new R9.default(function(_,b){return X(_)-X(b)});for(var N=0;N<R.length;N++){var H=R[N];L[H.id()]=H.same(q)?0:Infinity,O.push(H)}var j=function _(b,P){var u=(U?b.edgesTo(P):b.edgesWith(P)).intersect(Y),h=Infinity,p;for(var m=0;m<u.length;m++){var c=u[m],i=M(c);if(i<h||!p)h=i,p=c}return{edge:p,dist:h}};while(O.size()>0){var D=O.pop(),k=X(D),C=D.id();if(A[C]=k,k===Infinity)continue;var E=D.neighborhood().intersect(R);for(var S=0;S<E.length;S++){var w=E[S],T=w.id(),v=j(D,w),I=k+v.dist;if(I<X(w))B(w,I),z[T]={node:D,edge:v.edge}}}return{distanceTo:function _(b){var P=R0(b)?R.filter(b)[0]:b[0];return A[P.id()]},pathTo:function _(b){var P=R0(b)?R.filter(b)[0]:b[0],u=[],h=P,p=h.id();if(P.length>0){u.unshift(P);while(z[p]){var m=z[p];u.unshift(m.edge),u.unshift(m.node),h=m.node,p=h.id()}}return K.spawn(u)}}}},AK={kruskal:function Q(J){J=J||function(N){return 1};var Z=this.byGroup(),$=Z.nodes,G=Z.edges,F=$.length,U=new Array(F),K=$,M=function N(H){for(var j=0;j<U.length;j++){var D=U[j];if(D.has(H))return j}};for(var q=0;q<F;q++)U[q]=this.spawn($[q]);var L=G.sort(function(N,H){return J(N)-J(H)});for(var z=0;z<L.length;z++){var A=L[z],V=A.source()[0],R=A.target()[0],Y=M(V),X=M(R),B=U[Y],O=U[X];if(Y!==X)K.merge(A),B.merge(O),U.splice(X,1)}return K}},RK=o0({root:null,goal:null,weight:function Q(J){return 1},heuristic:function Q(J){return 0},directed:!1}),VK={aStar:function Q(J){var Z=this.cy(),$=RK(J),G=$.root,F=$.goal,U=$.heuristic,K=$.directed,M=$.weight;G=Z.collection(G)[0],F=Z.collection(F)[0];var q=G.id(),L=F.id(),z={},A={},V={},R=new R9.default(function(p,m){return A[p.id()]-A[m.id()]}),Y=new PJ,X={},B={},O=function p(m,c){R.push(m),Y.add(c)},N,H,j=function p(){N=R.pop(),H=N.id(),Y.delete(H)},D=function p(m){return Y.has(m)};O(G,q),z[q]=0,A[q]=U(G);var k=0;while(R.size()>0){if(j(),k++,H===L){var C=[],E=F,S=L,w=B[S];for(;;){if(C.unshift(E),w!=null)C.unshift(w);if(E=X[S],E==null)break;S=E.id(),w=B[S]}return{found:!0,distance:z[H],path:this.spawn(C),steps:k}}V[H]=!0;var T=N._private.edges;for(var v=0;v<T.length;v++){var I=T[v];if(!this.hasElementWithId(I.id()))continue;if(K&&I.data("source")!==H)continue;var _=I.source(),b=I.target(),P=_.id()!==H?_:b,u=P.id();if(!this.hasElementWithId(u))continue;if(V[u])continue;var h=z[H]+M(I);if(!D(u)){z[u]=h,A[u]=h+U(P),O(P,u),X[u]=N,B[u]=I;continue}if(h<z[u])z[u]=h,A[u]=h+U(P),X[u]=N,B[u]=I}}return{found:!1,distance:void 0,path:void 0,steps:k}}},YK=o0({weight:function Q(J){return 1},directed:!1}),XK={floydWarshall:function Q(J){var Z=this.cy(),$=YK(J),G=$.weight,F=$.directed,U=G,K=this.byGroup(),M=K.nodes,q=K.edges,L=M.length,z=L*L,A=function c(i){return M.indexOf(i)},V=function c(i){return M[i]},R=new Array(z);for(var Y=0;Y<z;Y++){var X=Y%L,B=(Y-X)/L;if(B===X)R[Y]=0;else R[Y]=Infinity}var O=new Array(z),N=new Array(z);for(var H=0;H<q.length;H++){var j=q[H],D=j.source()[0],k=j.target()[0];if(D===k)continue;var C=A(D),E=A(k),S=C*L+E,w=U(j);if(R[S]>w)R[S]=w,O[S]=E,N[S]=j;if(!F){var T=E*L+C;if(!F&&R[T]>w)R[T]=w,O[T]=C,N[T]=j}}for(var v=0;v<L;v++)for(var I=0;I<L;I++){var _=I*L+v;for(var b=0;b<L;b++){var P=I*L+b,u=v*L+b;if(R[_]+R[u]<R[P])R[P]=R[_]+R[u],O[P]=O[_]}}var h=function c(i){return(R0(i)?Z.filter(i):i)[0]},p=function c(i){return A(h(i))},m={distance:function c(i,r){var a=p(i),n=p(r);return R[a*L+n]},path:function c(i,r){var a=p(i),n=p(r),f=V(a);if(a===n)return f.collection();if(O[a*L+n]==null)return Z.collection();var o=Z.collection(),e=a,t;o.merge(f);while(a!==n)e=a,a=O[a*L+n],t=N[e*L+a],o.merge(t),o.merge(V(a));return o}};return m}},BK=o0({weight:function Q(J){return 1},directed:!1,root:null}),OK={bellmanFord:function Q(J){var Z=this,$=BK(J),G=$.weight,F=$.directed,U=$.root,K=G,M=this,q=this.cy(),L=this.byGroup(),z=L.edges,A=L.nodes,V=A.length,R=new D8,Y=!1,X=[];U=q.collection(U)[0],z.unmergeBy(function(M0){return M0.isLoop()});var B=z.length,O=function M0(U0){var z0=R.get(U0.id());if(!z0)z0={},R.set(U0.id(),z0);return z0},N=function M0(U0){return(R0(U0)?q.$(U0):U0)[0]},H=function M0(U0){return O(N(U0)).dist},j=function M0(U0){var z0=arguments.length>1&&arguments[1]!==void 0?arguments[1]:U,W0=N(U0),k0=[],X0=W0;for(;;){if(X0==null)return Z.spawn();var E0=O(X0),y=E0.edge,W=E0.pred;if(k0.unshift(X0[0]),X0.same(z0)&&k0.length>0)break;if(y!=null)k0.unshift(y);X0=W}return M.spawn(k0)};for(var D=0;D<V;D++){var k=A[D],C=O(k);if(k.same(U))C.dist=0;else C.dist=Infinity;C.pred=null,C.edge=null}var E=!1,S=function M0(U0,z0,W0,k0,X0,E0){var y=k0.dist+E0;if(y<X0.dist&&!W0.same(k0.edge))X0.dist=y,X0.pred=U0,X0.edge=W0,E=!0};for(var w=1;w<V;w++){E=!1;for(var T=0;T<B;T++){var v=z[T],I=v.source(),_=v.target(),b=K(v),P=O(I),u=O(_);if(S(I,_,v,P,u,b),!F)S(_,I,v,u,P,b)}if(!E)break}if(E){var h=[];for(var p=0;p<B;p++){var m=z[p],c=m.source(),i=m.target(),r=K(m),a=O(c).dist,n=O(i).dist;if(a+r<n||!F&&n+r<a){if(!Y)P0("Graph contains a negative weight cycle for Bellman-Ford"),Y=!0;if(J.findNegativeWeightCycles!==!1){var f=[];if(a+r<n)f.push(c);if(!F&&n+r<a)f.push(i);var o=f.length;for(var e=0;e<o;e++){var t=f[e],J0=[t];J0.push(O(t).edge);var K0=O(t).pred;while(J0.indexOf(K0)===-1)J0.push(K0),J0.push(O(K0).edge),K0=O(K0).pred;J0=J0.slice(J0.indexOf(K0));var Y0=J0[0].id(),Q0=0;for(var Z0=2;Z0<J0.length;Z0+=2)if(J0[Z0].id()<Y0)Y0=J0[Z0].id(),Q0=Z0;J0=J0.slice(Q0).concat(J0.slice(0,Q0)),J0.push(J0[0]);var L0=J0.map(function(M0){return M0.id()}).join(",");if(h.indexOf(L0)===-1)X.push(M.spawn(J0)),h.push(L0)}}else break}}}return{distanceTo:H,pathTo:j,hasNegativeWeightCycle:Y,negativeWeightCycles:X}}},NK=Math.sqrt(2),HK=function Q(J,Z,$){if($.length===0)h0("Karger-Stein must be run on a connected (sub)graph");var G=$[J],F=G[1],U=G[2],K=Z[F],M=Z[U],q=$;for(var L=q.length-1;L>=0;L--){var z=q[L],A=z[1],V=z[2];if(Z[A]===K&&Z[V]===M||Z[A]===M&&Z[V]===K)q.splice(L,1)}for(var R=0;R<q.length;R++){var Y=q[R];if(Y[1]===M)q[R]=Y.slice(),q[R][1]=K;else if(Y[2]===M)q[R]=Y.slice(),q[R][2]=K}for(var X=0;X<Z.length;X++)if(Z[X]===M)Z[X]=K;return q},P6=function Q(J,Z,$,G){while($>G){var F=Math.floor(Math.random()*Z.length);Z=HK(F,J,Z),$--}return Z},kK={kargerStein:function Q(){var J=this,Z=this.byGroup(),$=Z.nodes,G=Z.edges;G.unmergeBy(function(u){return u.isLoop()});var F=$.length,U=G.length,K=Math.ceil(Math.pow(Math.log(F)/Math.LN2,2)),M=Math.floor(F/NK);if(F<2){h0("At least 2 nodes are required for Karger-Stein algorithm");return}var q=[];for(var L=0;L<U;L++){var z=G[L];q.push([L,$.indexOf(z.source()),$.indexOf(z.target())])}var A=Infinity,V=[],R=new Array(F),Y=new Array(F),X=new Array(F),B=function u(h,p){for(var m=0;m<F;m++)p[m]=h[m]};for(var O=0;O<=K;O++){for(var N=0;N<F;N++)Y[N]=N;var H=P6(Y,q.slice(),F,M),j=H.slice();B(Y,X);var D=P6(Y,H,M,2),k=P6(X,j,M,2);if(D.length<=k.length&&D.length<A)A=D.length,V=D,B(Y,R);else if(k.length<=D.length&&k.length<A)A=k.length,V=k,B(X,R)}var C=this.spawn(V.map(function(u){return G[u[0]]})),E=this.spawn(),S=this.spawn(),w=R[0];for(var T=0;T<R.length;T++){var v=R[T],I=$[T];if(v===w)E.merge(I);else S.merge(I)}var _=function u(h){var p=J.spawn();return h.forEach(function(m){p.merge(m),m.connectedEdges().forEach(function(c){if(J.contains(c)&&!C.contains(c))p.merge(c)})}),p},b=[_(E),_(S)],P={cut:C,components:b,partition1:E,partition2:S};return P}},EK=function Q(J){return{x:J.x,y:J.y}},K6=function Q(J,Z,$){return{x:J.x*Z+$.x,y:J.y*Z+$.y}},A$=function Q(J,Z,$){return{x:(J.x-$.x)/Z,y:(J.y-$.y)/Z}},EJ=function Q(J){return{x:J[0],y:J[1]}},WK=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,$=arguments.length>2&&arguments[2]!==void 0?arguments[2]:J.length,G=Infinity;for(var F=Z;F<$;F++){var U=J[F];if(isFinite(U))G=Math.min(U,G)}return G},TK=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,$=arguments.length>2&&arguments[2]!==void 0?arguments[2]:J.length,G=(-Infinity);for(var F=Z;F<$;F++){var U=J[F];if(isFinite(U))G=Math.max(U,G)}return G},jK=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,$=arguments.length>2&&arguments[2]!==void 0?arguments[2]:J.length,G=0,F=0;for(var U=Z;U<$;U++){var K=J[U];if(isFinite(K))G+=K,F++}return G/F},DK=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0,$=arguments.length>2&&arguments[2]!==void 0?arguments[2]:J.length,G=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0,F=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!0,U=arguments.length>5&&arguments[5]!==void 0?arguments[5]:!0;if(G)J=J.slice(Z,$);else{if($<J.length)J.splice($,J.length-$);if(Z>0)J.splice(0,Z)}var K=0;for(var M=J.length-1;M>=0;M--){var q=J[M];if(U){if(!isFinite(q))J[M]=(-Infinity),K++}else J.splice(M,1)}if(F)J.sort(function(A,V){return A-V});var L=J.length,z=Math.floor(L/2);if(L%2!==0)return J[z+1+K];else return(J[z-1+K]+J[z+K])/2},CK=function Q(J){return Math.PI*J/180},I9=function Q(J,Z){return Math.atan2(Z,J)-Math.PI/2},F7=Math.log2||function(Q){return Math.log(Q)/Math.log(2)},R$=function Q(J){if(J>0)return 1;else if(J<0)return-1;else return 0},$J=function Q(J,Z){return Math.sqrt(e8(J,Z))},e8=function Q(J,Z){var $=Z.x-J.x,G=Z.y-J.y;return $*$+G*G},SK=function Q(J){var Z=J.length,$=0;for(var G=0;G<Z;G++)$+=J[G];for(var F=0;F<Z;F++)J[F]=J[F]/$;return J},l0=function Q(J,Z,$,G){return(1-G)*(1-G)*J+2*(1-G)*G*Z+G*G*$},TJ=function Q(J,Z,$,G){return{x:l0(J.x,Z.x,$.x,G),y:l0(J.y,Z.y,$.y,G)}},IK=function Q(J,Z,$,G){var F={x:Z.x-J.x,y:Z.y-J.y},U=$J(J,Z),K={x:F.x/U,y:F.y/U};return $=$==null?0:$,G=G!=null?G:$*U,{x:J.x+K.x*G,y:J.y+K.y*G}},U9=function Q(J,Z,$){return Math.max(J,Math.min($,Z))},L8=function Q(J){if(J==null)return{x1:Infinity,y1:Infinity,x2:(-Infinity),y2:(-Infinity),w:0,h:0};else if(J.x1!=null&&J.y1!=null){if(J.x2!=null&&J.y2!=null&&J.x2>=J.x1&&J.y2>=J.y1)return{x1:J.x1,y1:J.y1,x2:J.x2,y2:J.y2,w:J.x2-J.x1,h:J.y2-J.y1};else if(J.w!=null&&J.h!=null&&J.w>=0&&J.h>=0)return{x1:J.x1,y1:J.y1,x2:J.x1+J.w,y2:J.y1+J.h,w:J.w,h:J.h}}},wK=function Q(J){return{x1:J.x1,x2:J.x2,w:J.w,y1:J.y1,y2:J.y2,h:J.h}},PK=function Q(J){J.x1=Infinity,J.y1=Infinity,J.x2=(-Infinity),J.y2=(-Infinity),J.w=0,J.h=0},vK=function Q(J,Z,$){return{x1:J.x1+Z,x2:J.x2+Z,y1:J.y1+$,y2:J.y2+$,w:J.w,h:J.h}},V$=function Q(J,Z){J.x1=Math.min(J.x1,Z.x1),J.x2=Math.max(J.x2,Z.x2),J.w=J.x2-J.x1,J.y1=Math.min(J.y1,Z.y1),J.y2=Math.max(J.y2,Z.y2),J.h=J.y2-J.y1},bK=function Q(J,Z,$){J.x1=Math.min(J.x1,Z),J.x2=Math.max(J.x2,Z),J.w=J.x2-J.x1,J.y1=Math.min(J.y1,$),J.y2=Math.max(J.y2,$),J.h=J.y2-J.y1},h9=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:0;return J.x1-=Z,J.x2+=Z,J.y1-=Z,J.y2+=Z,J.w=J.x2-J.x1,J.h=J.y2-J.y1,J},y9=function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[0],$,G,F,U;if(Z.length===1)$=G=F=U=Z[0];else if(Z.length===2)$=F=Z[0],U=G=Z[1];else if(Z.length===4){var K=H8(Z,4);$=K[0],G=K[1],F=K[2],U=K[3]}return J.x1-=U,J.x2+=G,J.y1-=$,J.y2+=F,J.w=J.x2-J.x1,J.h=J.y2-J.y1,J},QZ=function Q(J,Z){J.x1=Z.x1,J.y1=Z.y1,J.x2=Z.x2,J.y2=Z.y2,J.w=J.x2-J.x1,J.h=J.y2-J.y1},U7=function Q(J,Z){if(J.x1>Z.x2)return!1;if(Z.x1>J.x2)return!1;if(J.x2<Z.x1)return!1;if(Z.x2<J.x1)return!1;if(J.y2<Z.y1)return!1;if(Z.y2<J.y1)return!1;if(J.y1>Z.y2)return!1;if(Z.y1>J.y2)return!1;return!0},SJ=function Q(J,Z,$){return J.x1<=Z&&Z<=J.x2&&J.y1<=$&&$<=J.y2},_K=function Q(J,Z){return SJ(J,Z.x,Z.y)},Y$=function Q(J,Z){return SJ(J,Z.x1,Z.y1)&&SJ(J,Z.x2,Z.y2)},X$=function Q(J,Z,$,G,F,U,K){var M=X9(F,U),q=F/2,L=U/2,z;{var A=$-q+M-K,V=G-L-K,R=$+q-M+K,Y=V;if(z=y8(J,Z,$,G,A,V,R,Y,!1),z.length>0)return z}{var X=$+q+K,B=G-L+M-K,O=X,N=G+L-M+K;if(z=y8(J,Z,$,G,X,B,O,N,!1),z.length>0)return z}{var H=$-q+M-K,j=G+L+K,D=$+q-M+K,k=j;if(z=y8(J,Z,$,G,H,j,D,k,!1),z.length>0)return z}{var C=$-q-K,E=G-L+M-K,S=C,w=G+L-M+K;if(z=y8(J,Z,$,G,C,E,S,w,!1),z.length>0)return z}var T;{var v=$-q+M,I=G-L+M;if(T=oJ(J,Z,$,G,v,I,M+K),T.length>0&&T[0]<=v&&T[1]<=I)return[T[0],T[1]]}{var _=$+q-M,b=G-L+M;if(T=oJ(J,Z,$,G,_,b,M+K),T.length>0&&T[0]>=_&&T[1]<=b)return[T[0],T[1]]}{var P=$+q-M,u=G+L-M;if(T=oJ(J,Z,$,G,P,u,M+K),T.length>0&&T[0]>=P&&T[1]>=u)return[T[0],T[1]]}{var h=$-q+M,p=G+L-M;if(T=oJ(J,Z,$,G,h,p,M+K),T.length>0&&T[0]<=h&&T[1]>=p)return[T[0],T[1]]}return[]},uK=function Q(J,Z,$,G,F,U,K){var M=K,q=Math.min($,F),L=Math.max($,F),z=Math.min(G,U),A=Math.max(G,U);return q-M<=J&&J<=L+M&&z-M<=Z&&Z<=A+M},mK=function Q(J,Z,$,G,F,U,K,M,q){var L={x1:Math.min($,K,F)-q,x2:Math.max($,K,F)+q,y1:Math.min(G,M,U)-q,y2:Math.max(G,M,U)+q};if(J<L.x1||J>L.x2||Z<L.y1||Z>L.y2)return!1;else return!0},fK=function Q(J,Z,$,G){$-=G;var F=Z*Z-4*J*$;if(F<0)return[];var U=Math.sqrt(F),K=2*J,M=(-Z+U)/K,q=(-Z-U)/K;return[M,q]},gK=function Q(J,Z,$,G,F){var U=0.00001;if(J===0)J=U;Z/=J,$/=J,G/=J;var K,M,q,L,z,A,V,R;if(M=(3*$-Z*Z)/9,q=-(27*G)+Z*(9*$-2*(Z*Z)),q/=54,K=M*M*M+q*q,F[1]=0,V=Z/3,K>0){z=q+Math.sqrt(K),z=z<0?-Math.pow(-z,0.3333333333333333):Math.pow(z,0.3333333333333333),A=q-Math.sqrt(K),A=A<0?-Math.pow(-A,0.3333333333333333):Math.pow(A,0.3333333333333333),F[0]=-V+z+A,V+=(z+A)/2,F[4]=F[2]=-V,V=Math.sqrt(3)*(-A+z)/2,F[3]=V,F[5]=-V;return}if(F[5]=F[3]=0,K===0){R=q<0?-Math.pow(-q,0.3333333333333333):Math.pow(q,0.3333333333333333),F[0]=-V+2*R,F[4]=F[2]=-(R+V);return}M=-M,L=M*M*M,L=Math.acos(q/Math.sqrt(L)),R=2*Math.sqrt(M),F[0]=-V+R*Math.cos(L/3),F[2]=-V+R*Math.cos((L+2*Math.PI)/3),F[4]=-V+R*Math.cos((L+4*Math.PI)/3);return},hK=function Q(J,Z,$,G,F,U,K,M){var q=1*$*$-4*$*F+2*$*K+4*F*F-4*F*K+K*K+G*G-4*G*U+2*G*M+4*U*U-4*U*M+M*M,L=9*$*F-3*$*$-3*$*K-6*F*F+3*F*K+9*G*U-3*G*G-3*G*M-6*U*U+3*U*M,z=3*$*$-6*$*F+$*K-$*J+2*F*F+2*F*J-K*J+3*G*G-6*G*U+G*M-G*Z+2*U*U+2*U*Z-M*Z,A=1*$*F-$*$+$*J-F*J+G*U-G*G+G*Z-U*Z,V=[];gK(q,L,z,A,V);var R=0.0000001,Y=[];for(var X=0;X<6;X+=2)if(Math.abs(V[X+1])<R&&V[X]>=0&&V[X]<=1)Y.push(V[X]);Y.push(1),Y.push(0);var B=-1,O,N,H;for(var j=0;j<Y.length;j++)if(O=Math.pow(1-Y[j],2)*$+2*(1-Y[j])*Y[j]*F+Y[j]*Y[j]*K,N=Math.pow(1-Y[j],2)*G+2*(1-Y[j])*Y[j]*U+Y[j]*Y[j]*M,H=Math.pow(O-J,2)+Math.pow(N-Z,2),B>=0){if(H<B)B=H}else B=H;return B},yK=function Q(J,Z,$,G,F,U){var K=[J-$,Z-G],M=[F-$,U-G],q=M[0]*M[0]+M[1]*M[1],L=K[0]*K[0]+K[1]*K[1],z=K[0]*M[0]+K[1]*M[1],A=z*z/q;if(z<0)return L;if(A>q)return(J-F)*(J-F)+(Z-U)*(Z-U);return L-A},M8=function Q(J,Z,$){var G,F,U,K,M,q=0;for(var L=0;L<$.length/2;L++){if(G=$[L*2],F=$[L*2+1],L+1<$.length/2)U=$[(L+1)*2],K=$[(L+1)*2+1];else U=$[(L+1-$.length/2)*2],K=$[(L+1-$.length/2)*2+1];if(G==J&&U==J);else if(G>=J&&J>=U||G<=J&&J<=U){if(M=(J-G)/(U-G)*(K-F)+F,M>Z)q++}else continue}if(q%2===0)return!1;else return!0},v8=function Q(J,Z,$,G,F,U,K,M,q){var L=new Array($.length),z;if(M[0]!=null)if(z=Math.atan(M[1]/M[0]),M[0]<0)z=z+Math.PI/2;else z=-z-Math.PI/2;else z=M;var A=Math.cos(-z),V=Math.sin(-z);for(var R=0;R<L.length/2;R++)L[R*2]=U/2*($[R*2]*A-$[R*2+1]*V),L[R*2+1]=K/2*($[R*2+1]*A+$[R*2]*V),L[R*2]+=G,L[R*2+1]+=F;var Y;if(q>0){var X=o9(L,-q);Y=r9(X)}else Y=L;return M8(J,Z,Y)},xK=function Q(J,Z,$,G,F,U,K){var M=new Array($.length),q=U/2,L=K/2,z=K7(U,K),A=z*z;for(var V=0;V<$.length/4;V++){var R=void 0,Y=void 0;if(V===0)R=$.length-2;else R=V*4-2;Y=V*4+2;var X=G+q*$[V*4],B=F+L*$[V*4+1],O=-$[R]*$[Y]-$[R+1]*$[Y+1],N=z/Math.tan(Math.acos(O)/2),H=X-N*$[R],j=B-N*$[R+1],D=X+N*$[Y],k=B+N*$[Y+1];M[V*4]=H,M[V*4+1]=j,M[V*4+2]=D,M[V*4+3]=k;var C=$[R+1],E=-$[R],S=C*$[Y]+E*$[Y+1];if(S<0)C*=-1,E*=-1;var w=H+C*z,T=j+E*z,v=Math.pow(w-J,2)+Math.pow(T-Z,2);if(v<=A)return!0}return M8(J,Z,M)},r9=function Q(J){var Z=new Array(J.length/2),$,G,F,U,K,M,q,L;for(var z=0;z<J.length/4;z++){if($=J[z*4],G=J[z*4+1],F=J[z*4+2],U=J[z*4+3],z<J.length/4-1)K=J[(z+1)*4],M=J[(z+1)*4+1],q=J[(z+1)*4+2],L=J[(z+1)*4+3];else K=J[0],M=J[1],q=J[2],L=J[3];var A=y8($,G,F,U,K,M,q,L,!0);Z[z*2]=A[0],Z[z*2+1]=A[1]}return Z},o9=function Q(J,Z){var $=new Array(J.length*2),G,F,U,K;for(var M=0;M<J.length/2;M++){if(G=J[M*2],F=J[M*2+1],M<J.length/2-1)U=J[(M+1)*2],K=J[(M+1)*2+1];else U=J[0],K=J[1];var q=K-F,L=-(U-G),z=Math.sqrt(q*q+L*L),A=q/z,V=L/z;$[M*4]=G+A*Z,$[M*4+1]=F+V*Z,$[M*4+2]=U+A*Z,$[M*4+3]=K+V*Z}return $},cK=function Q(J,Z,$,G,F,U){var K=$-J,M=G-Z;K/=F,M/=U;var q=Math.sqrt(K*K+M*M),L=q-1;if(L<0)return[];var z=L/q;return[($-J)*z+J,(G-Z)*z+Z]},QJ=function Q(J,Z,$,G,F,U,K){return J-=F,Z-=U,J/=$/2+K,Z/=G/2+K,J*J+Z*Z<=1},oJ=function Q(J,Z,$,G,F,U,K){var M=[$-J,G-Z],q=[J-F,Z-U],L=M[0]*M[0]+M[1]*M[1],z=2*(q[0]*M[0]+q[1]*M[1]),A=q[0]*q[0]+q[1]*q[1]-K*K,V=z*z-4*L*A;if(V<0)return[];var R=(-z+Math.sqrt(V))/(2*L),Y=(-z-Math.sqrt(V))/(2*L),X=Math.min(R,Y),B=Math.max(R,Y),O=[];if(X>=0&&X<=1)O.push(X);if(B>=0&&B<=1)O.push(B);if(O.length===0)return[];var N=O[0]*M[0]+J,H=O[0]*M[1]+Z;if(O.length>1)if(O[0]==O[1])return[N,H];else{var j=O[1]*M[0]+J,D=O[1]*M[1]+Z;return[N,H,j,D]}else return[N,H]},v6=function Q(J,Z,$){if(Z<=J&&J<=$||$<=J&&J<=Z)return J;else if(J<=Z&&Z<=$||$<=Z&&Z<=J)return Z;else return $},y8=function Q(J,Z,$,G,F,U,K,M,q){var L=J-F,z=$-J,A=K-F,V=Z-U,R=G-Z,Y=M-U,X=A*V-Y*L,B=z*V-R*L,O=Y*z-A*R;if(O!==0){var N=X/O,H=B/O,j=0.001,D=0-j,k=1+j;if(D<=N&&N<=k&&D<=H&&H<=k)return[J+N*z,Z+N*R];else if(!q)return[];else return[J+N*z,Z+N*R]}else if(X===0||B===0){if(v6(J,$,K)===K)return[K,M];if(v6(J,$,F)===F)return[F,U];if(v6(F,K,$)===$)return[$,G];return[]}else return[]},K9=function Q(J,Z,$,G,F,U,K,M){var q=[],L,z=new Array($.length),A=!0;if(U==null)A=!1;var V;if(A){for(var R=0;R<z.length/2;R++)z[R*2]=$[R*2]*U+G,z[R*2+1]=$[R*2+1]*K+F;if(M>0){var Y=o9(z,-M);V=r9(Y)}else V=z}else V=$;var X,B,O,N;for(var H=0;H<V.length/2;H++){if(X=V[H*2],B=V[H*2+1],H<V.length/2-1)O=V[(H+1)*2],N=V[(H+1)*2+1];else O=V[0],N=V[1];if(L=y8(J,Z,G,F,X,B,O,N),L.length!==0)q.push(L[0],L[1])}return q},dK=function Q(J,Z,$,G,F,U,K,M){var q=[],L,z=new Array($.length),A=U/2,V=K/2,R=K7(U,K);for(var Y=0;Y<$.length/4;Y++){var X=void 0,B=void 0;if(Y===0)X=$.length-2;else X=Y*4-2;B=Y*4+2;var O=G+A*$[Y*4],N=F+V*$[Y*4+1],H=-$[X]*$[B]-$[X+1]*$[B+1],j=R/Math.tan(Math.acos(H)/2),D=O-j*$[X],k=N-j*$[X+1],C=O+j*$[B],E=N+j*$[B+1];if(Y===0)z[$.length-2]=D,z[$.length-1]=k;else z[Y*4-2]=D,z[Y*4-1]=k;z[Y*4]=C,z[Y*4+1]=E;var S=$[X+1],w=-$[X],T=S*$[B]+w*$[B+1];if(T<0)S*=-1,w*=-1;var v=D+S*R,I=k+w*R;if(L=oJ(J,Z,G,F,v,I,R),L.length!==0)q.push(L[0],L[1])}for(var _=0;_<z.length/4;_++)if(L=y8(J,Z,G,F,z[_*4],z[_*4+1],z[_*4+2],z[_*4+3],!1),L.length!==0)q.push(L[0],L[1]);if(q.length>2){var b=[q[0],q[1]],P=Math.pow(b[0]-J,2)+Math.pow(b[1]-Z,2);for(var u=1;u<q.length/2;u++){var h=Math.pow(q[u*2]-J,2)+Math.pow(q[u*2+1]-Z,2);if(h<=P)b[0]=q[u*2],b[1]=q[u*2+1],P=h}return b}return q},w9=function Q(J,Z,$){var G=[J[0]-Z[0],J[1]-Z[1]],F=Math.sqrt(G[0]*G[0]+G[1]*G[1]),U=(F-$)/F;if(U<0)U=0.00001;return[Z[0]+U*G[0],Z[1]+U*G[1]]},U8=function Q(J,Z){var $=y6(J,Z);return $=B$($),$},B$=function Q(J){var Z,$,G=J.length/2,F=Infinity,U=Infinity,K=(-Infinity),M=(-Infinity);for(var q=0;q<G;q++)Z=J[2*q],$=J[2*q+1],F=Math.min(F,Z),K=Math.max(K,Z),U=Math.min(U,$),M=Math.max(M,$);var L=2/(K-F),z=2/(M-U);for(var A=0;A<G;A++)Z=J[2*A]=J[2*A]*L,$=J[2*A+1]=J[2*A+1]*z,F=Math.min(F,Z),K=Math.max(K,Z),U=Math.min(U,$),M=Math.max(M,$);if(U<-1)for(var V=0;V<G;V++)$=J[2*V+1]=J[2*V+1]+(-1-U);return J},y6=function Q(J,Z){var $=1/J*2*Math.PI,G=J%2===0?Math.PI/2+$/2:Math.PI/2;G+=Z;var F=new Array(J*2),U;for(var K=0;K<J;K++)U=K*$+G,F[2*K]=Math.cos(U),F[2*K+1]=Math.sin(-U);return F},X9=function Q(J,Z){return Math.min(J/4,Z/4,8)},K7=function Q(J,Z){return Math.min(J/10,Z/10,8)},O$=function Q(){return 8},pK=function Q(J,Z,$){return[J-2*Z+$,2*(Z-J),J]},x6=function Q(J,Z){return{heightOffset:Math.min(15,0.05*Z),widthOffset:Math.min(100,0.25*J),ctrlPtOffsetPct:0.05}},lK=o0({dampingFactor:0.8,precision:0.000001,iterations:200,weight:function Q(J){return 1}}),iK={pageRank:function Q(J){var Z=lK(J),$=Z.dampingFactor,G=Z.precision,F=Z.iterations,U=Z.weight,K=this._private.cy,M=this.byGroup(),q=M.nodes,L=M.edges,z=q.length,A=z*z,V=L.length,R=new Array(A),Y=new Array(z),X=(1-$)/z;for(var B=0;B<z;B++){for(var O=0;O<z;O++){var N=B*z+O;R[N]=0}Y[B]=0}for(var H=0;H<V;H++){var j=L[H],D=j.data("source"),k=j.data("target");if(D===k)continue;var C=q.indexOfId(D),E=q.indexOfId(k),S=U(j),w=E*z+C;R[w]+=S,Y[C]+=S}var T=1/z+X;for(var v=0;v<z;v++)if(Y[v]===0)for(var I=0;I<z;I++){var _=I*z+v;R[_]=T}else for(var b=0;b<z;b++){var P=b*z+v;R[P]=R[P]/Y[v]+X}var u=new Array(z),h=new Array(z),p;for(var m=0;m<z;m++)u[m]=1;for(var c=0;c<F;c++){for(var i=0;i<z;i++)h[i]=0;for(var r=0;r<z;r++)for(var a=0;a<z;a++){var n=r*z+a;h[r]+=R[n]*u[a]}SK(h),p=u,u=h,h=p;var f=0;for(var o=0;o<z;o++){var e=p[o]-u[o];f+=e*e}if(f<G)break}var t={rank:function J0(K0){return K0=K.collection(K0)[0],u[q.indexOf(K0)]}};return t}},ZZ=o0({root:null,weight:function Q(J){return 1},directed:!1,alpha:0}),jJ={degreeCentralityNormalized:function Q(J){J=ZZ(J);var Z=this.cy(),$=this.nodes(),G=$.length;if(!J.directed){var F={},U=0;for(var K=0;K<G;K++){var M=$[K];J.root=M;var q=this.degreeCentrality(J);if(U<q.degree)U=q.degree;F[M.id()]=q.degree}return{degree:function O(N){if(U===0)return 0;if(R0(N))N=Z.filter(N);return F[N.id()]/U}}}else{var L={},z={},A=0,V=0;for(var R=0;R<G;R++){var Y=$[R],X=Y.id();J.root=Y;var B=this.degreeCentrality(J);if(A<B.indegree)A=B.indegree;if(V<B.outdegree)V=B.outdegree;L[X]=B.indegree,z[X]=B.outdegree}return{indegree:function O(N){if(A==0)return 0;if(R0(N))N=Z.filter(N);return L[N.id()]/A},outdegree:function O(N){if(V===0)return 0;if(R0(N))N=Z.filter(N);return z[N.id()]/V}}}},degreeCentrality:function Q(J){J=ZZ(J);var Z=this.cy(),$=this,G=J,F=G.root,U=G.weight,K=G.directed,M=G.alpha;if(F=Z.collection(F)[0],!K){var q=F.connectedEdges().intersection($),L=q.length,z=0;for(var A=0;A<q.length;A++)z+=U(q[A]);return{degree:Math.pow(L,1-M)*Math.pow(z,M)}}else{var V=F.connectedEdges(),R=V.filter(function(D){return D.target().same(F)&&$.has(D)}),Y=V.filter(function(D){return D.source().same(F)&&$.has(D)}),X=R.length,B=Y.length,O=0,N=0;for(var H=0;H<R.length;H++)O+=U(R[H]);for(var j=0;j<Y.length;j++)N+=U(Y[j]);return{indegree:Math.pow(X,1-M)*Math.pow(O,M),outdegree:Math.pow(B,1-M)*Math.pow(N,M)}}}};jJ.dc=jJ.degreeCentrality;jJ.dcn=jJ.degreeCentralityNormalised=jJ.degreeCentralityNormalized;var $Z=o0({harmonic:!0,weight:function Q(){return 1},directed:!1,root:null}),DJ={closenessCentralityNormalized:function Q(J){var Z=$Z(J),$=Z.harmonic,G=Z.weight,F=Z.directed,U=this.cy(),K={},M=0,q=this.nodes(),L=this.floydWarshall({weight:G,directed:F});for(var z=0;z<q.length;z++){var A=0,V=q[z];for(var R=0;R<q.length;R++)if(z!==R){var Y=L.distance(V,q[R]);if($)A+=1/Y;else A+=Y}if(!$)A=1/A;if(M<A)M=A;K[V.id()]=A}return{closeness:function X(B){if(M==0)return 0;if(R0(B))B=U.filter(B)[0].id();else B=B.id();return K[B]/M}}},closenessCentrality:function Q(J){var Z=$Z(J),$=Z.root,G=Z.weight,F=Z.directed,U=Z.harmonic;$=this.filter($)[0];var K=this.dijkstra({root:$,weight:G,directed:F}),M=0,q=this.nodes();for(var L=0;L<q.length;L++){var z=q[L];if(!z.same($)){var A=K.distanceTo(z);if(U)M+=1/A;else M+=A}}return U?M:1/M}};DJ.cc=DJ.closenessCentrality;DJ.ccn=DJ.closenessCentralityNormalised=DJ.closenessCentralityNormalized;var aK=o0({weight:null,directed:!1}),c6={betweennessCentrality:function Q(J){var Z=aK(J),$=Z.directed,G=Z.weight,F=G!=null,U=this.cy(),K=this.nodes(),M={},q={},L=0,z={set:function O(N,H){if(q[N]=H,H>L)L=H},get:function O(N){return q[N]}};for(var A=0;A<K.length;A++){var V=K[A],R=V.id();if($)M[R]=V.outgoers().nodes();else M[R]=V.openNeighborhood().nodes();z.set(R,0)}var Y=function O(N){var H=K[N].id(),j=[],D={},k={},C={},E=new R9.default(function(a,n){return C[a]-C[n]});for(var S=0;S<K.length;S++){var w=K[S].id();D[w]=[],k[w]=0,C[w]=Infinity}k[H]=1,C[H]=0,E.push(H);while(!E.empty()){var T=E.pop();if(j.push(T),F)for(var v=0;v<M[T].length;v++){var I=M[T][v],_=U.getElementById(T),b=void 0;if(_.edgesTo(I).length>0)b=_.edgesTo(I)[0];else b=I.edgesTo(_)[0];var P=G(b);if(I=I.id(),C[I]>C[T]+P){if(C[I]=C[T]+P,E.nodes.indexOf(I)<0)E.push(I);else E.updateItem(I);k[I]=0,D[I]=[]}if(C[I]==C[T]+P)k[I]=k[I]+k[T],D[I].push(T)}else for(var u=0;u<M[T].length;u++){var h=M[T][u].id();if(C[h]==Infinity)E.push(h),C[h]=C[T]+1;if(C[h]==C[T]+1)k[h]=k[h]+k[T],D[h].push(T)}}var p={};for(var m=0;m<K.length;m++)p[K[m].id()]=0;while(j.length>0){var c=j.pop();for(var i=0;i<D[c].length;i++){var r=D[c][i];p[r]=p[r]+k[r]/k[c]*(1+p[c])}if(c!=K[N].id())z.set(c,z.get(c)+p[c])}};for(var X=0;X<K.length;X++)Y(X);var B={betweenness:function O(N){var H=U.collection(N).id();return z.get(H)},betweennessNormalized:function O(N){if(L==0)return 0;var H=U.collection(N).id();return z.get(H)/L}};return B.betweennessNormalised=B.betweennessNormalized,B}};c6.bc=c6.betweennessCentrality;var nK=o0({expandFactor:2,inflateFactor:2,multFactor:1,maxIterations:20,attributes:[function(Q){return 1}]}),sK=function Q(J){return nK(J)},rK=function Q(J,Z){var $=0;for(var G=0;G<Z.length;G++)$+=Z[G](J);return $},oK=function Q(J,Z,$){for(var G=0;G<Z;G++)J[G*Z+G]=$},N$=function Q(J,Z){var $;for(var G=0;G<Z;G++){$=0;for(var F=0;F<Z;F++)$+=J[F*Z+G];for(var U=0;U<Z;U++)J[U*Z+G]=J[U*Z+G]/$}},tK=function Q(J,Z,$){var G=new Array($*$);for(var F=0;F<$;F++){for(var U=0;U<$;U++)G[F*$+U]=0;for(var K=0;K<$;K++)for(var M=0;M<$;M++)G[F*$+M]+=J[F*$+K]*Z[K*$+M]}return G},eK=function Q(J,Z,$){var G=J.slice(0);for(var F=1;F<$;F++)J=tK(J,G,Z);return J},Jq=function Q(J,Z,$){var G=new Array(Z*Z);for(var F=0;F<Z*Z;F++)G[F]=Math.pow(J[F],$);return N$(G,Z),G},Qq=function Q(J,Z,$,G){for(var F=0;F<$;F++){var U=Math.round(J[F]*Math.pow(10,G))/Math.pow(10,G),K=Math.round(Z[F]*Math.pow(10,G))/Math.pow(10,G);if(U!==K)return!1}return!0},Zq=function Q(J,Z,$,G){var F=[];for(var U=0;U<Z;U++){var K=[];for(var M=0;M<Z;M++)if(Math.round(J[U*Z+M]*1000)/1000>0)K.push($[M]);if(K.length!==0)F.push(G.collection(K))}return F},$q=function Q(J,Z){for(var $=0;$<J.length;$++)if(!Z[$]||J[$].id()!==Z[$].id())return!1;return!0},Gq=function Q(J){for(var Z=0;Z<J.length;Z++)for(var $=0;$<J.length;$++)if(Z!=$&&$q(J[Z],J[$]))J.splice($,1);return J},GZ=function Q(J){var Z=this.nodes(),$=this.edges(),G=this.cy(),F=sK(J),U={};for(var K=0;K<Z.length;K++)U[Z[K].id()]=K;var M=Z.length,q=M*M,L=new Array(q),z;for(var A=0;A<q;A++)L[A]=0;for(var V=0;V<$.length;V++){var R=$[V],Y=U[R.source().id()],X=U[R.target().id()],B=rK(R,F.attributes);L[Y*M+X]+=B,L[X*M+Y]+=B}oK(L,M,F.multFactor),N$(L,M);var O=!0,N=0;while(O&&N<F.maxIterations){if(O=!1,z=eK(L,M,F.expandFactor),L=Jq(z,M,F.inflateFactor),!Qq(L,z,q,4))O=!0;N++}var H=Zq(L,M,Z,G);return H=Gq(H),H},Fq={markovClustering:GZ,mcl:GZ},Uq=function Q(J){return J},H$=function Q(J,Z){return Math.abs(Z-J)},FZ=function Q(J,Z,$){return J+H$(Z,$)},UZ=function Q(J,Z,$){return J+Math.pow($-Z,2)},Kq=function Q(J){return Math.sqrt(J)},qq=function Q(J,Z,$){return Math.max(J,H$(Z,$))},iJ=function Q(J,Z,$,G,F){var U=arguments.length>5&&arguments[5]!==void 0?arguments[5]:Uq,K=G,M,q;for(var L=0;L<J;L++)M=Z(L),q=$(L),K=F(K,M,q);return U(K)},IJ={euclidean:function Q(J,Z,$){if(J>=2)return iJ(J,Z,$,0,UZ,Kq);else return iJ(J,Z,$,0,FZ)},squaredEuclidean:function Q(J,Z,$){return iJ(J,Z,$,0,UZ)},manhattan:function Q(J,Z,$){return iJ(J,Z,$,0,FZ)},max:function Q(J,Z,$){return iJ(J,Z,$,(-Infinity),qq)}};IJ["squared-euclidean"]=IJ.squaredEuclidean;IJ.squaredeuclidean=IJ.squaredEuclidean;var Mq=o0({k:2,m:2,sensitivityThreshold:0.0001,distance:"euclidean",maxIterations:10,attributes:[],testMode:!1,testCentroids:null}),q7=function Q(J){return Mq(J)},t9=function Q(J,Z,$,G,F){var U=F!=="kMedoids",K=U?function(z){return $[z]}:function(z){return G[z]($)},M=function z(A){return G[A](Z)},q=$,L=Z;return q6(J,G.length,K,M,q,L)},b6=function Q(J,Z,$){var G=$.length,F=new Array(G),U=new Array(G),K=new Array(Z),M=null;for(var q=0;q<G;q++)F[q]=J.min($[q]).value,U[q]=J.max($[q]).value;for(var L=0;L<Z;L++){M=[];for(var z=0;z<G;z++)M[z]=Math.random()*(U[z]-F[z])+F[z];K[L]=M}return K},k$=function Q(J,Z,$,G,F){var U=Infinity,K=0;for(var M=0;M<Z.length;M++){var q=t9($,J,Z[M],G,F);if(q<U)U=q,K=M}return K},E$=function Q(J,Z,$){var G=[],F=null;for(var U=0;U<Z.length;U++)if(F=Z[U],$[F.id()]===J)G.push(F);return G},Lq=function Q(J,Z,$){return Math.abs(Z-J)<=$},zq=function Q(J,Z,$){for(var G=0;G<J.length;G++)for(var F=0;F<J[G].length;F++){var U=Math.abs(J[G][F]-Z[G][F]);if(U>$)return!1}return!0},Aq=function Q(J,Z,$){for(var G=0;G<$;G++)if(J===Z[G])return!0;return!1},KZ=function Q(J,Z){var $=new Array(Z);if(J.length<50)for(var G=0;G<Z;G++){var F=J[Math.floor(Math.random()*J.length)];while(Aq(F,$,G))F=J[Math.floor(Math.random()*J.length)];$[G]=F}else for(var U=0;U<Z;U++)$[U]=J[Math.floor(Math.random()*J.length)];return $},qZ=function Q(J,Z,$){var G=0;for(var F=0;F<Z.length;F++)G+=t9("manhattan",Z[F],J,$,"kMedoids");return G},Rq=function Q(J){var Z=this.cy(),$=this.nodes(),G=null,F=q7(J),U=new Array(F.k),K={},M;if(F.testMode)if(typeof F.testCentroids==="number")F.testCentroids,M=b6($,F.k,F.attributes);else if(d0(F.testCentroids)==="object")M=F.testCentroids;else M=b6($,F.k,F.attributes);else M=b6($,F.k,F.attributes);var q=!0,L=0;while(q&&L<F.maxIterations){for(var z=0;z<$.length;z++)G=$[z],K[G.id()]=k$(G,M,F.distance,F.attributes,"kMeans");q=!1;for(var A=0;A<F.k;A++){var V=E$(A,$,K);if(V.length===0)continue;var R=F.attributes.length,Y=M[A],X=new Array(R),B=new Array(R);for(var O=0;O<R;O++){B[O]=0;for(var N=0;N<V.length;N++)G=V[N],B[O]+=F.attributes[O](G);if(X[O]=B[O]/V.length,!Lq(X[O],Y[O],F.sensitivityThreshold))q=!0}M[A]=X,U[A]=Z.collection(V)}L++}return U},Vq=function Q(J){var Z=this.cy(),$=this.nodes(),G=null,F=q7(J),U=new Array(F.k),K,M={},q,L=new Array(F.k);if(F.testMode)if(typeof F.testCentroids==="number");else if(d0(F.testCentroids)==="object")K=F.testCentroids;else K=KZ($,F.k);else K=KZ($,F.k);var z=!0,A=0;while(z&&A<F.maxIterations){for(var V=0;V<$.length;V++)G=$[V],M[G.id()]=k$(G,K,F.distance,F.attributes,"kMedoids");z=!1;for(var R=0;R<K.length;R++){var Y=E$(R,$,M);if(Y.length===0)continue;L[R]=qZ(K[R],Y,F.attributes);for(var X=0;X<Y.length;X++)if(q=qZ(Y[X],Y,F.attributes),q<L[R])L[R]=q,K[R]=Y[X],z=!0;U[R]=Z.collection(Y)}A++}return U},Yq=function Q(J,Z,$,G,F){var U,K;for(var M=0;M<Z.length;M++)for(var q=0;q<J.length;q++)G[M][q]=Math.pow($[M][q],F.m);for(var L=0;L<J.length;L++)for(var z=0;z<F.attributes.length;z++){U=0,K=0;for(var A=0;A<Z.length;A++)U+=G[A][L]*F.attributes[z](Z[A]),K+=G[A][L];J[L][z]=U/K}},Xq=function Q(J,Z,$,G,F){for(var U=0;U<J.length;U++)Z[U]=J[U].slice();var K,M,q,L=2/(F.m-1);for(var z=0;z<$.length;z++)for(var A=0;A<G.length;A++){K=0;for(var V=0;V<$.length;V++)M=t9(F.distance,G[A],$[z],F.attributes,"cmeans"),q=t9(F.distance,G[A],$[V],F.attributes,"cmeans"),K+=Math.pow(M/q,L);J[A][z]=1/K}},Bq=function Q(J,Z,$,G){var F=new Array($.k);for(var U=0;U<F.length;U++)F[U]=[];var K,M;for(var q=0;q<Z.length;q++){K=(-Infinity),M=-1;for(var L=0;L<Z[0].length;L++)if(Z[q][L]>K)K=Z[q][L],M=L;F[M].push(J[q])}for(var z=0;z<F.length;z++)F[z]=G.collection(F[z]);return F},MZ=function Q(J){var Z=this.cy(),$=this.nodes(),G=q7(J),F,U,K,M,q;M=new Array($.length);for(var L=0;L<$.length;L++)M[L]=new Array(G.k);K=new Array($.length);for(var z=0;z<$.length;z++)K[z]=new Array(G.k);for(var A=0;A<$.length;A++){var V=0;for(var R=0;R<G.k;R++)K[A][R]=Math.random(),V+=K[A][R];for(var Y=0;Y<G.k;Y++)K[A][Y]=K[A][Y]/V}U=new Array(G.k);for(var X=0;X<G.k;X++)U[X]=new Array(G.attributes.length);q=new Array($.length);for(var B=0;B<$.length;B++)q[B]=new Array(G.k);var O=!0,N=0;while(O&&N<G.maxIterations){if(O=!1,Yq(U,$,K,q,G),Xq(K,M,U,$,G),!zq(K,M,G.sensitivityThreshold))O=!0;N++}return F=Bq($,K,G,Z),{clusters:F,degreeOfMembership:K}},Oq={kMeans:Rq,kMedoids:Vq,fuzzyCMeans:MZ,fcm:MZ},Nq=o0({distance:"euclidean",linkage:"min",mode:"threshold",threshold:Infinity,addDendrogram:!1,dendrogramDepth:0,attributes:[]}),Hq={single:"min",complete:"max"},kq=function Q(J){var Z=Nq(J),$=Hq[Z.linkage];if($!=null)Z.linkage=$;return Z},LZ=function Q(J,Z,$,G,F){var U=0,K=Infinity,M,q=F.attributes,L=function C(E,S){return q6(F.distance,q.length,function(w){return q[w](E)},function(w){return q[w](S)},E,S)};for(var z=0;z<J.length;z++){var A=J[z].key,V=$[A][G[A]];if(V<K)U=A,K=V}if(F.mode==="threshold"&&K>=F.threshold||F.mode==="dendrogram"&&J.length===1)return!1;var R=Z[U],Y=Z[G[U]],X;if(F.mode==="dendrogram")X={left:R,right:Y,key:R.key};else X={value:R.value.concat(Y.value),key:R.key};J[R.index]=X,J.splice(Y.index,1),Z[R.key]=X;for(var B=0;B<J.length;B++){var O=J[B];if(R.key===O.key)M=Infinity;else if(F.linkage==="min"){if(M=$[R.key][O.key],$[R.key][O.key]>$[Y.key][O.key])M=$[Y.key][O.key]}else if(F.linkage==="max"){if(M=$[R.key][O.key],$[R.key][O.key]<$[Y.key][O.key])M=$[Y.key][O.key]}else if(F.linkage==="mean")M=($[R.key][O.key]*R.size+$[Y.key][O.key]*Y.size)/(R.size+Y.size);else if(F.mode==="dendrogram")M=L(O.value,R.value);else M=L(O.value[0],R.value[0]);$[R.key][O.key]=$[O.key][R.key]=M}for(var N=0;N<J.length;N++){var H=J[N].key;if(G[H]===R.key||G[H]===Y.key){var j=H;for(var D=0;D<J.length;D++){var k=J[D].key;if($[H][k]<$[H][j])j=k}G[H]=j}J[N].index=N}return R.key=Y.key=R.index=Y.index=null,!0},P9=function Q(J,Z,$){if(!J)return;if(J.value)Z.push(J.value);else{if(J.left)Q(J.left,Z);if(J.right)Q(J.right,Z)}},Eq=function Q(J,Z){if(!J)return"";if(J.left&&J.right){var $=Q(J.left,Z),G=Q(J.right,Z),F=Z.add({group:"nodes",data:{id:$+","+G}});return Z.add({group:"edges",data:{source:$,target:F.id()}}),Z.add({group:"edges",data:{source:G,target:F.id()}}),F.id()}else if(J.value)return J.value.id()},Wq=function Q(J,Z,$){if(!J)return[];var G=[],F=[],U=[];if(Z===0){if(J.left)P9(J.left,G);if(J.right)P9(J.right,F);return U=G.concat(F),[$.collection(U)]}else if(Z===1)if(J.value)return[$.collection(J.value)];else{if(J.left)P9(J.left,G);if(J.right)P9(J.right,F);return[$.collection(G),$.collection(F)]}else if(J.value)return[$.collection(J.value)];else{if(J.left)G=Q(J.left,Z-1,$);if(J.right)F=Q(J.right,Z-1,$);return G.concat(F)}},zZ=function Q(J){var Z=this.cy(),$=this.nodes(),G=kq(J),F=G.attributes,U=function O(N,H){return q6(G.distance,F.length,function(j){return F[j](N)},function(j){return F[j](H)},N,H)},K=[],M=[],q=[],L=[];for(var z=0;z<$.length;z++){var A={value:G.mode==="dendrogram"?$[z]:[$[z]],key:z,index:z};K[z]=A,L[z]=A,M[z]=[],q[z]=0}for(var V=0;V<K.length;V++)for(var R=0;R<=V;R++){var Y=void 0;if(G.mode==="dendrogram")Y=V===R?Infinity:U(K[V].value,K[R].value);else Y=V===R?Infinity:U(K[V].value[0],K[R].value[0]);if(M[V][R]=Y,M[R][V]=Y,Y<M[V][q[V]])q[V]=R}var X=LZ(K,L,M,q,G);while(X)X=LZ(K,L,M,q,G);var B;if(G.mode==="dendrogram"){if(B=Wq(K[0],G.dendrogramDepth,Z),G.addDendrogram)Eq(K[0],Z)}else B=new Array(K.length),K.forEach(function(O,N){O.key=O.index=null,B[N]=Z.collection(O.value)});return B},Tq={hierarchicalClustering:zZ,hca:zZ},jq=o0({distance:"euclidean",preference:"median",damping:0.8,maxIterations:1000,minIterations:100,attributes:[]}),Dq=function Q(J){var{damping:Z,preference:$}=J;if(!(0.5<=Z&&Z<1))h0("Damping must range on [0.5, 1).  Got: ".concat(Z));var G=["median","mean","min","max"];if(!(G.some(function(F){return F===$})||$0($)))h0("Preference must be one of [".concat(G.map(function(F){return"'".concat(F,"'")}).join(", "),"] or a number.  Got: ").concat($));return jq(J)},Cq=function Q(J,Z,$,G){var F=function U(K,M){return G[M](K)};return-q6(J,G.length,function(U){return F(Z,U)},function(U){return F($,U)},Z,$)},Sq=function Q(J,Z){var $=null;if(Z==="median")$=DK(J);else if(Z==="mean")$=jK(J);else if(Z==="min")$=WK(J);else if(Z==="max")$=TK(J);else $=Z;return $},Iq=function Q(J,Z,$){var G=[];for(var F=0;F<J;F++)if(Z[F*J+F]+$[F*J+F]>0)G.push(F);return G},AZ=function Q(J,Z,$){var G=[];for(var F=0;F<J;F++){var U=-1,K=(-Infinity);for(var M=0;M<$.length;M++){var q=$[M];if(Z[F*J+q]>K)U=q,K=Z[F*J+q]}if(U>0)G.push(U)}for(var L=0;L<$.length;L++)G[$[L]]=$[L];return G},wq=function Q(J,Z,$){var G=AZ(J,Z,$);for(var F=0;F<$.length;F++){var U=[];for(var K=0;K<G.length;K++)if(G[K]===$[F])U.push(K);var M=-1,q=(-Infinity);for(var L=0;L<U.length;L++){var z=0;for(var A=0;A<U.length;A++)z+=Z[U[A]*J+U[L]];if(z>q)M=L,q=z}$[F]=U[M]}return G=AZ(J,Z,$),G},RZ=function Q(J){var Z=this.cy(),$=this.nodes(),G=Dq(J),F={};for(var U=0;U<$.length;U++)F[$[U].id()]=U;var K,M,q,L,z,A;K=$.length,M=K*K,q=new Array(M);for(var V=0;V<M;V++)q[V]=(-Infinity);for(var R=0;R<K;R++)for(var Y=0;Y<K;Y++)if(R!==Y)q[R*K+Y]=Cq(G.distance,$[R],$[Y],G.attributes);L=Sq(q,G.preference);for(var X=0;X<K;X++)q[X*K+X]=L;z=new Array(M);for(var B=0;B<M;B++)z[B]=0;A=new Array(M);for(var O=0;O<M;O++)A[O]=0;var N=new Array(K),H=new Array(K),j=new Array(K);for(var D=0;D<K;D++)N[D]=0,H[D]=0,j[D]=0;var k=new Array(K*G.minIterations);for(var C=0;C<k.length;C++)k[C]=0;var E;for(E=0;E<G.maxIterations;E++){for(var S=0;S<K;S++){var w=(-Infinity),T=(-Infinity),v=-1,I=0;for(var _=0;_<K;_++)if(N[_]=z[S*K+_],I=A[S*K+_]+q[S*K+_],I>=w)T=w,w=I,v=_;else if(I>T)T=I;for(var b=0;b<K;b++)z[S*K+b]=(1-G.damping)*(q[S*K+b]-w)+G.damping*N[b];z[S*K+v]=(1-G.damping)*(q[S*K+v]-T)+G.damping*N[v]}for(var P=0;P<K;P++){var u=0;for(var h=0;h<K;h++)N[h]=A[h*K+P],H[h]=Math.max(0,z[h*K+P]),u+=H[h];u-=H[P],H[P]=z[P*K+P],u+=H[P];for(var p=0;p<K;p++)A[p*K+P]=(1-G.damping)*Math.min(0,u-H[p])+G.damping*N[p];A[P*K+P]=(1-G.damping)*(u-H[P])+G.damping*N[P]}var m=0;for(var c=0;c<K;c++){var i=A[c*K+c]+z[c*K+c]>0?1:0;k[E%G.minIterations*K+c]=i,m+=i}if(m>0&&(E>=G.minIterations-1||E==G.maxIterations-1)){var r=0;for(var a=0;a<K;a++){j[a]=0;for(var n=0;n<G.minIterations;n++)j[a]+=k[n*K+a];if(j[a]===0||j[a]===G.minIterations)r++}if(r===K)break}}var f=Iq(K,z,A),o=wq(K,q,f),e={};for(var t=0;t<f.length;t++)e[f[t]]=[];for(var J0=0;J0<$.length;J0++){var K0=F[$[J0].id()],Y0=o[K0];if(Y0!=null)e[Y0].push($[J0])}var Q0=new Array(f.length);for(var Z0=0;Z0<f.length;Z0++)Q0[Z0]=Z.collection(e[f[Z0]]);return Q0},Pq={affinityPropagation:RZ,ap:RZ},vq=o0({root:void 0,directed:!1}),bq={hierholzer:function Q(J){if(!D0(J)){var Z=arguments;J={root:Z[0],directed:Z[1]}}var $=vq(J),G=$.root,F=$.directed,U=this,K=!1,M,q,L;if(G)L=R0(G)?this.filter(G)[0].id():G[0].id();var z={},A={};if(F)U.forEach(function(O){var N=O.id();if(O.isNode()){var H=O.indegree(!0),j=O.outdegree(!0),D=H-j,k=j-H;if(D==1)if(M)K=!0;else M=N;else if(k==1)if(q)K=!0;else q=N;else if(k>1||D>1)K=!0;z[N]=[],O.outgoers().forEach(function(C){if(C.isEdge())z[N].push(C.id())})}else A[N]=[void 0,O.target().id()]});else U.forEach(function(O){var N=O.id();if(O.isNode()){var H=O.degree(!0);if(H%2)if(!M)M=N;else if(!q)q=N;else K=!0;z[N]=[],O.connectedEdges().forEach(function(j){return z[N].push(j.id())})}else A[N]=[O.source().id(),O.target().id()]});var V={found:!1,trail:void 0};if(K)return V;else if(q&&M){if(F){if(L&&q!=L)return V;L=q}else if(L&&q!=L&&M!=L)return V;else if(!L)L=q}else if(!L)L=U[0].id();var R=function O(N){var H=N,j=[N],D,k,C;while(z[H].length){if(D=z[H].shift(),k=A[D][0],C=A[D][1],H!=C)z[C]=z[C].filter(function(E){return E!=D}),H=C;else if(!F&&H!=k)z[k]=z[k].filter(function(E){return E!=D}),H=k;j.unshift(D),j.unshift(H)}return j},Y=[],X=[];X=R(L);while(X.length!=1)if(z[X[0]].length==0)Y.unshift(U.getElementById(X.shift())),Y.unshift(U.getElementById(X.shift()));else X=R(X.shift()).concat(X);Y.unshift(U.getElementById(X.shift()));for(var B in z)if(z[B].length)return V;return V.found=!0,V.trail=this.spawn(Y,!0),V}},v9=function Q(){var J=this,Z={},$=0,G=0,F=[],U=[],K={},M=function z(A,V){var R=U.length-1,Y=[],X=J.spawn();while(U[R].x!=A||U[R].y!=V)Y.push(U.pop().edge),R--;Y.push(U.pop().edge),Y.forEach(function(B){var O=B.connectedNodes().intersection(J);X.merge(B),O.forEach(function(N){var H=N.id(),j=N.connectedEdges().intersection(J);if(X.merge(N),!Z[H].cutVertex)X.merge(j);else X.merge(j.filter(function(D){return D.isLoop()}))})}),F.push(X)},q=function z(A,V,R){if(A===R)G+=1;Z[V]={id:$,low:$++,cutVertex:!1};var Y=J.getElementById(V).connectedEdges().intersection(J);if(Y.size()===0)F.push(J.spawn(J.getElementById(V)));else{var X,B,O,N;Y.forEach(function(H){if(X=H.source().id(),B=H.target().id(),O=X===V?B:X,O!==R){if(N=H.id(),!K[N])K[N]=!0,U.push({x:V,y:O,edge:H});if(!(O in Z)){if(z(A,O,V),Z[V].low=Math.min(Z[V].low,Z[O].low),Z[V].id<=Z[O].low)Z[V].cutVertex=!0,M(V,O)}else Z[V].low=Math.min(Z[V].low,Z[O].id)}})}};J.forEach(function(z){if(z.isNode()){var A=z.id();if(!(A in Z))G=0,q(A,A),Z[A].cutVertex=G>1}});var L=Object.keys(Z).filter(function(z){return Z[z].cutVertex}).map(function(z){return J.getElementById(z)});return{cut:J.spawn(L),components:F}},_q={hopcroftTarjanBiconnected:v9,htbc:v9,htb:v9,hopcroftTarjanBiconnectedComponents:v9},b9=function Q(){var J=this,Z={},$=0,G=[],F=[],U=J.spawn(J),K=function M(q){F.push(q),Z[q]={index:$,low:$++,explored:!1};var L=J.getElementById(q).connectedEdges().intersection(J);if(L.forEach(function(Y){var X=Y.target().id();if(X!==q){if(!(X in Z))M(X);if(!Z[X].explored)Z[q].low=Math.min(Z[q].low,Z[X].low)}}),Z[q].index===Z[q].low){var z=J.spawn();for(;;){var A=F.pop();if(z.merge(J.getElementById(A)),Z[A].low=Z[q].index,Z[A].explored=!0,A===q)break}var V=z.edgesWith(z),R=z.merge(V);G.push(R),U=U.difference(R)}};return J.forEach(function(M){if(M.isNode()){var q=M.id();if(!(q in Z))K(q)}}),{cut:U,components:G}},uq={tarjanStronglyConnected:b9,tsc:b9,tscc:b9,tarjanStronglyConnectedComponents:b9},W$={};[F9,zK,AK,VK,XK,OK,kK,iK,jJ,DJ,c6,Fq,Oq,Tq,Pq,bq,_q,uq].forEach(function(Q){V0(W$,Q)});/*!
Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
Licensed under The MIT License (http://opensource.org/licenses/MIT)
*/var T$=0,j$=1,D$=2,b8=function Q(J){if(!(this instanceof Q))return new Q(J);if(this.id="Thenable/1.0.7",this.state=T$,this.fulfillValue=void 0,this.rejectReason=void 0,this.onFulfilled=[],this.onRejected=[],this.proxy={then:this.then.bind(this)},typeof J==="function")J.call(this,this.fulfill.bind(this),this.reject.bind(this))};b8.prototype={fulfill:function Q(J){return VZ(this,j$,"fulfillValue",J)},reject:function Q(J){return VZ(this,D$,"rejectReason",J)},then:function Q(J,Z){var $=this,G=new b8;return $.onFulfilled.push(XZ(J,G,"fulfill")),$.onRejected.push(XZ(Z,G,"reject")),C$($),G.proxy}};var VZ=function Q(J,Z,$,G){if(J.state===T$)J.state=Z,J[$]=G,C$(J);return J},C$=function Q(J){if(J.state===j$)YZ(J,"onFulfilled",J.fulfillValue);else if(J.state===D$)YZ(J,"onRejected",J.rejectReason)},YZ=function Q(J,Z,$){if(J[Z].length===0)return;var G=J[Z];J[Z]=[];var F=function U(){for(var K=0;K<G.length;K++)G[K]($)};if(typeof setImmediate==="function")setImmediate(F);else setTimeout(F,0)},XZ=function Q(J,Z,$){return function(G){if(typeof J!=="function")Z[$].call(Z,G);else{var F;try{F=J(G)}catch(U){Z.reject(U);return}mq(Z,F)}}},mq=function Q(J,Z){if(J===Z||J.proxy===Z){J.reject(new TypeError("cannot resolve promise with itself"));return}var $;if(d0(Z)==="object"&&Z!==null||typeof Z==="function")try{$=Z.then}catch(F){J.reject(F);return}if(typeof $==="function"){var G=!1;try{$.call(Z,function(F){if(G)return;if(G=!0,F===Z)J.reject(new TypeError("circular thenable chain"));else Q(J,F)},function(F){if(G)return;G=!0,J.reject(F)})}catch(F){if(!G)J.reject(F)}return}J.fulfill(Z)};b8.all=function(Q){return new b8(function(J,Z){var $=new Array(Q.length),G=0,F=function K(M,q){if($[M]=q,G++,G===Q.length)J($)};for(var U=0;U<Q.length;U++)(function(K){var M=Q[K],q=M!=null&&M.then!=null;if(q)M.then(function(z){F(K,z)},function(z){Z(z)});else{var L=M;F(K,L)}})(U)})};b8.resolve=function(Q){return new b8(function(J,Z){J(Q)})};b8.reject=function(Q){return new b8(function(J,Z){Z(Q)})};var vJ=typeof Promise!=="undefined"?Promise:b8,d6=function Q(J,Z,$){var G=J7(J),F=!G,U=this._private=V0({duration:1000},Z,$);if(U.target=J,U.style=U.style||U.css,U.started=!1,U.playing=!1,U.hooked=!1,U.applying=!1,U.progress=0,U.completes=[],U.frames=[],U.complete&&f0(U.complete))U.completes.push(U.complete);if(F){var K=J.position();U.startPosition=U.startPosition||{x:K.x,y:K.y},U.startStyle=U.startStyle||J.cy().style().getAnimationStartStyle(J,U.style)}if(G){var M=J.pan();U.startPan={x:M.x,y:M.y},U.startZoom=J.zoom()}this.length=1,this[0]=this},GJ=d6.prototype;V0(GJ,{instanceString:function Q(){return"animation"},hook:function Q(){var J=this._private;if(!J.hooked){var Z,$=J.target._private.animation;if(J.queue)Z=$.queue;else Z=$.current;if(Z.push(this),z8(J.target))J.target.cy().addToAnimationPool(J.target);J.hooked=!0}return this},play:function Q(){var J=this._private;if(J.progress===1)J.progress=0;return J.playing=!0,J.started=!1,J.stopped=!1,this.hook(),this},playing:function Q(){return this._private.playing},apply:function Q(){var J=this._private;return J.applying=!0,J.started=!1,J.stopped=!1,this.hook(),this},applying:function Q(){return this._private.applying},pause:function Q(){var J=this._private;return J.playing=!1,J.started=!1,this},stop:function Q(){var J=this._private;return J.playing=!1,J.started=!1,J.stopped=!0,this},rewind:function Q(){return this.progress(0)},fastforward:function Q(){return this.progress(1)},time:function Q(J){var Z=this._private;if(J===void 0)return Z.progress*Z.duration;else return this.progress(J/Z.duration)},progress:function Q(J){var Z=this._private,$=Z.playing;if(J===void 0)return Z.progress;else{if($)this.pause();if(Z.progress=J,Z.started=!1,$)this.play()}return this},completed:function Q(){return this._private.progress===1},reverse:function Q(){var J=this._private,Z=J.playing;if(Z)this.pause();J.progress=1-J.progress,J.started=!1;var $=function M(q,L){var z=J[q];if(z==null)return;J[q]=J[L],J[L]=z};if($("zoom","startZoom"),$("pan","startPan"),$("position","startPosition"),J.style)for(var G=0;G<J.style.length;G++){var F=J.style[G],U=F.name,K=J.startStyle[U];J.startStyle[U]=F,J.style[G]=K}if(Z)this.play();return this},promise:function Q(J){var Z=this._private,$;switch(J){case"frame":$=Z.frames;break;default:case"complete":case"completed":$=Z.completes}return new vJ(function(G,F){$.push(function(){G()})})}});GJ.complete=GJ.completed;GJ.run=GJ.play;GJ.running=GJ.playing;var fq={animated:function Q(){return function J(){var Z=this,$=Z.length!==void 0,G=$?Z:[Z],F=this._private.cy||this;if(!F.styleEnabled())return!1;var U=G[0];if(U)return U._private.animation.current.length>0}},clearQueue:function Q(){return function J(){var Z=this,$=Z.length!==void 0,G=$?Z:[Z],F=this._private.cy||this;if(!F.styleEnabled())return this;for(var U=0;U<G.length;U++){var K=G[U];K._private.animation.queue=[]}return this}},delay:function Q(){return function J(Z,$){var G=this._private.cy||this;if(!G.styleEnabled())return this;return this.animate({delay:Z,duration:Z,complete:$})}},delayAnimation:function Q(){return function J(Z,$){var G=this._private.cy||this;if(!G.styleEnabled())return this;return this.animation({delay:Z,duration:Z,complete:$})}},animation:function Q(){return function J(Z,$){var G=this,F=G.length!==void 0,U=F?G:[G],K=this._private.cy||this,M=!F,q=!M;if(!K.styleEnabled())return this;var L=K.style();Z=V0({},Z,$);var z=Object.keys(Z).length===0;if(z)return new d6(U[0],Z);if(Z.duration===void 0)Z.duration=400;switch(Z.duration){case"slow":Z.duration=600;break;case"fast":Z.duration=200;break}if(q)Z.style=L.getPropsList(Z.style||Z.css),Z.css=void 0;if(q&&Z.renderedPosition!=null){var A=Z.renderedPosition,V=K.pan(),R=K.zoom();Z.position=A$(A,R,V)}if(M&&Z.panBy!=null){var Y=Z.panBy,X=K.pan();Z.pan={x:X.x+Y.x,y:X.y+Y.y}}var B=Z.center||Z.centre;if(M&&B!=null){var O=K.getCenterPan(B.eles,Z.zoom);if(O!=null)Z.pan=O}if(M&&Z.fit!=null){var N=Z.fit,H=K.getFitViewport(N.eles||N.boundingBox,N.padding);if(H!=null)Z.pan=H.pan,Z.zoom=H.zoom}if(M&&D0(Z.zoom)){var j=K.getZoomedViewport(Z.zoom);if(j!=null){if(j.zoomed)Z.zoom=j.zoom;if(j.panned)Z.pan=j.pan}else Z.zoom=null}return new d6(U[0],Z)}},animate:function Q(){return function J(Z,$){var G=this,F=G.length!==void 0,U=F?G:[G],K=this._private.cy||this;if(!K.styleEnabled())return this;if($)Z=V0({},Z,$);for(var M=0;M<U.length;M++){var q=U[M],L=q.animated()&&(Z.queue===void 0||Z.queue),z=q.animation(Z,L?{queue:!0}:void 0);z.play()}return this}},stop:function Q(){return function J(Z,$){var G=this,F=G.length!==void 0,U=F?G:[G],K=this._private.cy||this;if(!K.styleEnabled())return this;for(var M=0;M<U.length;M++){var q=U[M],L=q._private,z=L.animation.current;for(var A=0;A<z.length;A++){var V=z[A],R=V._private;if($)R.duration=0}if(Z)L.animation.queue=[];if(!$)L.animation.current=[]}return K.notify("draw"),this}}},gq={data:function Q(J){var Z={field:"data",bindingEvent:"data",allowBinding:!1,allowSetting:!1,allowGetting:!1,settingEvent:"data",settingTriggersEvent:!1,triggerFnName:"trigger",immutableKeys:{},updateStyle:!1,beforeGet:function $(G){},beforeSet:function $(G,F){},onSet:function $(G){},canSet:function $(G){return!0}};return J=V0({},Z,J),function $(G,F){var U=J,K=this,M=K.length!==void 0,q=M?K:[K],L=M?K[0]:K;if(R0(G)){var z=G.indexOf(".")!==-1,A=z&&WU.default(G);if(U.allowGetting&&F===void 0){var V;if(L)if(U.beforeGet(L),A&&L._private[U.field][G]===void 0)V=kU.default(L._private[U.field],A);else V=L._private[U.field][G];return V}else if(U.allowSetting&&F!==void 0){var R=!U.immutableKeys[G];if(R){var Y=rZ({},G,F);U.beforeSet(K,Y);for(var X=0,B=q.length;X<B;X++){var O=q[X];if(U.canSet(O))if(A&&L._private[U.field][G]===void 0)EU.default(O._private[U.field],A,F);else O._private[U.field][G]=F}if(U.updateStyle)K.updateStyle();if(U.onSet(K),U.settingTriggersEvent)K[U.triggerFnName](U.settingEvent)}}}else if(U.allowSetting&&D0(G)){var N=G,H,j,D=Object.keys(N);U.beforeSet(K,N);for(var k=0;k<D.length;k++){H=D[k],j=N[H];var C=!U.immutableKeys[H];if(C)for(var E=0;E<q.length;E++){var S=q[E];if(U.canSet(S))S._private[U.field][H]=j}}if(U.updateStyle)K.updateStyle();if(U.onSet(K),U.settingTriggersEvent)K[U.triggerFnName](U.settingEvent)}else if(U.allowBinding&&f0(G)){var w=G;K.on(U.bindingEvent,w)}else if(U.allowGetting&&G===void 0){var T;if(L)U.beforeGet(L),T=L._private[U.field];return T}return K}},removeData:function Q(J){var Z={field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!1,immutableKeys:{}};return J=V0({},Z,J),function $(G){var F=J,U=this,K=U.length!==void 0,M=K?U:[U];if(R0(G)){var q=G.split(/\s+/),L=q.length;for(var z=0;z<L;z++){var A=q[z];if(d8(A))continue;var V=!F.immutableKeys[A];if(V)for(var R=0,Y=M.length;R<Y;R++)M[R]._private[F.field][A]=void 0}if(F.triggerEvent)U[F.triggerFnName](F.event)}else if(G===void 0){for(var X=0,B=M.length;X<B;X++){var O=M[X]._private[F.field],N=Object.keys(O);for(var H=0;H<N.length;H++){var j=N[H],D=!F.immutableKeys[j];if(D)O[j]=void 0}}if(F.triggerEvent)U[F.triggerFnName](F.event)}return U}}},hq={eventAliasesOn:function Q(J){var Z=J;Z.addListener=Z.listen=Z.bind=Z.on,Z.unlisten=Z.unbind=Z.off=Z.removeListener,Z.trigger=Z.emit,Z.pon=Z.promiseOn=function($,G){var F=this,U=Array.prototype.slice.call(arguments,0);return new vJ(function(K,M){var q=function A(V){F.off.apply(F,z),K(V)},L=U.concat([q]),z=L.concat([]);F.on.apply(F,L)})}}},w0={};[fq,gq,hq].forEach(function(Q){V0(w0,Q)});var yq={animate:w0.animate(),animation:w0.animation(),animated:w0.animated(),clearQueue:w0.clearQueue(),delay:w0.delay(),delayAnimation:w0.delayAnimation(),stop:w0.stop()},x9={classes:function Q(J){var Z=this;if(J===void 0){var $=[];return Z[0]._private.classes.forEach(function(R){return $.push(R)}),$}else if(!b0(J))J=(J||"").match(/\S+/g)||[];var G=[],F=new PJ(J);for(var U=0;U<Z.length;U++){var K=Z[U],M=K._private,q=M.classes,L=!1;for(var z=0;z<J.length;z++){var A=J[z],V=q.has(A);if(!V){L=!0;break}}if(!L)L=q.size!==J.length;if(L)M.classes=F,G.push(K)}if(G.length>0)this.spawn(G).updateStyle().emit("class");return Z},addClass:function Q(J){return this.toggleClass(J,!0)},hasClass:function Q(J){var Z=this[0];return Z!=null&&Z._private.classes.has(J)},toggleClass:function Q(J,Z){if(!b0(J))J=J.match(/\S+/g)||[];var $=this,G=Z===void 0,F=[];for(var U=0,K=$.length;U<K;U++){var M=$[U],q=M._private.classes,L=!1;for(var z=0;z<J.length;z++){var A=J[z],V=q.has(A),R=!1;if(Z||G&&!V)q.add(A),R=!0;else if(!Z||G&&V)q.delete(A),R=!0;if(!L&&R)F.push(M),L=!0}}if(F.length>0)this.spawn(F).updateStyle().emit("class");return $},removeClass:function Q(J){return this.toggleClass(J,!1)},flashClass:function Q(J,Z){var $=this;if(Z==null)Z=250;else if(Z===0)return $;return $.addClass(J),setTimeout(function(){$.removeClass(J)},Z),$}};x9.className=x9.classNames=x9.classes;var j0={metaChar:'[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',comparatorOp:"=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=",boolOp:"\\?|\\!|\\^",string:`"(?:\\\\"|[^"])*"|'(?:\\\\'|[^'])*'`,number:c0,meta:"degree|indegree|outdegree",separator:"\\s*,\\s*",descendant:"\\s+",child:"\\s+>\\s+",subject:"\\$",group:"node|edge|\\*",directedEdge:"\\s+->\\s+",undirectedEdge:"\\s+<->\\s+"};j0.variable="(?:[\\w-.]|(?:\\\\"+j0.metaChar+"))+";j0.className="(?:[\\w-]|(?:\\\\"+j0.metaChar+"))+";j0.value=j0.string+"|"+j0.number;j0.id=j0.variable;(function(){var Q,J,Z;Q=j0.comparatorOp.split("|");for(Z=0;Z<Q.length;Z++)J=Q[Z],j0.comparatorOp+="|@"+J;Q=j0.comparatorOp.split("|");for(Z=0;Z<Q.length;Z++){if(J=Q[Z],J.indexOf("!")>=0)continue;if(J==="=")continue;j0.comparatorOp+="|\\!"+J}})();var v0=function Q(){return{checks:[]}},F0={GROUP:0,COLLECTION:1,FILTER:2,DATA_COMPARE:3,DATA_EXIST:4,DATA_BOOL:5,META_COMPARE:6,STATE:7,ID:8,CLASS:9,UNDIRECTED_EDGE:10,DIRECTED_EDGE:11,NODE_SOURCE:12,NODE_TARGET:13,NODE_NEIGHBOR:14,CHILD:15,DESCENDANT:16,PARENT:17,ANCESTOR:18,COMPOUND_SPLIT:19,TRUE:20},p6=[{selector:":selected",matches:function Q(J){return J.selected()}},{selector:":unselected",matches:function Q(J){return!J.selected()}},{selector:":selectable",matches:function Q(J){return J.selectable()}},{selector:":unselectable",matches:function Q(J){return!J.selectable()}},{selector:":locked",matches:function Q(J){return J.locked()}},{selector:":unlocked",matches:function Q(J){return!J.locked()}},{selector:":visible",matches:function Q(J){return J.visible()}},{selector:":hidden",matches:function Q(J){return!J.visible()}},{selector:":transparent",matches:function Q(J){return J.transparent()}},{selector:":grabbed",matches:function Q(J){return J.grabbed()}},{selector:":free",matches:function Q(J){return!J.grabbed()}},{selector:":removed",matches:function Q(J){return J.removed()}},{selector:":inside",matches:function Q(J){return!J.removed()}},{selector:":grabbable",matches:function Q(J){return J.grabbable()}},{selector:":ungrabbable",matches:function Q(J){return!J.grabbable()}},{selector:":animated",matches:function Q(J){return J.animated()}},{selector:":unanimated",matches:function Q(J){return!J.animated()}},{selector:":parent",matches:function Q(J){return J.isParent()}},{selector:":childless",matches:function Q(J){return J.isChildless()}},{selector:":child",matches:function Q(J){return J.isChild()}},{selector:":orphan",matches:function Q(J){return J.isOrphan()}},{selector:":nonorphan",matches:function Q(J){return J.isChild()}},{selector:":compound",matches:function Q(J){if(J.isNode())return J.isParent();else return J.source().isParent()||J.target().isParent()}},{selector:":loop",matches:function Q(J){return J.isLoop()}},{selector:":simple",matches:function Q(J){return J.isSimple()}},{selector:":active",matches:function Q(J){return J.active()}},{selector:":inactive",matches:function Q(J){return!J.active()}},{selector:":backgrounding",matches:function Q(J){return J.backgrounding()}},{selector:":nonbackgrounding",matches:function Q(J){return!J.backgrounding()}}].sort(function(Q,J){return pU(Q.selector,J.selector)}),xq=function(){var Q={},J;for(var Z=0;Z<p6.length;Z++)J=p6[Z],Q[J.selector]=J.matches;return Q}(),cq=function Q(J,Z){return xq[J](Z)},dq="("+p6.map(function(Q){return Q.selector}).join("|")+")",BJ=function Q(J){return J.replace(new RegExp("\\\\("+j0.metaChar+")","g"),function(Z,$){return $})},g8=function Q(J,Z,$){J[J.length-1]=$},l6=[{name:"group",query:!0,regex:"("+j0.group+")",populate:function Q(J,Z,$){var G=H8($,1),F=G[0];Z.checks.push({type:F0.GROUP,value:F==="*"?F:F+"s"})}},{name:"state",query:!0,regex:dq,populate:function Q(J,Z,$){var G=H8($,1),F=G[0];Z.checks.push({type:F0.STATE,value:F})}},{name:"id",query:!0,regex:"\\#("+j0.id+")",populate:function Q(J,Z,$){var G=H8($,1),F=G[0];Z.checks.push({type:F0.ID,value:BJ(F)})}},{name:"className",query:!0,regex:"\\.("+j0.className+")",populate:function Q(J,Z,$){var G=H8($,1),F=G[0];Z.checks.push({type:F0.CLASS,value:BJ(F)})}},{name:"dataExists",query:!0,regex:"\\[\\s*("+j0.variable+")\\s*\\]",populate:function Q(J,Z,$){var G=H8($,1),F=G[0];Z.checks.push({type:F0.DATA_EXIST,field:BJ(F)})}},{name:"dataCompare",query:!0,regex:"\\[\\s*("+j0.variable+")\\s*("+j0.comparatorOp+")\\s*("+j0.value+")\\s*\\]",populate:function Q(J,Z,$){var G=H8($,3),F=G[0],U=G[1],K=G[2],M=new RegExp("^"+j0.string+"$").exec(K)!=null;if(M)K=K.substring(1,K.length-1);else K=parseFloat(K);Z.checks.push({type:F0.DATA_COMPARE,field:BJ(F),operator:U,value:K})}},{name:"dataBool",query:!0,regex:"\\[\\s*("+j0.boolOp+")\\s*("+j0.variable+")\\s*\\]",populate:function Q(J,Z,$){var G=H8($,2),F=G[0],U=G[1];Z.checks.push({type:F0.DATA_BOOL,field:BJ(U),operator:F})}},{name:"metaCompare",query:!0,regex:"\\[\\[\\s*("+j0.meta+")\\s*("+j0.comparatorOp+")\\s*("+j0.number+")\\s*\\]\\]",populate:function Q(J,Z,$){var G=H8($,3),F=G[0],U=G[1],K=G[2];Z.checks.push({type:F0.META_COMPARE,field:BJ(F),operator:U,value:parseFloat(K)})}},{name:"nextQuery",separator:!0,regex:j0.separator,populate:function Q(J,Z){var{currentSubject:$,edgeCount:G,compoundCount:F}=J,U=J[J.length-1];if($!=null)U.subject=$,J.currentSubject=null;U.edgeCount=G,U.compoundCount=F,J.edgeCount=0,J.compoundCount=0;var K=J[J.length++]=v0();return K}},{name:"directedEdge",separator:!0,regex:j0.directedEdge,populate:function Q(J,Z){if(J.currentSubject==null){var $=v0(),G=Z,F=v0();return $.checks.push({type:F0.DIRECTED_EDGE,source:G,target:F}),g8(J,Z,$),J.edgeCount++,F}else{var U=v0(),K=Z,M=v0();return U.checks.push({type:F0.NODE_SOURCE,source:K,target:M}),g8(J,Z,U),J.edgeCount++,M}}},{name:"undirectedEdge",separator:!0,regex:j0.undirectedEdge,populate:function Q(J,Z){if(J.currentSubject==null){var $=v0(),G=Z,F=v0();return $.checks.push({type:F0.UNDIRECTED_EDGE,nodes:[G,F]}),g8(J,Z,$),J.edgeCount++,F}else{var U=v0(),K=Z,M=v0();return U.checks.push({type:F0.NODE_NEIGHBOR,node:K,neighbor:M}),g8(J,Z,U),M}}},{name:"child",separator:!0,regex:j0.child,populate:function Q(J,Z){if(J.currentSubject==null){var $=v0(),G=v0(),F=J[J.length-1];return $.checks.push({type:F0.CHILD,parent:F,child:G}),g8(J,Z,$),J.compoundCount++,G}else if(J.currentSubject===Z){var U=v0(),K=J[J.length-1],M=v0(),q=v0(),L=v0(),z=v0();return U.checks.push({type:F0.COMPOUND_SPLIT,left:K,right:M,subject:q}),q.checks=Z.checks,Z.checks=[{type:F0.TRUE}],z.checks.push({type:F0.TRUE}),M.checks.push({type:F0.PARENT,parent:z,child:L}),g8(J,K,U),J.currentSubject=q,J.compoundCount++,L}else{var A=v0(),V=v0(),R=[{type:F0.PARENT,parent:A,child:V}];return A.checks=Z.checks,Z.checks=R,J.compoundCount++,V}}},{name:"descendant",separator:!0,regex:j0.descendant,populate:function Q(J,Z){if(J.currentSubject==null){var $=v0(),G=v0(),F=J[J.length-1];return $.checks.push({type:F0.DESCENDANT,ancestor:F,descendant:G}),g8(J,Z,$),J.compoundCount++,G}else if(J.currentSubject===Z){var U=v0(),K=J[J.length-1],M=v0(),q=v0(),L=v0(),z=v0();return U.checks.push({type:F0.COMPOUND_SPLIT,left:K,right:M,subject:q}),q.checks=Z.checks,Z.checks=[{type:F0.TRUE}],z.checks.push({type:F0.TRUE}),M.checks.push({type:F0.ANCESTOR,ancestor:z,descendant:L}),g8(J,K,U),J.currentSubject=q,J.compoundCount++,L}else{var A=v0(),V=v0(),R=[{type:F0.ANCESTOR,ancestor:A,descendant:V}];return A.checks=Z.checks,Z.checks=R,J.compoundCount++,V}}},{name:"subject",modifier:!0,regex:j0.subject,populate:function Q(J,Z){if(J.currentSubject!=null&&J.currentSubject!==Z)return P0("Redefinition of subject in selector `"+J.toString()+"`"),!1;J.currentSubject=Z;var $=J[J.length-1],G=$.checks[0],F=G==null?null:G.type;if(F===F0.DIRECTED_EDGE)G.type=F0.NODE_TARGET;else if(F===F0.UNDIRECTED_EDGE)G.type=F0.NODE_NEIGHBOR,G.node=G.nodes[1],G.neighbor=G.nodes[0],G.nodes=null}}];l6.forEach(function(Q){return Q.regexObj=new RegExp("^"+Q.regex)});var pq=function Q(J){var Z,$,G;for(var F=0;F<l6.length;F++){var U=l6[F],K=U.name,M=J.match(U.regexObj);if(M!=null){$=M,Z=U,G=K;var q=M[0];J=J.substring(q.length);break}}return{expr:Z,match:$,name:G,remaining:J}},lq=function Q(J){var Z=J.match(/^\s+/);if(Z){var $=Z[0];J=J.substring($.length)}return J},iq=function Q(J){var Z=this,$=Z.inputText=J,G=Z[0]=v0();Z.length=1,$=lq($);for(;;){var F=pq($);if(F.expr==null)return P0("The selector `"+J+"`is invalid"),!1;else{var U=F.match.slice(1),K=F.expr.populate(Z,G,U);if(K===!1)return!1;else if(K!=null)G=K}if($=F.remaining,$.match(/^\s*$/))break}var M=Z[Z.length-1];if(Z.currentSubject!=null)M.subject=Z.currentSubject;M.edgeCount=Z.edgeCount,M.compoundCount=Z.compoundCount;for(var q=0;q<Z.length;q++){var L=Z[q];if(L.compoundCount>0&&L.edgeCount>0)return P0("The selector `"+J+"` is invalid because it uses both a compound selector and an edge selector"),!1;if(L.edgeCount>1)return P0("The selector `"+J+"` is invalid because it uses multiple edge selectors"),!1;else if(L.edgeCount===1)P0("The selector `"+J+"` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.")}return!0},aq=function Q(){if(this.toStringCache!=null)return this.toStringCache;var J=function q(L){if(L==null)return"";else return L},Z=function q(L){if(R0(L))return'"'+L+'"';else return J(L)},$=function q(L){return" "+L+" "},G=function q(L,z){var{type:A,value:V}=L;switch(A){case F0.GROUP:{var R=J(V);return R.substring(0,R.length-1)}case F0.DATA_COMPARE:{var{field:Y,operator:X}=L;return"["+Y+$(J(X))+Z(V)+"]"}case F0.DATA_BOOL:{var{operator:B,field:O}=L;return"["+J(B)+O+"]"}case F0.DATA_EXIST:{var N=L.field;return"["+N+"]"}case F0.META_COMPARE:{var{operator:H,field:j}=L;return"[["+j+$(J(H))+Z(V)+"]]"}case F0.STATE:return V;case F0.ID:return"#"+V;case F0.CLASS:return"."+V;case F0.PARENT:case F0.CHILD:return F(L.parent,z)+$(">")+F(L.child,z);case F0.ANCESTOR:case F0.DESCENDANT:return F(L.ancestor,z)+" "+F(L.descendant,z);case F0.COMPOUND_SPLIT:{var D=F(L.left,z),k=F(L.subject,z),C=F(L.right,z);return D+(D.length>0?" ":"")+k+C}case F0.TRUE:return""}},F=function q(L,z){return L.checks.reduce(function(A,V,R){return A+(z===L&&R===0?"$":"")+G(V,z)},"")},U="";for(var K=0;K<this.length;K++){var M=this[K];if(U+=F(M,M.subject),this.length>1&&K<this.length-1)U+=", "}return this.toStringCache=U,U},nq={parse:iq,toString:aq},S$=function Q(J,Z,$){var G,F=R0(J),U=$0(J),K=R0($),M,q,L=!1,z=!1,A=!1;if(Z.indexOf("!")>=0)Z=Z.replace("!",""),z=!0;if(Z.indexOf("@")>=0)Z=Z.replace("@",""),L=!0;if(F||K||L)M=!F&&!U?"":""+J,q=""+$;if(L)J=M=M.toLowerCase(),$=q=q.toLowerCase();switch(Z){case"*=":G=M.indexOf(q)>=0;break;case"$=":G=M.indexOf(q,M.length-q.length)>=0;break;case"^=":G=M.indexOf(q)===0;break;case"=":G=J===$;break;case">":A=!0,G=J>$;break;case">=":A=!0,G=J>=$;break;case"<":A=!0,G=J<$;break;case"<=":A=!0,G=J<=$;break;default:G=!1;break}if(z&&(J!=null||!A))G=!G;return G},sq=function Q(J,Z){switch(Z){case"?":return J?!0:!1;case"!":return J?!1:!0;case"^":return J===void 0}},rq=function Q(J){return J!==void 0},M7=function Q(J,Z){return J.data(Z)},oq=function Q(J,Z){return J[Z]()},y0=[],m0=function Q(J,Z){return J.checks.every(function($){return y0[$.type]($,Z)})};y0[F0.GROUP]=function(Q,J){var Z=Q.value;return Z==="*"||Z===J.group()};y0[F0.STATE]=function(Q,J){var Z=Q.value;return cq(Z,J)};y0[F0.ID]=function(Q,J){var Z=Q.value;return J.id()===Z};y0[F0.CLASS]=function(Q,J){var Z=Q.value;return J.hasClass(Z)};y0[F0.META_COMPARE]=function(Q,J){var{field:Z,operator:$,value:G}=Q;return S$(oq(J,Z),$,G)};y0[F0.DATA_COMPARE]=function(Q,J){var{field:Z,operator:$,value:G}=Q;return S$(M7(J,Z),$,G)};y0[F0.DATA_BOOL]=function(Q,J){var{field:Z,operator:$}=Q;return sq(M7(J,Z),$)};y0[F0.DATA_EXIST]=function(Q,J){var Z=Q.field;return Q.operator,rq(M7(J,Z))};y0[F0.UNDIRECTED_EDGE]=function(Q,J){var Z=Q.nodes[0],$=Q.nodes[1],G=J.source(),F=J.target();return m0(Z,G)&&m0($,F)||m0($,G)&&m0(Z,F)};y0[F0.NODE_NEIGHBOR]=function(Q,J){return m0(Q.node,J)&&J.neighborhood().some(function(Z){return Z.isNode()&&m0(Q.neighbor,Z)})};y0[F0.DIRECTED_EDGE]=function(Q,J){return m0(Q.source,J.source())&&m0(Q.target,J.target())};y0[F0.NODE_SOURCE]=function(Q,J){return m0(Q.source,J)&&J.outgoers().some(function(Z){return Z.isNode()&&m0(Q.target,Z)})};y0[F0.NODE_TARGET]=function(Q,J){return m0(Q.target,J)&&J.incomers().some(function(Z){return Z.isNode()&&m0(Q.source,Z)})};y0[F0.CHILD]=function(Q,J){return m0(Q.child,J)&&m0(Q.parent,J.parent())};y0[F0.PARENT]=function(Q,J){return m0(Q.parent,J)&&J.children().some(function(Z){return m0(Q.child,Z)})};y0[F0.DESCENDANT]=function(Q,J){return m0(Q.descendant,J)&&J.ancestors().some(function(Z){return m0(Q.ancestor,Z)})};y0[F0.ANCESTOR]=function(Q,J){return m0(Q.ancestor,J)&&J.descendants().some(function(Z){return m0(Q.descendant,Z)})};y0[F0.COMPOUND_SPLIT]=function(Q,J){return m0(Q.subject,J)&&m0(Q.left,J)&&m0(Q.right,J)};y0[F0.TRUE]=function(){return!0};y0[F0.COLLECTION]=function(Q,J){var Z=Q.value;return Z.has(J)};y0[F0.FILTER]=function(Q,J){var Z=Q.value;return Z(J)};var tq=function Q(J){var Z=this;if(Z.length===1&&Z[0].checks.length===1&&Z[0].checks[0].type===F0.ID)return J.getElementById(Z[0].checks[0].value).collection();var $=function G(F){for(var U=0;U<Z.length;U++){var K=Z[U];if(m0(K,F))return!0}return!1};if(Z.text()==null)$=function G(){return!0};return J.filter($)},eq=function Q(J){var Z=this;for(var $=0;$<Z.length;$++){var G=Z[$];if(m0(G,J))return!0}return!1},JM={matches:eq,filter:tq},l8=function Q(J){if(this.inputText=J,this.currentSubject=null,this.compoundCount=0,this.edgeCount=0,this.length=0,J==null||R0(J)&&J.match(/^\s*$/));else if(z8(J))this.addQuery({checks:[{type:F0.COLLECTION,value:J.collection()}]});else if(f0(J))this.addQuery({checks:[{type:F0.FILTER,value:J}]});else if(R0(J)){if(!this.parse(J))this.invalid=!0}else h0("A selector must be created from a string; found ")},i8=l8.prototype;[nq,JM].forEach(function(Q){return V0(i8,Q)});i8.text=function(){return this.inputText};i8.size=function(){return this.length};i8.eq=function(Q){return this[Q]};i8.sameText=function(Q){return!this.invalid&&!Q.invalid&&this.text()===Q.text()};i8.addQuery=function(Q){this[this.length++]=Q};i8.selector=i8.toString;var x8={allAre:function Q(J){var Z=new l8(J);return this.every(function($){return Z.matches($)})},is:function Q(J){var Z=new l8(J);return this.some(function($){return Z.matches($)})},some:function Q(J,Z){for(var $=0;$<this.length;$++){var G=!Z?J(this[$],$,this):J.apply(Z,[this[$],$,this]);if(G)return!0}return!1},every:function Q(J,Z){for(var $=0;$<this.length;$++){var G=!Z?J(this[$],$,this):J.apply(Z,[this[$],$,this]);if(!G)return!1}return!0},same:function Q(J){if(this===J)return!0;J=this.cy().collection(J);var Z=this.length,$=J.length;if(Z!==$)return!1;if(Z===1)return this[0]===J[0];return this.every(function(G){return J.hasElementWithId(G.id())})},anySame:function Q(J){return J=this.cy().collection(J),this.some(function(Z){return J.hasElementWithId(Z.id())})},allAreNeighbors:function Q(J){J=this.cy().collection(J);var Z=this.neighborhood();return J.every(function($){return Z.hasElementWithId($.id())})},contains:function Q(J){J=this.cy().collection(J);var Z=this;return J.every(function($){return Z.hasElementWithId($.id())})}};x8.allAreNeighbours=x8.allAreNeighbors;x8.has=x8.contains;x8.equal=x8.equals=x8.same;var Y8=function Q(J,Z){return function $(G,F,U,K){var M=G,q=this,L;if(M==null)L="";else if(z8(M)&&M.length===1)L=M.id();if(q.length===1&&L){var z=q[0]._private,A=z.traversalCache=z.traversalCache||{},V=A[Z]=A[Z]||[],R=ZJ(L),Y=V[R];if(Y)return Y;else return V[R]=J.call(q,G,F,U,K)}else return J.call(q,G,F,U,K)}},wJ={parent:function Q(J){var Z=[];if(this.length===1){var $=this[0]._private.parent;if($)return $}for(var G=0;G<this.length;G++){var F=this[G],U=F._private.parent;if(U)Z.push(U)}return this.spawn(Z,!0).filter(J)},parents:function Q(J){var Z=[],$=this.parent();while($.nonempty()){for(var G=0;G<$.length;G++){var F=$[G];Z.push(F)}$=$.parent()}return this.spawn(Z,!0).filter(J)},commonAncestors:function Q(J){var Z;for(var $=0;$<this.length;$++){var G=this[$],F=G.parents();Z=Z||F,Z=Z.intersect(F)}return Z.filter(J)},orphans:function Q(J){return this.stdFilter(function(Z){return Z.isOrphan()}).filter(J)},nonorphans:function Q(J){return this.stdFilter(function(Z){return Z.isChild()}).filter(J)},children:Y8(function(Q){var J=[];for(var Z=0;Z<this.length;Z++){var $=this[Z],G=$._private.children;for(var F=0;F<G.length;F++)J.push(G[F])}return this.spawn(J,!0).filter(Q)},"children"),siblings:function Q(J){return this.parent().children().not(this).filter(J)},isParent:function Q(){var J=this[0];if(J)return J.isNode()&&J._private.children.length!==0},isChildless:function Q(){var J=this[0];if(J)return J.isNode()&&J._private.children.length===0},isChild:function Q(){var J=this[0];if(J)return J.isNode()&&J._private.parent!=null},isOrphan:function Q(){var J=this[0];if(J)return J.isNode()&&J._private.parent==null},descendants:function Q(J){var Z=[];function $(G){for(var F=0;F<G.length;F++){var U=G[F];if(Z.push(U),U.children().nonempty())$(U.children())}}return $(this.children()),this.spawn(Z,!0).filter(J)}};wJ.forEachDown=function(Q){var J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return L7(this,Q,J,I$)};wJ.forEachUp=function(Q){var J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return L7(this,Q,J,w$)};wJ.forEachUpAndDown=function(Q){var J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return L7(this,Q,J,QM)};wJ.ancestors=wJ.parents;var q9,P$;q9=P$={data:w0.data({field:"data",bindingEvent:"data",allowBinding:!0,allowSetting:!0,settingEvent:"data",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),removeData:w0.removeData({field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!0,immutableKeys:{id:!0,source:!0,target:!0,parent:!0},updateStyle:!0}),scratch:w0.data({field:"scratch",bindingEvent:"scratch",allowBinding:!0,allowSetting:!0,settingEvent:"scratch",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,updateStyle:!0}),removeScratch:w0.removeData({field:"scratch",event:"scratch",triggerFnName:"trigger",triggerEvent:!0,updateStyle:!0}),rscratch:w0.data({field:"rscratch",allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,allowGetting:!0}),removeRscratch:w0.removeData({field:"rscratch",triggerEvent:!1}),id:function Q(){var J=this[0];if(J)return J._private.data.id}};q9.attr=q9.data;q9.removeAttr=q9.removeData;var ZM=P$,M6={};V0(M6,{degree:_6(function(Q,J){if(J.source().same(J.target()))return 2;else return 1}),indegree:_6(function(Q,J){if(J.target().same(Q))return 1;else return 0}),outdegree:_6(function(Q,J){if(J.source().same(Q))return 1;else return 0})});V0(M6,{minDegree:OJ("degree",function(Q,J){return Q<J}),maxDegree:OJ("degree",function(Q,J){return Q>J}),minIndegree:OJ("indegree",function(Q,J){return Q<J}),maxIndegree:OJ("indegree",function(Q,J){return Q>J}),minOutdegree:OJ("outdegree",function(Q,J){return Q<J}),maxOutdegree:OJ("outdegree",function(Q,J){return Q>J})});V0(M6,{totalDegree:function Q(J){var Z=0,$=this.nodes();for(var G=0;G<$.length;G++)Z+=$[G].degree(J);return Z}});var W8,v$,b$=function Q(J,Z,$){for(var G=0;G<J.length;G++){var F=J[G];if(!F.locked()){var U=F._private.position,K={x:Z.x!=null?Z.x-U.x:0,y:Z.y!=null?Z.y-U.y:0};if(F.isParent()&&!(K.x===0&&K.y===0))F.children().shift(K,$);F.dirtyBoundingBoxCache()}}},BZ={field:"position",bindingEvent:"position",allowBinding:!0,allowSetting:!0,settingEvent:"position",settingTriggersEvent:!0,triggerFnName:"emitAndNotify",allowGetting:!0,validKeys:["x","y"],beforeGet:function Q(J){J.updateCompoundBounds()},beforeSet:function Q(J,Z){b$(J,Z,!1)},onSet:function Q(J){J.dirtyCompoundBoundsCache()},canSet:function Q(J){return!J.locked()}};W8=v$={position:w0.data(BZ),silentPosition:w0.data(V0({},BZ,{allowBinding:!1,allowSetting:!0,settingTriggersEvent:!1,allowGetting:!1,beforeSet:function Q(J,Z){b$(J,Z,!0)},onSet:function Q(J){J.dirtyCompoundBoundsCache()}})),positions:function Q(J,Z){if(D0(J))if(Z)this.silentPosition(J);else this.position(J);else if(f0(J)){var $=J,G=this.cy();G.startBatch();for(var F=0;F<this.length;F++){var U=this[F],K=void 0;if(K=$(U,F))if(Z)U.silentPosition(K);else U.position(K)}G.endBatch()}return this},silentPositions:function Q(J){return this.positions(J,!0)},shift:function Q(J,Z,$){var G;if(D0(J))G={x:$0(J.x)?J.x:0,y:$0(J.y)?J.y:0},$=Z;else if(R0(J)&&$0(Z))G={x:0,y:0},G[J]=Z;if(G!=null){var F=this.cy();F.startBatch();for(var U=0;U<this.length;U++){var K=this[U];if(F.hasCompoundNodes()&&K.isChild()&&K.ancestors().anySame(this))continue;var M=K.position(),q={x:M.x+G.x,y:M.y+G.y};if($)K.silentPosition(q);else K.position(q)}F.endBatch()}return this},silentShift:function Q(J,Z){if(D0(J))this.shift(J,!0);else if(R0(J)&&$0(Z))this.shift(J,Z,!0);return this},renderedPosition:function Q(J,Z){var $=this[0],G=this.cy(),F=G.zoom(),U=G.pan(),K=D0(J)?J:void 0,M=K!==void 0||Z!==void 0&&R0(J);if($&&$.isNode())if(M)for(var q=0;q<this.length;q++){var L=this[q];if(Z!==void 0)L.position(J,(Z-U[J])/F);else if(K!==void 0)L.position(A$(K,F,U))}else{var z=$.position();if(K=K6(z,F,U),J===void 0)return K;else return K[J]}else if(!M)return;return this},relativePosition:function Q(J,Z){var $=this[0],G=this.cy(),F=D0(J)?J:void 0,U=F!==void 0||Z!==void 0&&R0(J),K=G.hasCompoundNodes();if($&&$.isNode())if(U)for(var M=0;M<this.length;M++){var q=this[M],L=K?q.parent():null,z=L&&L.length>0,A=z;if(z)L=L[0];var V=A?L.position():{x:0,y:0};if(Z!==void 0)q.position(J,Z+V[J]);else if(F!==void 0)q.position({x:F.x+V.x,y:F.y+V.y})}else{var R=$.position(),Y=K?$.parent():null,X=Y&&Y.length>0,B=X;if(X)Y=Y[0];var O=B?Y.position():{x:0,y:0};if(F={x:R.x-O.x,y:R.y-O.y},J===void 0)return F;else return F[J]}else if(!U)return;return this}};W8.modelPosition=W8.point=W8.position;W8.modelPositions=W8.points=W8.positions;W8.renderedPoint=W8.renderedPosition;W8.relativePoint=W8.relativePosition;var $M=v$,CJ,n8;CJ=n8={};n8.renderedBoundingBox=function(Q){var J=this.boundingBox(Q),Z=this.cy(),$=Z.zoom(),G=Z.pan(),F=J.x1*$+G.x,U=J.x2*$+G.x,K=J.y1*$+G.y,M=J.y2*$+G.y;return{x1:F,x2:U,y1:K,y2:M,w:U-F,h:M-K}};n8.dirtyCompoundBoundsCache=function(){var Q=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,J=this.cy();if(!J.styleEnabled()||!J.hasCompoundNodes())return this;return this.forEachUp(function(Z){if(Z.isParent()){var $=Z._private;if($.compoundBoundsClean=!1,$.bbCache=null,!Q)Z.emitAndNotify("bounds")}}),this};n8.updateCompoundBounds=function(){var Q=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,J=this.cy();if(!J.styleEnabled()||!J.hasCompoundNodes())return this;if(!Q&&J.batching())return this;function Z(U){if(!U.isParent())return;var K=U._private,M=U.children(),q=U.pstyle("compound-sizing-wrt-labels").value==="include",L={width:{val:U.pstyle("min-width").pfValue,left:U.pstyle("min-width-bias-left"),right:U.pstyle("min-width-bias-right")},height:{val:U.pstyle("min-height").pfValue,top:U.pstyle("min-height-bias-top"),bottom:U.pstyle("min-height-bias-bottom")}},z=M.boundingBox({includeLabels:q,includeOverlays:!1,useCache:!1}),A=K.position;if(z.w===0||z.h===0)z={w:U.pstyle("width").pfValue,h:U.pstyle("height").pfValue},z.x1=A.x-z.w/2,z.x2=A.x+z.w/2,z.y1=A.y-z.h/2,z.y2=A.y+z.h/2;function V(E,S,w){var T=0,v=0,I=S+w;if(E>0&&I>0)T=S/I*E,v=w/I*E;return{biasDiff:T,biasComplementDiff:v}}function R(E,S,w,T){if(w.units==="%")switch(T){case"width":return E>0?w.pfValue*E:0;case"height":return S>0?w.pfValue*S:0;case"average":return E>0&&S>0?w.pfValue*(E+S)/2:0;case"min":return E>0&&S>0?E>S?w.pfValue*S:w.pfValue*E:0;case"max":return E>0&&S>0?E>S?w.pfValue*E:w.pfValue*S:0;default:return 0}else if(w.units==="px")return w.pfValue;else return 0}var Y=L.width.left.value;if(L.width.left.units==="px"&&L.width.val>0)Y=Y*100/L.width.val;var X=L.width.right.value;if(L.width.right.units==="px"&&L.width.val>0)X=X*100/L.width.val;var B=L.height.top.value;if(L.height.top.units==="px"&&L.height.val>0)B=B*100/L.height.val;var O=L.height.bottom.value;if(L.height.bottom.units==="px"&&L.height.val>0)O=O*100/L.height.val;var N=V(L.width.val-z.w,Y,X),H=N.biasDiff,j=N.biasComplementDiff,D=V(L.height.val-z.h,B,O),k=D.biasDiff,C=D.biasComplementDiff;K.autoPadding=R(z.w,z.h,U.pstyle("padding"),U.pstyle("padding-relative-to").value),K.autoWidth=Math.max(z.w,L.width.val),A.x=(-H+z.x1+z.x2+j)/2,K.autoHeight=Math.max(z.h,L.height.val),A.y=(-k+z.y1+z.y2+C)/2}for(var $=0;$<this.length;$++){var G=this[$],F=G._private;if(!F.compoundBoundsClean||Q){if(Z(G),!J.batching())F.compoundBoundsClean=!0}}return this};var V8=function Q(J){if(J===Infinity||J===(-Infinity))return 0;return J},k8=function Q(J,Z,$,G,F){if(G-Z===0||F-$===0)return;if(Z==null||$==null||G==null||F==null)return;J.x1=Z<J.x1?Z:J.x1,J.x2=G>J.x2?G:J.x2,J.y1=$<J.y1?$:J.y1,J.y2=F>J.y2?F:J.y2,J.w=J.x2-J.x1,J.h=J.y2-J.y1},JJ=function Q(J,Z){if(Z==null)return J;return k8(J,Z.x1,Z.y1,Z.x2,Z.y2)},aJ=function Q(J,Z,$){return E8(J,Z,$)},_9=function Q(J,Z,$){if(Z.cy().headless())return;var G=Z._private,F=G.rstyle,U=F.arrowWidth/2,K=Z.pstyle($+"-arrow-shape").value,M,q;if(K!=="none"){if($==="source")M=F.srcX,q=F.srcY;else if($==="target")M=F.tgtX,q=F.tgtY;else M=F.midX,q=F.midY;var L=G.arrowBounds=G.arrowBounds||{},z=L[$]=L[$]||{};z.x1=M-U,z.y1=q-U,z.x2=M+U,z.y2=q+U,z.w=z.x2-z.x1,z.h=z.y2-z.y1,h9(z,1),k8(J,z.x1,z.y1,z.x2,z.y2)}},u6=function Q(J,Z,$){if(Z.cy().headless())return;var G;if($)G=$+"-";else G="";var F=Z._private,U=F.rstyle,K=Z.pstyle(G+"label").strValue;if(K){var M=Z.pstyle("text-halign"),q=Z.pstyle("text-valign"),L=aJ(U,"labelWidth",$),z=aJ(U,"labelHeight",$),A=aJ(U,"labelX",$),V=aJ(U,"labelY",$),R=Z.pstyle(G+"text-margin-x").pfValue,Y=Z.pstyle(G+"text-margin-y").pfValue,X=Z.isEdge(),B=Z.pstyle(G+"text-rotation"),O=Z.pstyle("text-outline-width").pfValue,N=Z.pstyle("text-border-width").pfValue,H=N/2,j=Z.pstyle("text-background-padding").pfValue,D=2,k=z,C=L,E=C/2,S=k/2,w,T,v,I;if(X)w=A-E,T=A+E,v=V-S,I=V+S;else{switch(M.value){case"left":w=A-C,T=A;break;case"center":w=A-E,T=A+E;break;case"right":w=A,T=A+C;break}switch(q.value){case"top":v=V-k,I=V;break;case"center":v=V-S,I=V+S;break;case"bottom":v=V,I=V+k;break}}w+=R-Math.max(O,H)-j-D,T+=R+Math.max(O,H)+j+D,v+=Y-Math.max(O,H)-j-D,I+=Y+Math.max(O,H)+j+D;var _=$||"main",b=F.labelBounds,P=b[_]=b[_]||{};P.x1=w,P.y1=v,P.x2=T,P.y2=I,P.w=T-w,P.h=I-v;var u=X&&B.strValue==="autorotate",h=B.pfValue!=null&&B.pfValue!==0;if(u||h){var p=u?aJ(F.rstyle,"labelAngle",$):B.pfValue,m=Math.cos(p),c=Math.sin(p),i=(w+T)/2,r=(v+I)/2;if(!X){switch(M.value){case"left":i=T;break;case"right":i=w;break}switch(q.value){case"top":r=I;break;case"bottom":r=v;break}}var a=function K0(Y0,Q0){return Y0=Y0-i,Q0=Q0-r,{x:Y0*m-Q0*c+i,y:Y0*c+Q0*m+r}},n=a(w,v),f=a(w,I),o=a(T,v),e=a(T,I);w=Math.min(n.x,f.x,o.x,e.x),T=Math.max(n.x,f.x,o.x,e.x),v=Math.min(n.y,f.y,o.y,e.y),I=Math.max(n.y,f.y,o.y,e.y)}var t=_+"Rot",J0=b[t]=b[t]||{};J0.x1=w,J0.y1=v,J0.x2=T,J0.y2=I,J0.w=T-w,J0.h=I-v,k8(J,w,v,T,I),k8(F.labelBounds.all,w,v,T,I)}return J},GM=function Q(J,Z){if(Z.cy().headless())return;var $=Z.pstyle("outline-opacity").value,G=Z.pstyle("outline-width").value;if($>0&&G>0){var F=Z.pstyle("outline-offset").value,U=Z.pstyle("shape").value,K=G+F,M=(J.w+K*2)/J.w,q=(J.h+K*2)/J.h,L=0,z=0;if(["diamond","pentagon","round-triangle"].includes(U))M=(J.w+K*2.4)/J.w,z=-K/3.6;else if(["concave-hexagon","rhomboid","right-rhomboid"].includes(U))M=(J.w+K*2.4)/J.w;else if(U==="star")M=(J.w+K*2.8)/J.w,q=(J.h+K*2.6)/J.h,z=-K/3.8;else if(U==="triangle")M=(J.w+K*2.8)/J.w,q=(J.h+K*2.4)/J.h,z=-K/1.4;else if(U==="vee")M=(J.w+K*4.4)/J.w,q=(J.h+K*3.8)/J.h,z=-K*0.5;var A=J.h*q-J.h,V=J.w*M-J.w;if(y9(J,[Math.ceil(A/2),Math.ceil(V/2)]),L!=0||z!==0){var R=vK(J,L,z);V$(J,R)}}},FM=function Q(J,Z){var $=J._private.cy,G=$.styleEnabled(),F=$.headless(),U=L8(),K=J._private,M=J.isNode(),q=J.isEdge(),L,z,A,V,R,Y,X=K.rstyle,B=M&&G?J.pstyle("bounds-expansion").pfValue:[0],O=function Z0(L0){return L0.pstyle("display").value!=="none"},N=!G||O(J)&&(!q||O(J.source())&&O(J.target()));if(N){var H=0,j=0;if(G&&Z.includeOverlays){if(H=J.pstyle("overlay-opacity").value,H!==0)j=J.pstyle("overlay-padding").value}var D=0,k=0;if(G&&Z.includeUnderlays){if(D=J.pstyle("underlay-opacity").value,D!==0)k=J.pstyle("underlay-padding").value}var C=Math.max(j,k),E=0,S=0;if(G)E=J.pstyle("width").pfValue,S=E/2;if(M&&Z.includeNodes){var w=J.position();R=w.x,Y=w.y;var T=J.outerWidth(),v=T/2,I=J.outerHeight(),_=I/2;if(L=R-v,z=R+v,A=Y-_,V=Y+_,k8(U,L,A,z,V),G&&Z.includeOutlines)GM(U,J)}else if(q&&Z.includeEdges)if(G&&!F){var b=J.pstyle("curve-style").strValue;if(L=Math.min(X.srcX,X.midX,X.tgtX),z=Math.max(X.srcX,X.midX,X.tgtX),A=Math.min(X.srcY,X.midY,X.tgtY),V=Math.max(X.srcY,X.midY,X.tgtY),L-=S,z+=S,A-=S,V+=S,k8(U,L,A,z,V),b==="haystack"){var P=X.haystackPts;if(P&&P.length===2){if(L=P[0].x,A=P[0].y,z=P[1].x,V=P[1].y,L>z){var u=L;L=z,z=u}if(A>V){var h=A;A=V,V=h}k8(U,L-S,A-S,z+S,V+S)}}else if(b==="bezier"||b==="unbundled-bezier"||b==="segments"||b==="taxi"){var p;switch(b){case"bezier":case"unbundled-bezier":p=X.bezierPts;break;case"segments":case"taxi":p=X.linePts;break}if(p!=null)for(var m=0;m<p.length;m++){var c=p[m];L=c.x-S,z=c.x+S,A=c.y-S,V=c.y+S,k8(U,L,A,z,V)}}}else{var i=J.source(),r=i.position(),a=J.target(),n=a.position();if(L=r.x,z=n.x,A=r.y,V=n.y,L>z){var f=L;L=z,z=f}if(A>V){var o=A;A=V,V=o}L-=S,z+=S,A-=S,V+=S,k8(U,L,A,z,V)}if(G&&Z.includeEdges&&q)_9(U,J,"mid-source"),_9(U,J,"mid-target"),_9(U,J,"source"),_9(U,J,"target");if(G){var e=J.pstyle("ghost").value==="yes";if(e){var t=J.pstyle("ghost-offset-x").pfValue,J0=J.pstyle("ghost-offset-y").pfValue;k8(U,U.x1+t,U.y1+J0,U.x2+t,U.y2+J0)}}var K0=K.bodyBounds=K.bodyBounds||{};if(QZ(K0,U),y9(K0,B),h9(K0,1),G)L=U.x1,z=U.x2,A=U.y1,V=U.y2,k8(U,L-C,A-C,z+C,V+C);var Y0=K.overlayBounds=K.overlayBounds||{};QZ(Y0,U),y9(Y0,B),h9(Y0,1);var Q0=K.labelBounds=K.labelBounds||{};if(Q0.all!=null)PK(Q0.all);else Q0.all=L8();if(G&&Z.includeLabels){if(Z.includeMainLabels)u6(U,J,null);if(q){if(Z.includeSourceLabels)u6(U,J,"source");if(Z.includeTargetLabels)u6(U,J,"target")}}}if(U.x1=V8(U.x1),U.y1=V8(U.y1),U.x2=V8(U.x2),U.y2=V8(U.y2),U.w=V8(U.x2-U.x1),U.h=V8(U.y2-U.y1),U.w>0&&U.h>0&&N)y9(U,B),h9(U,1);return U},_$=function Q(J){var Z=0,$=function F(U){return(U?1:0)<<Z++},G=0;return G+=$(J.incudeNodes),G+=$(J.includeEdges),G+=$(J.includeLabels),G+=$(J.includeMainLabels),G+=$(J.includeSourceLabels),G+=$(J.includeTargetLabels),G+=$(J.includeOverlays),G+=$(J.includeOutlines),G},u$=function Q(J){if(J.isEdge()){var Z=J.source().position(),$=J.target().position(),G=function F(U){return Math.round(U)};return eU([G(Z.x),G(Z.y),G($.x),G($.y)])}else return 0},OZ=function Q(J,Z){var $=J._private,G,F=J.isEdge(),U=Z==null?NZ:_$(Z),K=U===NZ,M=u$(J),q=$.bbCachePosKey===M,L=Z.useCache&&q,z=function R(Y){return Y._private.bbCache==null||Y._private.styleDirty},A=!L||z(J)||F&&z(J.source())||z(J.target());if(A){if(!q)J.recalculateRenderedStyle(L);G=FM(J,M9),$.bbCache=G,$.bbCachePosKey=M}else G=$.bbCache;if(!K){var V=J.isNode();if(G=L8(),Z.includeNodes&&V||Z.includeEdges&&!V)if(Z.includeOverlays)JJ(G,$.overlayBounds);else JJ(G,$.bodyBounds);if(Z.includeLabels)if(Z.includeMainLabels&&(!F||Z.includeSourceLabels&&Z.includeTargetLabels))JJ(G,$.labelBounds.all);else{if(Z.includeMainLabels)JJ(G,$.labelBounds.mainRot);if(Z.includeSourceLabels)JJ(G,$.labelBounds.sourceRot);if(Z.includeTargetLabels)JJ(G,$.labelBounds.targetRot)}G.w=G.x2-G.x1,G.h=G.y2-G.y1}return G},M9={includeNodes:!0,includeEdges:!0,includeLabels:!0,includeMainLabels:!0,includeSourceLabels:!0,includeTargetLabels:!0,includeOverlays:!0,includeUnderlays:!0,includeOutlines:!0,useCache:!0},NZ=_$(M9),HZ=o0(M9);n8.boundingBox=function(Q){var J;if(this.length===1&&this[0]._private.bbCache!=null&&!this[0]._private.styleDirty&&(Q===void 0||Q.useCache===void 0||Q.useCache===!0)){if(Q===void 0)Q=M9;else Q=HZ(Q);J=OZ(this[0],Q)}else{J=L8(),Q=Q||M9;var Z=HZ(Q),$=this,G=$.cy(),F=G.styleEnabled();if(F)for(var U=0;U<$.length;U++){var K=$[U],M=K._private,q=u$(K),L=M.bbCachePosKey===q,z=Z.useCache&&L&&!M.styleDirty;K.recalculateRenderedStyle(z)}this.updateCompoundBounds(!Q.useCache);for(var A=0;A<$.length;A++){var V=$[A];JJ(J,OZ(V,Z))}}return J.x1=V8(J.x1),J.y1=V8(J.y1),J.x2=V8(J.x2),J.y2=V8(J.y2),J.w=V8(J.x2-J.x1),J.h=V8(J.y2-J.y1),J};n8.dirtyBoundingBoxCache=function(){for(var Q=0;Q<this.length;Q++){var J=this[Q]._private;J.bbCache=null,J.bbCachePosKey=null,J.bodyBounds=null,J.overlayBounds=null,J.labelBounds.all=null,J.labelBounds.source=null,J.labelBounds.target=null,J.labelBounds.main=null,J.labelBounds.sourceRot=null,J.labelBounds.targetRot=null,J.labelBounds.mainRot=null,J.arrowBounds.source=null,J.arrowBounds.target=null,J.arrowBounds["mid-source"]=null,J.arrowBounds["mid-target"]=null}return this.emitAndNotify("bounds"),this};n8.boundingBoxAt=function(Q){var J=this.nodes(),Z=this.cy(),$=Z.hasCompoundNodes(),G=Z.collection();if($)G=J.filter(function(q){return q.isParent()}),J=J.not(G);if(D0(Q)){var F=Q;Q=function q(){return F}}var U=function q(L,z){return L._private.bbAtOldPos=Q(L,z)},K=function q(L){return L._private.bbAtOldPos};if(Z.startBatch(),J.forEach(U).silentPositions(Q),$)G.dirtyCompoundBoundsCache(),G.dirtyBoundingBoxCache(),G.updateCompoundBounds(!0);var M=wK(this.boundingBox({useCache:!1}));if(J.silentPositions(K),$)G.dirtyCompoundBoundsCache(),G.dirtyBoundingBoxCache(),G.updateCompoundBounds(!0);return Z.endBatch(),M};CJ.boundingbox=CJ.bb=CJ.boundingBox;CJ.renderedBoundingbox=CJ.renderedBoundingBox;var UM=n8,tJ,B9;tJ=B9={};var m$=function Q(J){J.uppercaseName=o5(J.name),J.autoName="auto"+J.uppercaseName,J.labelName="label"+J.uppercaseName,J.outerName="outer"+J.uppercaseName,J.uppercaseOuterName=o5(J.outerName),tJ[J.name]=function Z(){var $=this[0],G=$._private,F=G.cy,U=F._private.styleEnabled;if($)if(U){if($.isParent())return $.updateCompoundBounds(),G[J.autoName]||0;var K=$.pstyle(J.name);switch(K.strValue){case"label":return $.recalculateRenderedStyle(),G.rstyle[J.labelName]||0;default:return K.pfValue}}else return 1},tJ["outer"+J.uppercaseName]=function Z(){var $=this[0],G=$._private,F=G.cy,U=F._private.styleEnabled;if($)if(U){var K=$[J.name](),M=$.pstyle("border-width").pfValue,q=2*$.padding();return K+M+q}else return 1},tJ["rendered"+J.uppercaseName]=function Z(){var $=this[0];if($){var G=$[J.name]();return G*this.cy().zoom()}},tJ["rendered"+J.uppercaseOuterName]=function Z(){var $=this[0];if($){var G=$[J.outerName]();return G*this.cy().zoom()}}};m$({name:"width"});m$({name:"height"});B9.padding=function(){var Q=this[0],J=Q._private;if(Q.isParent())if(Q.updateCompoundBounds(),J.autoPadding!==void 0)return J.autoPadding;else return Q.pstyle("padding").pfValue;else return Q.pstyle("padding").pfValue};B9.paddedHeight=function(){var Q=this[0];return Q.height()+2*Q.padding()};B9.paddedWidth=function(){var Q=this[0];return Q.width()+2*Q.padding()};var KM=B9,qM=function Q(J,Z){if(J.isEdge())return Z(J)},MM=function Q(J,Z){if(J.isEdge()){var $=J.cy();return K6(Z(J),$.zoom(),$.pan())}},LM=function Q(J,Z){if(J.isEdge()){var $=J.cy(),G=$.pan(),F=$.zoom();return Z(J).map(function(U){return K6(U,F,G)})}},zM=function Q(J){return J.renderer().getControlPoints(J)},AM=function Q(J){return J.renderer().getSegmentPoints(J)},RM=function Q(J){return J.renderer().getSourceEndpoint(J)},VM=function Q(J){return J.renderer().getTargetEndpoint(J)},YM=function Q(J){return J.renderer().getEdgeMidpoint(J)},kZ={controlPoints:{get:zM,mult:!0},segmentPoints:{get:AM,mult:!0},sourceEndpoint:{get:RM},targetEndpoint:{get:VM},midpoint:{get:YM}},XM=function Q(J){return"rendered"+J[0].toUpperCase()+J.substr(1)},BM=Object.keys(kZ).reduce(function(Q,J){var Z=kZ[J],$=XM(J);if(Q[J]=function(){return qM(this,Z.get)},Z.mult)Q[$]=function(){return LM(this,Z.get)};else Q[$]=function(){return MM(this,Z.get)};return Q},{}),OM=V0({},$M,UM,KM,BM);/*!
Event object based on jQuery events, MIT license

https://jquery.org/license/
https://tldrlegal.com/license/mit-license
https://github.com/jquery/jquery/blob/master/src/event.js
*/var f$=function Q(J,Z){this.recycle(J,Z)};f$.prototype={instanceString:function Q(){return"event"},recycle:function Q(J,Z){if(this.isImmediatePropagationStopped=this.isPropagationStopped=this.isDefaultPrevented=nJ,J!=null&&J.preventDefault)this.type=J.type,this.isDefaultPrevented=J.defaultPrevented?u9:nJ;else if(J!=null&&J.type)Z=J;else this.type=J;if(Z!=null)this.originalEvent=Z.originalEvent,this.type=Z.type!=null?Z.type:this.type,this.cy=Z.cy,this.target=Z.target,this.position=Z.position,this.renderedPosition=Z.renderedPosition,this.namespace=Z.namespace,this.layout=Z.layout;if(this.cy!=null&&this.position!=null&&this.renderedPosition==null){var $=this.position,G=this.cy.zoom(),F=this.cy.pan();this.renderedPosition={x:$.x*G+F.x,y:$.y*G+F.y}}this.timeStamp=J&&J.timeStamp||Date.now()},preventDefault:function Q(){this.isDefaultPrevented=u9;var J=this.originalEvent;if(!J)return;if(J.preventDefault)J.preventDefault()},stopPropagation:function Q(){this.isPropagationStopped=u9;var J=this.originalEvent;if(!J)return;if(J.stopPropagation)J.stopPropagation()},stopImmediatePropagation:function Q(){this.isImmediatePropagationStopped=u9,this.stopPropagation()},isDefaultPrevented:nJ,isPropagationStopped:nJ,isImmediatePropagationStopped:nJ};var g$=/^([^.]+)(\.(?:[^.]+))?$/,NM=".*",h$={qualifierCompare:function Q(J,Z){return J===Z},eventMatches:function Q(){return!0},addEventFields:function Q(){},callbackContext:function Q(J){return J},beforeEmit:function Q(){},afterEmit:function Q(){},bubble:function Q(){return!1},parent:function Q(){return null},context:null},EZ=Object.keys(h$),HM={},a8=L6.prototype,y$=function Q(J,Z,$,G,F,U,K){if(f0(G))F=G,G=null;if(K)if(U==null)U=K;else U=V0({},U,K);var M=b0($)?$:$.split(/\s+/);for(var q=0;q<M.length;q++){var L=M[q];if(d8(L))continue;var z=L.match(g$);if(z){var A=z[1],V=z[2]?z[2]:null,R=Z(J,L,A,V,G,F,U);if(R===!1)break}}},WZ=function Q(J,Z){return J.addEventFields(J.context,Z),new f$(Z.type,Z)},kM=function Q(J,Z,$){if(bU($)){Z(J,$);return}else if(D0($)){Z(J,WZ(J,$));return}var G=b0($)?$:$.split(/\s+/);for(var F=0;F<G.length;F++){var U=G[F];if(d8(U))continue;var K=U.match(g$);if(K){var M=K[1],q=K[2]?K[2]:null,L=WZ(J,{type:M,namespace:q,target:J.context});Z(J,L)}}};a8.on=a8.addListener=function(Q,J,Z,$,G){return y$(this,function(F,U,K,M,q,L,z){if(f0(L))F.listeners.push({event:U,callback:L,type:K,namespace:M,qualifier:q,conf:z})},Q,J,Z,$,G),this};a8.one=function(Q,J,Z,$){return this.on(Q,J,Z,$,{one:!0})};a8.removeListener=a8.off=function(Q,J,Z,$){var G=this;if(this.emitting!==0)this.listeners=GK(this.listeners);var F=this.listeners,U=function M(q){var L=F[q];y$(G,function(z,A,V,R,Y,X){if((L.type===V||Q==="*")&&(!R&&L.namespace!==".*"||L.namespace===R)&&(!Y||z.qualifierCompare(L.qualifier,Y))&&(!X||L.callback===X))return F.splice(q,1),!1},Q,J,Z,$)};for(var K=F.length-1;K>=0;K--)U(K);return this};a8.removeAllListeners=function(){return this.removeListener("*")};a8.emit=a8.trigger=function(Q,J,Z){var $=this.listeners,G=$.length;if(this.emitting++,!b0(J))J=[J];return kM(this,function(F,U){if(Z!=null)$=[{event:U.event,type:U.type,namespace:U.namespace,callback:Z}],G=$.length;var K=function q(L){var z=$[L];if(z.type===U.type&&(!z.namespace||z.namespace===U.namespace||z.namespace===NM)&&F.eventMatches(F.context,z,U)){var A=[U];if(J!=null)UK(A,J);if(F.beforeEmit(F.context,z,U),z.conf&&z.conf.one)F.listeners=F.listeners.filter(function(Y){return Y!==z});var V=F.callbackContext(F.context,z,U),R=z.callback.apply(V,A);if(F.afterEmit(F.context,z,U),R===!1)U.stopPropagation(),U.preventDefault()}};for(var M=0;M<G;M++)K(M);if(F.bubble(F.context)&&!U.isPropagationStopped())F.parent(F.context).emit(U,J)},Q),this.emitting--,this};var EM={qualifierCompare:function Q(J,Z){if(J==null||Z==null)return J==null&&Z==null;else return J.sameText(Z)},eventMatches:function Q(J,Z,$){var G=Z.qualifier;if(G!=null)return J!==$.target&&Y9($.target)&&G.matches($.target);return!0},addEventFields:function Q(J,Z){Z.cy=J.cy(),Z.target=J},callbackContext:function Q(J,Z,$){return Z.qualifier!=null?$.target:J},beforeEmit:function Q(J,Z){if(Z.conf&&Z.conf.once)Z.conf.onceCollection.removeListener(Z.event,Z.qualifier,Z.callback)},bubble:function Q(){return!0},parent:function Q(J){return J.isChild()?J.parent():J.cy()}},m9=function Q(J){if(R0(J))return new l8(J);else return J},x$={createEmitter:function Q(){for(var J=0;J<this.length;J++){var Z=this[J],$=Z._private;if(!$.emitter)$.emitter=new L6(EM,Z)}return this},emitter:function Q(){return this._private.emitter},on:function Q(J,Z,$){var G=m9(Z);for(var F=0;F<this.length;F++){var U=this[F];U.emitter().on(J,G,$)}return this},removeListener:function Q(J,Z,$){var G=m9(Z);for(var F=0;F<this.length;F++){var U=this[F];U.emitter().removeListener(J,G,$)}return this},removeAllListeners:function Q(){for(var J=0;J<this.length;J++){var Z=this[J];Z.emitter().removeAllListeners()}return this},one:function Q(J,Z,$){var G=m9(Z);for(var F=0;F<this.length;F++){var U=this[F];U.emitter().one(J,G,$)}return this},once:function Q(J,Z,$){var G=m9(Z);for(var F=0;F<this.length;F++){var U=this[F];U.emitter().on(J,G,$,{once:!0,onceCollection:this})}},emit:function Q(J,Z){for(var $=0;$<this.length;$++){var G=this[$];G.emitter().emit(J,Z)}return this},emitAndNotify:function Q(J,Z){if(this.length===0)return;return this.cy().notify(J,this),this.emit(J,Z),this}};w0.eventAliasesOn(x$);var c$={nodes:function Q(J){return this.filter(function(Z){return Z.isNode()}).filter(J)},edges:function Q(J){return this.filter(function(Z){return Z.isEdge()}).filter(J)},byGroup:function Q(){var J=this.spawn(),Z=this.spawn();for(var $=0;$<this.length;$++){var G=this[$];if(G.isNode())J.push(G);else Z.push(G)}return{nodes:J,edges:Z}},filter:function Q(J,Z){if(J===void 0)return this;else if(R0(J)||z8(J))return new l8(J).filter(this);else if(f0(J)){var $=this.spawn(),G=this;for(var F=0;F<G.length;F++){var U=G[F],K=Z?J.apply(Z,[U,F,G]):J(U,F,G);if(K)$.push(U)}return $}return this.spawn()},not:function Q(J){if(!J)return this;else{if(R0(J))J=this.filter(J);var Z=this.spawn();for(var $=0;$<this.length;$++){var G=this[$],F=J.has(G);if(!F)Z.push(G)}return Z}},absoluteComplement:function Q(){var J=this.cy();return J.mutableElements().not(this)},intersect:function Q(J){if(R0(J)){var Z=J;return this.filter(Z)}var $=this.spawn(),G=this,F=J,U=this.length<J.length,K=U?G:F,M=U?F:G;for(var q=0;q<K.length;q++){var L=K[q];if(M.has(L))$.push(L)}return $},xor:function Q(J){var Z=this._private.cy;if(R0(J))J=Z.$(J);var $=this.spawn(),G=this,F=J,U=function K(M,q){for(var L=0;L<M.length;L++){var z=M[L],A=z._private.data.id,V=q.hasElementWithId(A);if(!V)$.push(z)}};return U(G,F),U(F,G),$},diff:function Q(J){var Z=this._private.cy;if(R0(J))J=Z.$(J);var $=this.spawn(),G=this.spawn(),F=this.spawn(),U=this,K=J,M=function q(L,z,A){for(var V=0;V<L.length;V++){var R=L[V],Y=R._private.data.id,X=z.hasElementWithId(Y);if(X)F.merge(R);else A.push(R)}};return M(U,K,$),M(K,U,G),{left:$,right:G,both:F}},add:function Q(J){var Z=this._private.cy;if(!J)return this;if(R0(J)){var $=J;J=Z.mutableElements().filter($)}var G=this.spawnSelf();for(var F=0;F<J.length;F++){var U=J[F],K=!this.has(U);if(K)G.push(U)}return G},merge:function Q(J){var Z=this._private,$=Z.cy;if(!J)return this;if(J&&R0(J)){var G=J;J=$.mutableElements().filter(G)}var F=Z.map;for(var U=0;U<J.length;U++){var K=J[U],M=K._private.data.id,q=!F.has(M);if(q){var L=this.length++;this[L]=K,F.set(M,{ele:K,index:L})}}return this},unmergeAt:function Q(J){var Z=this[J],$=Z.id(),G=this._private,F=G.map;this[J]=void 0,F.delete($);var U=J===this.length-1;if(this.length>1&&!U){var K=this.length-1,M=this[K],q=M._private.data.id;this[K]=void 0,this[J]=M,F.set(q,{ele:M,index:J})}return this.length--,this},unmergeOne:function Q(J){J=J[0];var Z=this._private,$=J._private.data.id,G=Z.map,F=G.get($);if(!F)return this;var U=F.index;return this.unmergeAt(U),this},unmerge:function Q(J){var Z=this._private.cy;if(!J)return this;if(J&&R0(J)){var $=J;J=Z.mutableElements().filter($)}for(var G=0;G<J.length;G++)this.unmergeOne(J[G]);return this},unmergeBy:function Q(J){for(var Z=this.length-1;Z>=0;Z--){var $=this[Z];if(J($))this.unmergeAt(Z)}return this},map:function Q(J,Z){var $=[],G=this;for(var F=0;F<G.length;F++){var U=G[F],K=Z?J.apply(Z,[U,F,G]):J(U,F,G);$.push(K)}return $},reduce:function Q(J,Z){var $=Z,G=this;for(var F=0;F<G.length;F++)$=J($,G[F],F,G);return $},max:function Q(J,Z){var $=(-Infinity),G,F=this;for(var U=0;U<F.length;U++){var K=F[U],M=Z?J.apply(Z,[K,U,F]):J(K,U,F);if(M>$)$=M,G=K}return{value:$,ele:G}},min:function Q(J,Z){var $=Infinity,G,F=this;for(var U=0;U<F.length;U++){var K=F[U],M=Z?J.apply(Z,[K,U,F]):J(K,U,F);if(M<$)$=M,G=K}return{value:$,ele:G}}},I0=c$;I0.u=I0["|"]=I0["+"]=I0.union=I0.or=I0.add;I0["\\"]=I0["!"]=I0["-"]=I0.difference=I0.relativeComplement=I0.subtract=I0.not;I0.n=I0["&"]=I0["."]=I0.and=I0.intersection=I0.intersect;I0["^"]=I0["(+)"]=I0["(-)"]=I0.symmetricDifference=I0.symdiff=I0.xor;I0.fnFilter=I0.filterFn=I0.stdFilter=I0.filter;I0.complement=I0.abscomp=I0.absoluteComplement;var WM={isNode:function Q(){return this.group()==="nodes"},isEdge:function Q(){return this.group()==="edges"},isLoop:function Q(){return this.isEdge()&&this.source()[0]===this.target()[0]},isSimple:function Q(){return this.isEdge()&&this.source()[0]!==this.target()[0]},group:function Q(){var J=this[0];if(J)return J._private.group}},d$=function Q(J,Z){var $=J.cy(),G=$.hasCompoundNodes();function F(L){var z=L.pstyle("z-compound-depth");if(z.value==="auto")return G?L.zDepth():0;else if(z.value==="bottom")return-1;else if(z.value==="top")return Z7;return 0}var U=F(J)-F(Z);if(U!==0)return U;function K(L){var z=L.pstyle("z-index-compare");if(z.value==="auto")return L.isNode()?1:0;return 0}var M=K(J)-K(Z);if(M!==0)return M;var q=J.pstyle("z-index").value-Z.pstyle("z-index").value;if(q!==0)return q;return J.poolIndex()-Z.poolIndex()},e9={forEach:function Q(J,Z){if(f0(J)){var $=this.length;for(var G=0;G<$;G++){var F=this[G],U=Z?J.apply(Z,[F,G,this]):J(F,G,this);if(U===!1)break}}return this},toArray:function Q(){var J=[];for(var Z=0;Z<this.length;Z++)J.push(this[Z]);return J},slice:function Q(J,Z){var $=[],G=this.length;if(Z==null)Z=G;if(J==null)J=0;if(J<0)J=G+J;if(Z<0)Z=G+Z;for(var F=J;F>=0&&F<Z&&F<G;F++)$.push(this[F]);return this.spawn($)},size:function Q(){return this.length},eq:function Q(J){return this[J]||this.spawn()},first:function Q(){return this[0]||this.spawn()},last:function Q(){return this[this.length-1]||this.spawn()},empty:function Q(){return this.length===0},nonempty:function Q(){return!this.empty()},sort:function Q(J){if(!f0(J))return this;var Z=this.toArray().sort(J);return this.spawn(Z)},sortByZIndex:function Q(){return this.sort(d$)},zDepth:function Q(){var J=this[0];if(!J)return;var Z=J._private,$=Z.group;if($==="nodes"){var G=Z.data.parent?J.parents().size():0;if(!J.isParent())return Z7-1;return G}else{var{source:F,target:U}=Z,K=F.zDepth(),M=U.zDepth();return Math.max(K,M,0)}}};e9.each=e9.forEach;var TM=function Q(){var J="undefined",Z=(typeof Symbol==="undefined"?"undefined":d0(Symbol))!=J&&d0(Symbol.iterator)!=J;if(Z)e9[Symbol.iterator]=function(){var $=this,G={value:void 0,done:!1},F=0,U=this.length;return rZ({next:function K(){if(F<U)G.value=$[F++];else G.value=void 0,G.done=!0;return G}},Symbol.iterator,function(){return this})}};TM();var jM=o0({nodeDimensionsIncludeLabels:!1}),c9={layoutDimensions:function Q(J){J=jM(J);var Z;if(!this.takesUpSpace())Z={w:0,h:0};else if(J.nodeDimensionsIncludeLabels){var $=this.boundingBox();Z={w:$.w,h:$.h}}else Z={w:this.outerWidth(),h:this.outerHeight()};if(Z.w===0||Z.h===0)Z.w=Z.h=1;return Z},layoutPositions:function Q(J,Z,$){var G=this.nodes().filter(function(j){return!j.isParent()}),F=this.cy(),U=Z.eles,K=function j(D){return D.id()},M=Z9($,K);J.emit({type:"layoutstart",layout:J}),J.animations=[];var q=function j(D,k,C){var E={x:k.x1+k.w/2,y:k.y1+k.h/2},S={x:(C.x-E.x)*D,y:(C.y-E.y)*D};return{x:E.x+S.x,y:E.y+S.y}},L=Z.spacingFactor&&Z.spacingFactor!==1,z=function j(){if(!L)return null;var D=L8();for(var k=0;k<G.length;k++){var C=G[k],E=M(C,k);bK(D,E.x,E.y)}return D},A=z(),V=Z9(function(j,D){var k=M(j,D);if(L){var C=Math.abs(Z.spacingFactor);k=q(C,A,k)}if(Z.transform!=null)k=Z.transform(j,k);return k},K);if(Z.animate){for(var R=0;R<G.length;R++){var Y=G[R],X=V(Y,R),B=Z.animateFilter==null||Z.animateFilter(Y,R);if(B){var O=Y.animation({position:X,duration:Z.animationDuration,easing:Z.animationEasing});J.animations.push(O)}else Y.position(X)}if(Z.fit){var N=F.animation({fit:{boundingBox:U.boundingBoxAt(V),padding:Z.padding},duration:Z.animationDuration,easing:Z.animationEasing});J.animations.push(N)}else if(Z.zoom!==void 0&&Z.pan!==void 0){var H=F.animation({zoom:Z.zoom,pan:Z.pan,duration:Z.animationDuration,easing:Z.animationEasing});J.animations.push(H)}J.animations.forEach(function(j){return j.play()}),J.one("layoutready",Z.ready),J.emit({type:"layoutready",layout:J}),vJ.all(J.animations.map(function(j){return j.promise()})).then(function(){J.one("layoutstop",Z.stop),J.emit({type:"layoutstop",layout:J})})}else{if(G.positions(V),Z.fit)F.fit(Z.eles,Z.padding);if(Z.zoom!=null)F.zoom(Z.zoom);if(Z.pan)F.pan(Z.pan);J.one("layoutready",Z.ready),J.emit({type:"layoutready",layout:J}),J.one("layoutstop",Z.stop),J.emit({type:"layoutstop",layout:J})}return this},layout:function Q(J){var Z=this.cy();return Z.makeLayout(V0({},J,{eles:this}))}};c9.createLayout=c9.makeLayout=c9.layout;var s0={recalculateRenderedStyle:function Q(J){var Z=this.cy(),$=Z.renderer(),G=Z.styleEnabled();if($&&G)$.recalculateRenderedStyle(this,J);return this},dirtyStyleCache:function Q(){var J=this.cy(),Z=function G(F){return F._private.styleCache=null};if(J.hasCompoundNodes()){var $=this.spawnSelf().merge(this.descendants()).merge(this.parents());$.merge($.connectedEdges()),$.forEach(Z)}else this.forEach(function(G){Z(G),G.connectedEdges().forEach(Z)});return this},updateStyle:function Q(J){var Z=this._private.cy;if(!Z.styleEnabled())return this;if(Z.batching()){var $=Z._private.batchStyleEles;return $.merge(this),this}var G=Z.hasCompoundNodes(),F=this;if(J=J||J===void 0?!0:!1,G)F=this.spawnSelf().merge(this.descendants()).merge(this.parents());var U=F;if(J)U.emitAndNotify("style");else U.emit("style");return F.forEach(function(K){return K._private.styleDirty=!0}),this},cleanStyle:function Q(){var J=this.cy();if(!J.styleEnabled())return;for(var Z=0;Z<this.length;Z++){var $=this[Z];if($._private.styleDirty)$._private.styleDirty=!1,J.style().apply($)}},parsedStyle:function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,$=this[0],G=$.cy();if(!G.styleEnabled())return;if($){this.cleanStyle();var F=$._private.style[J];if(F!=null)return F;else if(Z)return G.style().getDefaultProperty(J);else return null}},numericStyle:function Q(J){var Z=this[0];if(!Z.cy().styleEnabled())return;if(Z){var $=Z.pstyle(J);return $.pfValue!==void 0?$.pfValue:$.value}},numericStyleUnits:function Q(J){var Z=this[0];if(!Z.cy().styleEnabled())return;if(Z)return Z.pstyle(J).units},renderedStyle:function Q(J){var Z=this.cy();if(!Z.styleEnabled())return this;var $=this[0];if($)return Z.style().getRenderedStyle($,J)},style:function Q(J,Z){var $=this.cy();if(!$.styleEnabled())return this;var G=!1,F=$.style();if(D0(J)){var U=J;F.applyBypass(this,U,G),this.emitAndNotify("style")}else if(R0(J))if(Z===void 0){var K=this[0];if(K)return F.getStylePropertyValue(K,J);else return}else F.applyBypass(this,J,Z,G),this.emitAndNotify("style");else if(J===void 0){var M=this[0];if(M)return F.getRawStyle(M);else return}return this},removeStyle:function Q(J){var Z=this.cy();if(!Z.styleEnabled())return this;var $=!1,G=Z.style(),F=this;if(J===void 0)for(var U=0;U<F.length;U++){var K=F[U];G.removeAllBypasses(K,$)}else{J=J.split(/\s+/);for(var M=0;M<F.length;M++){var q=F[M];G.removeBypasses(q,J,$)}}return this.emitAndNotify("style"),this},show:function Q(){return this.css("display","element"),this},hide:function Q(){return this.css("display","none"),this},effectiveOpacity:function Q(){var J=this.cy();if(!J.styleEnabled())return 1;var Z=J.hasCompoundNodes(),$=this[0];if($){var G=$._private,F=$.pstyle("opacity").value;if(!Z)return F;var U=!G.data.parent?null:$.parents();if(U)for(var K=0;K<U.length;K++){var M=U[K],q=M.pstyle("opacity").value;F=q*F}return F}},transparent:function Q(){var J=this.cy();if(!J.styleEnabled())return!1;var Z=this[0],$=Z.cy().hasCompoundNodes();if(Z)if(!$)return Z.pstyle("opacity").value===0;else return Z.effectiveOpacity()===0},backgrounding:function Q(){var J=this.cy();if(!J.styleEnabled())return!1;var Z=this[0];return Z._private.backgrounding?!0:!1}},bJ=z6("eleTakesUpSpace",function(Q){return Q.pstyle("display").value==="element"&&Q.width()!==0&&(Q.isNode()?Q.height()!==0:!0)});s0.takesUpSpace=A6("takesUpSpace",z7({ok:bJ}));var DM=z6("eleInteractive",function(Q){return Q.pstyle("events").value==="yes"&&Q.pstyle("visibility").value==="visible"&&bJ(Q)}),CM=z6("parentInteractive",function(Q){return Q.pstyle("visibility").value==="visible"&&bJ(Q)});s0.interactive=A6("interactive",z7({ok:DM,parentOk:CM,edgeOkViaNode:bJ}));s0.noninteractive=function(){var Q=this[0];if(Q)return!Q.interactive()};var SM=z6("eleVisible",function(Q){return Q.pstyle("visibility").value==="visible"&&Q.pstyle("opacity").pfValue!==0&&bJ(Q)}),IM=bJ;s0.visible=A6("visible",z7({ok:SM,edgeOkViaNode:IM}));s0.hidden=function(){var Q=this[0];if(Q)return!Q.visible()};s0.isBundledBezier=A6("isBundledBezier",function(){if(!this.cy().styleEnabled())return!1;return!this.removed()&&this.pstyle("curve-style").value==="bezier"&&this.takesUpSpace()});s0.bypass=s0.css=s0.style;s0.renderedCss=s0.renderedStyle;s0.removeBypass=s0.removeCss=s0.removeStyle;s0.pstyle=s0.parsedStyle;var c8={};_J({field:"locked",overrideField:function Q(J){return J.cy().autolock()?!0:void 0},on:"lock",off:"unlock"});_J({field:"grabbable",overrideField:function Q(J){return J.cy().autoungrabify()||J.pannable()?!1:void 0},on:"grabify",off:"ungrabify"});_J({field:"selected",ableField:"selectable",overrideAble:function Q(J){return J.cy().autounselectify()?!1:void 0},on:"select",off:"unselect"});_J({field:"selectable",overrideField:function Q(J){return J.cy().autounselectify()?!1:void 0},on:"selectify",off:"unselectify"});c8.deselect=c8.unselect;c8.grabbed=function(){var Q=this[0];if(Q)return Q._private.grabbed};_J({field:"active",on:"activate",off:"unactivate"});_J({field:"pannable",on:"panify",off:"unpanify"});c8.inactive=function(){var Q=this[0];if(Q)return!Q._private.active};var Q8={},jZ=function Q(J){return function Z($){var G=this,F=[];for(var U=0;U<G.length;U++){var K=G[U];if(!K.isNode())continue;var M=!1,q=K.connectedEdges();for(var L=0;L<q.length;L++){var z=q[L],A=z.source(),V=z.target();if(J.noIncomingEdges&&V===K&&A!==K||J.noOutgoingEdges&&A===K&&V!==K){M=!0;break}}if(!M)F.push(K)}return this.spawn(F,!0).filter($)}},DZ=function Q(J){return function(Z){var $=this,G=[];for(var F=0;F<$.length;F++){var U=$[F];if(!U.isNode())continue;var K=U.connectedEdges();for(var M=0;M<K.length;M++){var q=K[M],L=q.source(),z=q.target();if(J.outgoing&&L===U)G.push(q),G.push(z);else if(J.incoming&&z===U)G.push(q),G.push(L)}}return this.spawn(G,!0).filter(Z)}},CZ=function Q(J){return function(Z){var $=this,G=[],F={};for(;;){var U=J.outgoing?$.outgoers():$.incomers();if(U.length===0)break;var K=!1;for(var M=0;M<U.length;M++){var q=U[M],L=q.id();if(!F[L])F[L]=!0,G.push(q),K=!0}if(!K)break;$=U}return this.spawn(G,!0).filter(Z)}};Q8.clearTraversalCache=function(){for(var Q=0;Q<this.length;Q++)this[Q]._private.traversalCache=null};V0(Q8,{roots:jZ({noIncomingEdges:!0}),leaves:jZ({noOutgoingEdges:!0}),outgoers:Y8(DZ({outgoing:!0}),"outgoers"),successors:CZ({outgoing:!0}),incomers:Y8(DZ({incoming:!0}),"incomers"),predecessors:CZ({incoming:!0})});V0(Q8,{neighborhood:Y8(function(Q){var J=[],Z=this.nodes();for(var $=0;$<Z.length;$++){var G=Z[$],F=G.connectedEdges();for(var U=0;U<F.length;U++){var K=F[U],M=K.source(),q=K.target(),L=G===M?q:M;if(L.length>0)J.push(L[0]);J.push(K[0])}}return this.spawn(J,!0).filter(Q)},"neighborhood"),closedNeighborhood:function Q(J){return this.neighborhood().add(this).filter(J)},openNeighborhood:function Q(J){return this.neighborhood(J)}});Q8.neighbourhood=Q8.neighborhood;Q8.closedNeighbourhood=Q8.closedNeighborhood;Q8.openNeighbourhood=Q8.openNeighborhood;V0(Q8,{source:Y8(function Q(J){var Z=this[0],$;if(Z)$=Z._private.source||Z.cy().collection();return $&&J?$.filter(J):$},"source"),target:Y8(function Q(J){var Z=this[0],$;if(Z)$=Z._private.target||Z.cy().collection();return $&&J?$.filter(J):$},"target"),sources:SZ({attr:"source"}),targets:SZ({attr:"target"})});V0(Q8,{edgesWith:Y8(IZ(),"edgesWith"),edgesTo:Y8(IZ({thisIsSrc:!0}),"edgesTo")});V0(Q8,{connectedEdges:Y8(function(Q){var J=[],Z=this;for(var $=0;$<Z.length;$++){var G=Z[$];if(!G.isNode())continue;var F=G._private.edges;for(var U=0;U<F.length;U++){var K=F[U];J.push(K)}}return this.spawn(J,!0).filter(Q)},"connectedEdges"),connectedNodes:Y8(function(Q){var J=[],Z=this;for(var $=0;$<Z.length;$++){var G=Z[$];if(!G.isEdge())continue;J.push(G.source()[0]),J.push(G.target()[0])}return this.spawn(J,!0).filter(Q)},"connectedNodes"),parallelEdges:Y8(wZ(),"parallelEdges"),codirectedEdges:Y8(wZ({codirected:!0}),"codirectedEdges")});V0(Q8,{components:function Q(J){var Z=this,$=Z.cy(),G=$.collection(),F=J==null?Z.nodes():J.nodes(),U=[];if(J!=null&&F.empty())F=J.sources();var K=function q(L,z){G.merge(L),F.unmerge(L),z.merge(L)};if(F.empty())return Z.spawn();var M=function q(){var L=$.collection();U.push(L);var z=F[0];K(z,L),Z.bfs({directed:!1,roots:z,visit:function A(V){return K(V,L)}}),L.forEach(function(A){A.connectedEdges().forEach(function(V){if(Z.has(V)&&L.has(V.source())&&L.has(V.target()))L.merge(V)})})};do M();while(F.length>0);return U},component:function Q(){var J=this[0];return J.cy().mutableElements().components(J)[0]}});Q8.componentsOf=Q8.components;var r0=function Q(J,Z){var $=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,G=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!1;if(J===void 0){h0("A collection must have a reference to the core");return}var F=new D8,U=!1;if(!Z)Z=[];else if(Z.length>0&&D0(Z[0])&&!Y9(Z[0])){U=!0;var K=[],M=new PJ;for(var q=0,L=Z.length;q<L;q++){var z=Z[q];if(z.data==null)z.data={};var A=z.data;if(A.id==null)A.id=L$();else if(J.hasElementWithId(A.id)||M.has(A.id))continue;var V=new U6(J,z,!1);K.push(V),M.add(A.id)}Z=K}this.length=0;for(var R=0,Y=Z.length;R<Y;R++){var X=Z[R][0];if(X==null)continue;var B=X._private.data.id;if(!$||!F.has(B)){if($)F.set(B,{index:this.length,ele:X});this[this.length]=X,this.length++}}if(this._private={eles:this,cy:J,get map(){if(this.lazyMap==null)this.rebuildMap();return this.lazyMap},set map(O){this.lazyMap=O},rebuildMap:function O(){var N=this.lazyMap=new D8,H=this.eles;for(var j=0;j<H.length;j++){var D=H[j];N.set(D.id(),{index:j,ele:D})}}},$)this._private.map=F;if(U&&!G)this.restore()},u0=U6.prototype=r0.prototype=Object.create(Array.prototype);u0.instanceString=function(){return"collection"};u0.spawn=function(Q,J){return new r0(this.cy(),Q,J)};u0.spawnSelf=function(){return this.spawn(this)};u0.cy=function(){return this._private.cy};u0.renderer=function(){return this._private.cy.renderer()};u0.element=function(){return this[0]};u0.collection=function(){if(tZ(this))return this;else return new r0(this._private.cy,[this])};u0.unique=function(){return new r0(this._private.cy,this,!0)};u0.hasElementWithId=function(Q){return Q=""+Q,this._private.map.has(Q)};u0.getElementById=function(Q){Q=""+Q;var J=this._private.cy,Z=this._private.map.get(Q);return Z?Z.ele:new r0(J)};u0.$id=u0.getElementById;u0.poolIndex=function(){var Q=this._private.cy,J=Q._private.elements,Z=this[0]._private.data.id;return J._private.map.get(Z).index};u0.indexOf=function(Q){var J=Q[0]._private.data.id;return this._private.map.get(J).index};u0.indexOfId=function(Q){return Q=""+Q,this._private.map.get(Q).index};u0.json=function(Q){var J=this.element(),Z=this.cy();if(J==null&&Q)return this;if(J==null)return;var $=J._private;if(D0(Q)){if(Z.startBatch(),Q.data){J.data(Q.data);var G=$.data;if(J.isEdge()){var F=!1,U={},K=Q.data.source,M=Q.data.target;if(K!=null&&K!=G.source)U.source=""+K,F=!0;if(M!=null&&M!=G.target)U.target=""+M,F=!0;if(F)J=J.move(U)}else{var q="parent"in Q.data,L=Q.data.parent;if(q&&(L!=null||G.parent!=null)&&L!=G.parent){if(L===void 0)L=null;if(L!=null)L=""+L;J=J.move({parent:L})}}}if(Q.position)J.position(Q.position);var z=function R(Y,X,B){var O=Q[Y];if(O!=null&&O!==$[Y])if(O)J[X]();else J[B]()};if(z("removed","remove","restore"),z("selected","select","unselect"),z("selectable","selectify","unselectify"),z("locked","lock","unlock"),z("grabbable","grabify","ungrabify"),z("pannable","panify","unpanify"),Q.classes!=null)J.classes(Q.classes);return Z.endBatch(),this}else if(Q===void 0){var A={data:j8($.data),position:j8($.position),group:$.group,removed:$.removed,selected:$.selected,selectable:$.selectable,locked:$.locked,grabbable:$.grabbable,pannable:$.pannable,classes:null};A.classes="";var V=0;return $.classes.forEach(function(R){return A.classes+=V++===0?R:" "+R}),A}};u0.jsons=function(){var Q=[];for(var J=0;J<this.length;J++){var Z=this[J],$=Z.json();Q.push($)}return Q};u0.clone=function(){var Q=this.cy(),J=[];for(var Z=0;Z<this.length;Z++){var $=this[Z],G=$.json(),F=new U6(Q,G,!1);J.push(F)}return new r0(Q,J)};u0.copy=u0.clone;u0.restore=function(){var Q=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,Z=this,$=Z.cy(),G=$._private,F=[],U=[],K;for(var M=0,q=Z.length;M<q;M++){var L=Z[M];if(J&&!L.removed())continue;if(L.isNode())F.push(L);else U.push(L)}K=F.concat(U);var z,A=function i(){K.splice(z,1),z--};for(z=0;z<K.length;z++){var V=K[z],R=V._private,Y=R.data;if(V.clearTraversalCache(),!J&&!R.removed);else if(Y.id===void 0)Y.id=L$();else if($0(Y.id))Y.id=""+Y.id;else if(d8(Y.id)||!R0(Y.id)){h0("Can not create element with invalid string ID `"+Y.id+"`"),A();continue}else if($.hasElementWithId(Y.id)){h0("Can not create second element with ID `"+Y.id+"`"),A();continue}var X=Y.id;if(V.isNode()){var B=R.position;if(B.x==null)B.x=0;if(B.y==null)B.y=0}if(V.isEdge()){var O=V,N=["source","target"],H=N.length,j=!1;for(var D=0;D<H;D++){var k=N[D],C=Y[k];if($0(C))C=Y[k]=""+Y[k];if(C==null||C==="")h0("Can not create edge `"+X+"` with unspecified "+k),j=!0;else if(!$.hasElementWithId(C))h0("Can not create edge `"+X+"` with nonexistant "+k+" `"+C+"`"),j=!0}if(j){A();continue}var E=$.getElementById(Y.source),S=$.getElementById(Y.target);if(E.same(S))E._private.edges.push(O);else E._private.edges.push(O),S._private.edges.push(O);O._private.source=E,O._private.target=S}if(R.map=new D8,R.map.set(X,{ele:V,index:0}),R.removed=!1,J)$.addToPool(V)}for(var w=0;w<F.length;w++){var T=F[w],v=T._private.data;if($0(v.parent))v.parent=""+v.parent;var I=v.parent,_=I!=null;if(_||T._private.parent){var b=T._private.parent?$.collection().merge(T._private.parent):$.getElementById(I);if(b.empty())v.parent=void 0;else if(b[0].removed())P0("Node added with missing parent, reference to parent removed"),v.parent=void 0,T._private.parent=null;else{var P=!1,u=b;while(!u.empty()){if(T.same(u)){P=!0,v.parent=void 0;break}u=u.parent()}if(!P)b[0]._private.children.push(T),T._private.parent=b[0],G.hasCompoundNodes=!0}}}if(K.length>0){var h=K.length===Z.length?Z:new r0($,K);for(var p=0;p<h.length;p++){var m=h[p];if(m.isNode())continue;m.parallelEdges().clearTraversalCache(),m.source().clearTraversalCache(),m.target().clearTraversalCache()}var c;if(G.hasCompoundNodes)c=$.collection().merge(h).merge(h.connectedNodes()).merge(h.parent());else c=h;if(c.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(Q),Q)h.emitAndNotify("add");else if(J)h.emit("add")}return Z};u0.removed=function(){var Q=this[0];return Q&&Q._private.removed};u0.inside=function(){var Q=this[0];return Q&&!Q._private.removed};u0.remove=function(){var Q=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!0,J=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,Z=this,$=[],G={},F=Z._private.cy;function U(I){var _=I._private.edges;for(var b=0;b<_.length;b++)M(_[b])}function K(I){var _=I._private.children;for(var b=0;b<_.length;b++)M(_[b])}function M(I){var _=G[I.id()];if(J&&I.removed()||_)return;else G[I.id()]=!0;if(I.isNode())$.push(I),U(I),K(I);else $.unshift(I)}for(var q=0,L=Z.length;q<L;q++){var z=Z[q];M(z)}function A(I,_){var b=I._private.edges;p8(b,_),I.clearTraversalCache()}function V(I){I.clearTraversalCache()}var R=[];R.ids={};function Y(I,_){_=_[0],I=I[0];var b=I._private.children,P=I.id();if(p8(b,_),_._private.parent=null,!R.ids[P])R.ids[P]=!0,R.push(I)}if(Z.dirtyCompoundBoundsCache(),J)F.removeFromPool($);for(var X=0;X<$.length;X++){var B=$[X];if(B.isEdge()){var O=B.source()[0],N=B.target()[0];A(O,B),A(N,B);var H=B.parallelEdges();for(var j=0;j<H.length;j++){var D=H[j];if(V(D),D.isBundledBezier())D.dirtyBoundingBoxCache()}}else{var k=B.parent();if(k.length!==0)Y(k,B)}if(J)B._private.removed=!0}var C=F._private.elements;F._private.hasCompoundNodes=!1;for(var E=0;E<C.length;E++){var S=C[E];if(S.isParent()){F._private.hasCompoundNodes=!0;break}}var w=new r0(this.cy(),$);if(w.size()>0){if(Q)w.emitAndNotify("remove");else if(J)w.emit("remove")}for(var T=0;T<R.length;T++){var v=R[T];if(!J||!v.removed())v.updateStyle()}return w};u0.move=function(Q){var J=this._private.cy,Z=this,$=!1,G=!1,F=function V(R){return R==null?R:""+R};if(Q.source!==void 0||Q.target!==void 0){var U=F(Q.source),K=F(Q.target),M=U!=null&&J.hasElementWithId(U),q=K!=null&&J.hasElementWithId(K);if(M||q)J.batch(function(){Z.remove($,G),Z.emitAndNotify("moveout");for(var V=0;V<Z.length;V++){var R=Z[V],Y=R._private.data;if(R.isEdge()){if(M)Y.source=U;if(q)Y.target=K}}Z.restore($,G)}),Z.emitAndNotify("move")}else if(Q.parent!==void 0){var L=F(Q.parent),z=L===null||J.hasElementWithId(L);if(z){var A=L===null?void 0:L;J.batch(function(){var V=Z.remove($,G);V.emitAndNotify("moveout");for(var R=0;R<Z.length;R++){var Y=Z[R],X=Y._private.data;if(Y.isNode())X.parent=A}V.restore($,G)}),Z.emitAndNotify("move")}}return this};[W$,yq,x9,x8,wJ,ZM,M6,OM,x$,c$,WM,e9,c9,s0,c8,Q8].forEach(function(Q){V0(u0,Q)});var wM={add:function Q(J){var Z,$=this;if(z8(J)){var G=J;if(G._private.cy===$)Z=G.restore();else{var F=[];for(var U=0;U<G.length;U++){var K=G[U];F.push(K.json())}Z=new r0($,F)}}else if(b0(J)){var M=J;Z=new r0($,M)}else if(D0(J)&&(b0(J.nodes)||b0(J.edges))){var q=J,L=[],z=["nodes","edges"];for(var A=0,V=z.length;A<V;A++){var R=z[A],Y=q[R];if(b0(Y))for(var X=0,B=Y.length;X<B;X++){var O=V0({group:R},Y[X]);L.push(O)}}Z=new r0($,L)}else{var N=J;Z=new U6($,N).collection()}return Z},remove:function Q(J){if(z8(J));else if(R0(J)){var Z=J;J=this.$(Z)}return J.remove()}};/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License *//*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */var vM=function(){function Q($){return-$.tension*$.x-$.friction*$.v}function J($,G,F){var U={x:$.x+F.dx*G,v:$.v+F.dv*G,tension:$.tension,friction:$.friction};return{dx:U.v,dv:Q(U)}}function Z($,G){var F={dx:$.v,dv:Q($)},U=J($,G*0.5,F),K=J($,G*0.5,U),M=J($,G,K),q=0.16666666666666666*(F.dx+2*(U.dx+K.dx)+M.dx),L=0.16666666666666666*(F.dv+2*(U.dv+K.dv)+M.dv);return $.x=$.x+q*G,$.v=$.v+L*G,$}return function $(G,F,U){var K={x:-1,v:0,tension:null,friction:null},M=[0],q=0,L=0.0001,z=0.016,A,V,R;if(G=parseFloat(G)||500,F=parseFloat(F)||20,U=U||null,K.tension=G,K.friction=F,A=U!==null,A)q=$(G,F),V=q/U*z;else V=z;for(;;)if(R=Z(R||K,V),M.push(1+R.x),q+=16,!(Math.abs(R.x)>L&&Math.abs(R.v)>L))break;return!A?q:function(Y){return M[Y*(M.length-1)|0]}}}(),_0=function Q(J,Z,$,G){var F=PM(J,Z,$,G);return function(U,K,M){return U+(K-U)*F(M)}},d9={linear:function Q(J,Z,$){return J+(Z-J)*$},ease:_0(0.25,0.1,0.25,1),"ease-in":_0(0.42,0,1,1),"ease-out":_0(0,0,0.58,1),"ease-in-out":_0(0.42,0,0.58,1),"ease-in-sine":_0(0.47,0,0.745,0.715),"ease-out-sine":_0(0.39,0.575,0.565,1),"ease-in-out-sine":_0(0.445,0.05,0.55,0.95),"ease-in-quad":_0(0.55,0.085,0.68,0.53),"ease-out-quad":_0(0.25,0.46,0.45,0.94),"ease-in-out-quad":_0(0.455,0.03,0.515,0.955),"ease-in-cubic":_0(0.55,0.055,0.675,0.19),"ease-out-cubic":_0(0.215,0.61,0.355,1),"ease-in-out-cubic":_0(0.645,0.045,0.355,1),"ease-in-quart":_0(0.895,0.03,0.685,0.22),"ease-out-quart":_0(0.165,0.84,0.44,1),"ease-in-out-quart":_0(0.77,0,0.175,1),"ease-in-quint":_0(0.755,0.05,0.855,0.06),"ease-out-quint":_0(0.23,1,0.32,1),"ease-in-out-quint":_0(0.86,0,0.07,1),"ease-in-expo":_0(0.95,0.05,0.795,0.035),"ease-out-expo":_0(0.19,1,0.22,1),"ease-in-out-expo":_0(1,0,0,1),"ease-in-circ":_0(0.6,0.04,0.98,0.335),"ease-out-circ":_0(0.075,0.82,0.165,1),"ease-in-out-circ":_0(0.785,0.135,0.15,0.86),spring:function Q(J,Z,$){if($===0)return d9.linear;var G=vM(J,Z,$);return function(F,U,K){return F+(U-F)*G(K)}},"cubic-bezier":_0},uM={animate:w0.animate(),animation:w0.animation(),animated:w0.animated(),clearQueue:w0.clearQueue(),delay:w0.delay(),delayAnimation:w0.delayAnimation(),stop:w0.stop(),addToAnimationPool:function Q(J){var Z=this;if(!Z.styleEnabled())return;Z._private.aniEles.merge(J)},stopAnimationLoop:function Q(){this._private.animationsRunning=!1},startAnimationLoop:function Q(){var J=this;if(J._private.animationsRunning=!0,!J.styleEnabled())return;function Z(){if(!J._private.animationsRunning)return;n9(function G(F){bZ(F,J),Z()})}var $=J.renderer();if($&&$.beforeRender)$.beforeRender(function G(F,U){bZ(U,J)},$.beforeRenderPriorities.animations);else Z()}},mM={qualifierCompare:function Q(J,Z){if(J==null||Z==null)return J==null&&Z==null;else return J.sameText(Z)},eventMatches:function Q(J,Z,$){var G=Z.qualifier;if(G!=null)return J!==$.target&&Y9($.target)&&G.matches($.target);return!0},addEventFields:function Q(J,Z){Z.cy=J,Z.target=J},callbackContext:function Q(J,Z,$){return Z.qualifier!=null?$.target:J}},f9=function Q(J){if(R0(J))return new l8(J);else return J},l$={createEmitter:function Q(){var J=this._private;if(!J.emitter)J.emitter=new L6(mM,this);return this},emitter:function Q(){return this._private.emitter},on:function Q(J,Z,$){return this.emitter().on(J,f9(Z),$),this},removeListener:function Q(J,Z,$){return this.emitter().removeListener(J,f9(Z),$),this},removeAllListeners:function Q(){return this.emitter().removeAllListeners(),this},one:function Q(J,Z,$){return this.emitter().one(J,f9(Z),$),this},once:function Q(J,Z,$){return this.emitter().one(J,f9(Z),$),this},emit:function Q(J,Z){return this.emitter().emit(J,Z),this},emitAndNotify:function Q(J,Z){return this.emit(J),this.notify(J,Z),this}};w0.eventAliasesOn(l$);var i6={png:function Q(J){var Z=this._private.renderer;return J=J||{},Z.png(J)},jpg:function Q(J){var Z=this._private.renderer;return J=J||{},J.bg=J.bg||"#fff",Z.jpg(J)}};i6.jpeg=i6.jpg;var p9={layout:function Q(J){var Z=this;if(J==null){h0("Layout options must be specified to make a layout");return}if(J.name==null){h0("A `name` must be specified to make a layout");return}var $=J.name,G=Z.extension("layout",$);if(G==null){h0("No such layout `"+$+"` found.  Did you forget to import it and `cytoscape.use()` it?");return}var F;if(R0(J.eles))F=Z.$(J.eles);else F=J.eles!=null?J.eles:Z.$();var U=new G(V0({},J,{cy:Z,eles:F}));return U}};p9.createLayout=p9.makeLayout=p9.layout;var fM={notify:function Q(J,Z){var $=this._private;if(this.batching()){$.batchNotifications=$.batchNotifications||{};var G=$.batchNotifications[J]=$.batchNotifications[J]||this.collection();if(Z!=null)G.merge(Z);return}if(!$.notificationsEnabled)return;var F=this.renderer();if(this.destroyed()||!F)return;F.notify(J,Z)},notifications:function Q(J){var Z=this._private;if(J===void 0)return Z.notificationsEnabled;else Z.notificationsEnabled=J?!0:!1;return this},noNotifications:function Q(J){this.notifications(!1),J(),this.notifications(!0)},batching:function Q(){return this._private.batchCount>0},startBatch:function Q(){var J=this._private;if(J.batchCount==null)J.batchCount=0;if(J.batchCount===0)J.batchStyleEles=this.collection(),J.batchNotifications={};return J.batchCount++,this},endBatch:function Q(){var J=this._private;if(J.batchCount===0)return this;if(J.batchCount--,J.batchCount===0){J.batchStyleEles.updateStyle();var Z=this.renderer();Object.keys(J.batchNotifications).forEach(function($){var G=J.batchNotifications[$];if(G.empty())Z.notify($);else Z.notify($,G)})}return this},batch:function Q(J){return this.startBatch(),J(),this.endBatch(),this},batchData:function Q(J){var Z=this;return this.batch(function(){var $=Object.keys(J);for(var G=0;G<$.length;G++){var F=$[G],U=J[F],K=Z.getElementById(F);K.data(U)}})}},gM=o0({hideEdgesOnViewport:!1,textureOnViewport:!1,motionBlur:!1,motionBlurOpacity:0.05,pixelRatio:void 0,desktopTapThreshold:4,touchTapThreshold:8,wheelSensitivity:1,debug:!1,showFps:!1}),a6={renderTo:function Q(J,Z,$,G){var F=this._private.renderer;return F.renderTo(J,Z,$,G),this},renderer:function Q(){return this._private.renderer},forceRender:function Q(){return this.notify("draw"),this},resize:function Q(){return this.invalidateSize(),this.emitAndNotify("resize"),this},initRenderer:function Q(J){var Z=this,$=Z.extension("renderer",J.name);if($==null){h0("Can not initialise: No such renderer `".concat(J.name,"` found. Did you forget to import it and `cytoscape.use()` it?"));return}if(J.wheelSensitivity!==void 0)P0("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");var G=gM(J);G.cy=Z,Z._private.renderer=new $(G),this.notify("init")},destroyRenderer:function Q(){var J=this;J.notify("destroy");var Z=J.container();if(Z){Z._cyreg=null;while(Z.childNodes.length>0)Z.removeChild(Z.childNodes[0])}J._private.renderer=null,J.mutableElements().forEach(function($){var G=$._private;G.rscratch={},G.rstyle={},G.animation.current=[],G.animation.queue=[]})},onRender:function Q(J){return this.on("render",J)},offRender:function Q(J){return this.off("render",J)}};a6.invalidateDimensions=a6.resize;var l9={collection:function Q(J,Z){if(R0(J))return this.$(J);else if(z8(J))return J.collection();else if(b0(J)){if(!Z)Z={};return new r0(this,J,Z.unique,Z.removed)}return new r0(this)},nodes:function Q(J){var Z=this.$(function($){return $.isNode()});if(J)return Z.filter(J);return Z},edges:function Q(J){var Z=this.$(function($){return $.isEdge()});if(J)return Z.filter(J);return Z},$:function Q(J){var Z=this._private.elements;if(J)return Z.filter(J);else return Z.spawnSelf()},mutableElements:function Q(){return this._private.elements}};l9.elements=l9.filter=l9.$;var $8={},J9="t",hM="f";$8.apply=function(Q){var J=this,Z=J._private,$=Z.cy,G=$.collection();for(var F=0;F<Q.length;F++){var U=Q[F],K=J.getContextMeta(U);if(K.empty)continue;var M=J.getContextStyle(K),q=J.applyContextStyle(K,M,U);if(U._private.appliedInitStyle)J.updateTransitions(U,q.diffProps);else U._private.appliedInitStyle=!0;var L=J.updateStyleHints(U);if(L)G.push(U)}return G};$8.getPropertiesDiff=function(Q,J){var Z=this,$=Z._private.propDiffs=Z._private.propDiffs||{},G=Q+"-"+J,F=$[G];if(F)return F;var U=[],K={};for(var M=0;M<Z.length;M++){var q=Z[M],L=Q[M]===J9,z=J[M]===J9,A=L!==z,V=q.mappedProperties.length>0;if(A||z&&V){var R=void 0;if(A&&V)R=q.properties;else if(A)R=q.properties;else if(V)R=q.mappedProperties;for(var Y=0;Y<R.length;Y++){var X=R[Y],B=X.name,O=!1;for(var N=M+1;N<Z.length;N++){var H=Z[N],j=J[N]===J9;if(!j)continue;if(O=H.properties[X.name]!=null,O)break}if(!K[B]&&!O)K[B]=!0,U.push(B)}}}return $[G]=U,U};$8.getContextMeta=function(Q){var J=this,Z="",$,G=Q._private.styleCxtKey||"";for(var F=0;F<J.length;F++){var U=J[F],K=U.selector&&U.selector.matches(Q);if(K)Z+=J9;else Z+=hM}return $=J.getPropertiesDiff(G,Z),Q._private.styleCxtKey=Z,{key:Z,diffPropNames:$,empty:$.length===0}};$8.getContextStyle=function(Q){var J=Q.key,Z=this,$=this._private.contextStyles=this._private.contextStyles||{};if($[J])return $[J];var G={_private:{key:J}};for(var F=0;F<Z.length;F++){var U=Z[F],K=J[F]===J9;if(!K)continue;for(var M=0;M<U.properties.length;M++){var q=U.properties[M];G[q.name]=q}}return $[J]=G,G};$8.applyContextStyle=function(Q,J,Z){var $=this,G=Q.diffPropNames,F={},U=$.types;for(var K=0;K<G.length;K++){var M=G[K],q=J[M],L=Z.pstyle(M);if(!q)if(!L)continue;else if(L.bypass)q={name:M,deleteBypassed:!0};else q={name:M,delete:!0};if(L===q)continue;if(q.mapped===U.fn&&L!=null&&L.mapping!=null&&L.mapping.value===q.value){var z=L.mapping,A=z.fnValue=q.value(Z);if(A===z.prevFnValue)continue}var V=F[M]={prev:L};if($.applyParsedProperty(Z,q),V.next=Z.pstyle(M),V.next&&V.next.bypass)V.next=V.next.bypassed}return{diffProps:F}};$8.updateStyleHints=function(Q){var J=Q._private,Z=this,$=Z.propertyGroupNames,G=Z.propertyGroupKeys,F=function t(J0,K0,Y0){return Z.getPropertiesHash(J0,K0,Y0)},U=J.styleKey;if(Q.removed())return!1;var K=J.group==="nodes",M=Q._private.style;$=Object.keys(M);for(var q=0;q<G.length;q++){var L=G[q];J.styleKeys[L]=[kJ,rJ]}var z=function t(J0,K0){return J.styleKeys[K0][0]=$9(J0,J.styleKeys[K0][0])},A=function t(J0,K0){return J.styleKeys[K0][1]=G9(J0,J.styleKeys[K0][1])},V=function t(J0,K0){z(J0,K0),A(J0,K0)},R=function t(J0,K0){for(var Y0=0;Y0<J0.length;Y0++){var Q0=J0.charCodeAt(Y0);z(Q0,K0),A(Q0,K0)}},Y=2000000000,X=function t(J0){return-128<J0&&J0<128&&Math.floor(J0)!==J0?Y-(J0*1024|0):J0};for(var B=0;B<$.length;B++){var O=$[B],N=M[O];if(N==null)continue;var H=this.properties[O],j=H.type,D=H.groupKey,k=void 0;if(H.hashOverride!=null)k=H.hashOverride(Q,N);else if(N.pfValue!=null)k=N.pfValue;var C=H.enums==null?N.value:null,E=k!=null,S=C!=null,w=E||S,T=N.units;if(j.number&&w&&!j.multiple){var v=E?k:C;if(V(X(v),D),!E&&T!=null)R(T,D)}else R(N.strValue,D)}var I=[kJ,rJ];for(var _=0;_<G.length;_++){var b=G[_],P=J.styleKeys[b];I[0]=$9(P[0],I[0]),I[1]=G9(P[1],I[1])}J.styleKey=tU(I[0],I[1]);var u=J.styleKeys;J.labelDimsKey=f8(u.labelDimensions);var h=F(Q,["label"],u.labelDimensions);if(J.labelKey=f8(h),J.labelStyleKey=f8(S9(u.commonLabel,h)),!K){var p=F(Q,["source-label"],u.labelDimensions);J.sourceLabelKey=f8(p),J.sourceLabelStyleKey=f8(S9(u.commonLabel,p));var m=F(Q,["target-label"],u.labelDimensions);J.targetLabelKey=f8(m),J.targetLabelStyleKey=f8(S9(u.commonLabel,m))}if(K){var c=J.styleKeys,i=c.nodeBody,r=c.nodeBorder,a=c.nodeOutline,n=c.backgroundImage,f=c.compound,o=c.pie,e=[i,r,a,n,f,o].filter(function(t){return t!=null}).reduce(S9,[kJ,rJ]);J.nodeKey=f8(e),J.hasPie=o!=null&&o[0]!==kJ&&o[1]!==rJ}return U!==J.styleKey};$8.clearStyleHints=function(Q){var J=Q._private;J.styleCxtKey="",J.styleKeys={},J.styleKey=null,J.labelKey=null,J.labelStyleKey=null,J.sourceLabelKey=null,J.sourceLabelStyleKey=null,J.targetLabelKey=null,J.targetLabelStyleKey=null,J.nodeKey=null,J.hasPie=null};$8.applyParsedProperty=function(Q,J){var Z=this,$=J,G=Q._private.style,F,U=Z.types,K=Z.properties[$.name].type,M=$.bypass,q=G[$.name],L=q&&q.bypass,z=Q._private,A="mapping",V=function c(i){if(i==null)return null;else if(i.pfValue!=null)return i.pfValue;else return i.value},R=function c(){var i=V(q),r=V($);Z.checkTriggers(Q,$.name,i,r)};if(J.name==="curve-style"&&Q.isEdge()&&(J.value!=="bezier"&&Q.isLoop()||J.value==="haystack"&&(Q.source().isParent()||Q.target().isParent())))$=J=this.parse(J.name,"bezier",M);if($.delete)return G[$.name]=void 0,R(),!0;if($.deleteBypassed)if(!q)return R(),!0;else if(q.bypass)return q.bypassed=void 0,R(),!0;else return!1;if($.deleteBypass)if(!q)return R(),!0;else if(q.bypass)return G[$.name]=q.bypassed,R(),!0;else return!1;var Y=function c(){P0("Do not assign mappings to elements without corresponding data (i.e. ele `"+Q.id()+"` has no mapping for property `"+$.name+"` with data field `"+$.field+"`); try a `["+$.field+"]` selector to limit scope to elements with `"+$.field+"` defined")};switch($.mapped){case U.mapData:{var X=$.field.split("."),B=z.data;for(var O=0;O<X.length&&B;O++){var N=X[O];B=B[N]}if(B==null)return Y(),!1;var H;if(!$0(B))return P0("Do not use continuous mappers without specifying numeric data (i.e. `"+$.field+": "+B+"` for `"+Q.id()+"` is non-numeric)"),!1;else{var j=$.fieldMax-$.fieldMin;if(j===0)H=0;else H=(B-$.fieldMin)/j}if(H<0)H=0;else if(H>1)H=1;if(K.color){var D=$.valueMin[0],k=$.valueMax[0],C=$.valueMin[1],E=$.valueMax[1],S=$.valueMin[2],w=$.valueMax[2],T=$.valueMin[3]==null?1:$.valueMin[3],v=$.valueMax[3]==null?1:$.valueMax[3],I=[Math.round(D+(k-D)*H),Math.round(C+(E-C)*H),Math.round(S+(w-S)*H),Math.round(T+(v-T)*H)];F={bypass:$.bypass,name:$.name,value:I,strValue:"rgb("+I[0]+", "+I[1]+", "+I[2]+")"}}else if(K.number){var _=$.valueMin+($.valueMax-$.valueMin)*H;F=this.parse($.name,_,$.bypass,A)}else return!1;if(!F)return Y(),!1;F.mapping=$,$=F;break}case U.data:{var b=$.field.split("."),P=z.data;for(var u=0;u<b.length&&P;u++){var h=b[u];P=P[h]}if(P!=null)F=this.parse($.name,P,$.bypass,A);if(!F)return Y(),!1;F.mapping=$,$=F;break}case U.fn:{var p=$.value,m=$.fnValue!=null?$.fnValue:p(Q);if($.prevFnValue=m,m==null)return P0("Custom function mappers may not return null (i.e. `"+$.name+"` for ele `"+Q.id()+"` is null)"),!1;if(F=this.parse($.name,m,$.bypass,A),!F)return P0("Custom function mappers may not return invalid values for the property type (i.e. `"+$.name+"` for ele `"+Q.id()+"` is invalid)"),!1;F.mapping=j8($),$=F;break}case void 0:break;default:return!1}if(M){if(L)$.bypassed=q.bypassed;else $.bypassed=q;G[$.name]=$}else if(L)q.bypassed=$;else G[$.name]=$;return R(),!0};$8.cleanElements=function(Q,J){for(var Z=0;Z<Q.length;Z++){var $=Q[Z];if(this.clearStyleHints($),$.dirtyCompoundBoundsCache(),$.dirtyBoundingBoxCache(),!J)$._private.style={};else{var G=$._private.style,F=Object.keys(G);for(var U=0;U<F.length;U++){var K=F[U],M=G[K];if(M!=null)if(M.bypass)M.bypassed=null;else G[K]=null}}}};$8.update=function(){var Q=this._private.cy,J=Q.mutableElements();J.updateStyle()};$8.updateTransitions=function(Q,J){var Z=this,$=Q._private,G=Q.pstyle("transition-property").value,F=Q.pstyle("transition-duration").pfValue,U=Q.pstyle("transition-delay").pfValue;if(G.length>0&&F>0){var K={},M=!1;for(var q=0;q<G.length;q++){var L=G[q],z=Q.pstyle(L),A=J[L];if(!A)continue;var V=A.prev,R=V,Y=A.next!=null?A.next:z,X=!1,B=void 0,O=0.000001;if(!R)continue;if($0(R.pfValue)&&$0(Y.pfValue))X=Y.pfValue-R.pfValue,B=R.pfValue+O*X;else if($0(R.value)&&$0(Y.value))X=Y.value-R.value,B=R.value+O*X;else if(b0(R.value)&&b0(Y.value))X=R.value[0]!==Y.value[0]||R.value[1]!==Y.value[1]||R.value[2]!==Y.value[2],B=R.strValue;if(X)K[L]=Y.strValue,this.applyBypass(Q,L,B),M=!0}if(!M)return;$.transitioning=!0,new vJ(function(N){if(U>0)Q.delayAnimation(U).play().promise().then(N);else N()}).then(function(){return Q.animation({style:K,duration:F,easing:Q.pstyle("transition-timing-function").value,queue:!1}).play().promise()}).then(function(){Z.removeBypasses(Q,G),Q.emitAndNotify("style"),$.transitioning=!1})}else if($.transitioning)this.removeBypasses(Q,G),Q.emitAndNotify("style"),$.transitioning=!1};$8.checkTrigger=function(Q,J,Z,$,G,F){var U=this.properties[J],K=G(U);if(K!=null&&K(Z,$))F(U)};$8.checkZOrderTrigger=function(Q,J,Z,$){var G=this;this.checkTrigger(Q,J,Z,$,function(F){return F.triggersZOrder},function(){G._private.cy.notify("zorder",Q)})};$8.checkBoundsTrigger=function(Q,J,Z,$){this.checkTrigger(Q,J,Z,$,function(G){return G.triggersBounds},function(G){if(Q.dirtyCompoundBoundsCache(),Q.dirtyBoundingBoxCache(),G.triggersBoundsOfParallelBeziers&&J==="curve-style"&&(Z==="bezier"||$==="bezier"))Q.parallelEdges().forEach(function(F){if(F.isBundledBezier())F.dirtyBoundingBoxCache()});if(G.triggersBoundsOfConnectedEdges&&J==="display"&&(Z==="none"||$==="none"))Q.connectedEdges().forEach(function(F){F.dirtyBoundingBoxCache()})})};$8.checkTriggers=function(Q,J,Z,$){Q.dirtyStyleCache(),this.checkZOrderTrigger(Q,J,Z,$),this.checkBoundsTrigger(Q,J,Z,$)};var O9={};O9.applyBypass=function(Q,J,Z,$){var G=this,F=[],U=!0;if(J==="*"||J==="**"){if(Z!==void 0)for(var K=0;K<G.properties.length;K++){var M=G.properties[K],q=M.name,L=this.parse(q,Z,!0);if(L)F.push(L)}}else if(R0(J)){var z=this.parse(J,Z,!0);if(z)F.push(z)}else if(D0(J)){var A=J;$=Z;var V=Object.keys(A);for(var R=0;R<V.length;R++){var Y=V[R],X=A[Y];if(X===void 0)X=A[F6(Y)];if(X!==void 0){var B=this.parse(Y,X,!0);if(B)F.push(B)}}}else return!1;if(F.length===0)return!1;var O=!1;for(var N=0;N<Q.length;N++){var H=Q[N],j={},D=void 0;for(var k=0;k<F.length;k++){var C=F[k];if($){var E=H.pstyle(C.name);D=j[C.name]={prev:E}}if(O=this.applyParsedProperty(H,j8(C))||O,$)D.next=H.pstyle(C.name)}if(O)this.updateStyleHints(H);if($)this.updateTransitions(H,j,U)}return O};O9.overrideBypass=function(Q,J,Z){J=Q7(J);for(var $=0;$<Q.length;$++){var G=Q[$],F=G._private.style[J],U=this.properties[J].type,K=U.color,M=U.mutiple,q=!F?null:F.pfValue!=null?F.pfValue:F.value;if(!F||!F.bypass)this.applyBypass(G,J,Z);else{if(F.value=Z,F.pfValue!=null)F.pfValue=Z;if(K)F.strValue="rgb("+Z.join(",")+")";else if(M)F.strValue=Z.join(" ");else F.strValue=""+Z;this.updateStyleHints(G)}this.checkTriggers(G,J,q,Z)}};O9.removeAllBypasses=function(Q,J){return this.removeBypasses(Q,this.propertyNames,J)};O9.removeBypasses=function(Q,J,Z){var $=!0;for(var G=0;G<Q.length;G++){var F=Q[G],U={};for(var K=0;K<J.length;K++){var M=J[K],q=this.properties[M],L=F.pstyle(q.name);if(!L||!L.bypass)continue;var z="",A=this.parse(M,z,!0),V=U[q.name]={prev:L};this.applyParsedProperty(F,A),V.next=F.pstyle(q.name)}if(this.updateStyleHints(F),Z)this.updateTransitions(F,U,$)}};var A7={};A7.getEmSizeInPixels=function(){var Q=this.containerCss("font-size");if(Q!=null)return parseFloat(Q);else return 1};A7.containerCss=function(Q){var J=this._private.cy,Z=J.container(),$=J.window();if($&&Z&&$.getComputedStyle)return $.getComputedStyle(Z).getPropertyValue(Q)};var C8={};C8.getRenderedStyle=function(Q,J){if(J)return this.getStylePropertyValue(Q,J,!0);else return this.getRawStyle(Q,!0)};C8.getRawStyle=function(Q,J){var Z=this;if(Q=Q[0],Q){var $={};for(var G=0;G<Z.properties.length;G++){var F=Z.properties[G],U=Z.getStylePropertyValue(Q,F.name,J);if(U!=null)$[F.name]=U,$[F6(F.name)]=U}return $}};C8.getIndexedStyle=function(Q,J,Z,$){var G=Q.pstyle(J)[Z][$];return G!=null?G:Q.cy().style().getDefaultProperty(J)[Z][0]};C8.getStylePropertyValue=function(Q,J,Z){var $=this;if(Q=Q[0],Q){var G=$.properties[J];if(G.alias)G=G.pointsTo;var F=G.type,U=Q.pstyle(G.name);if(U){var{value:K,units:M,strValue:q}=U;if(Z&&F.number&&K!=null&&$0(K)){var L=Q.cy().zoom(),z=function Y(X){return X*L},A=function Y(X,B){return z(X)+B},V=b0(K),R=V?M.every(function(Y){return Y!=null}):M!=null;if(R)if(V)return K.map(function(Y,X){return A(Y,M[X])}).join(" ");else return A(K,M);else if(V)return K.map(function(Y){return R0(Y)?Y:""+z(Y)}).join(" ");else return""+z(K)}else if(q!=null)return q}return null}};C8.getAnimationStartStyle=function(Q,J){var Z={};for(var $=0;$<J.length;$++){var G=J[$],F=G.name,U=Q.pstyle(F);if(U!==void 0)if(D0(U))U=this.parse(F,U.strValue);else U=this.parse(F,U);if(U)Z[F]=U}return Z};C8.getPropsList=function(Q){var J=this,Z=[],$=Q,G=J.properties;if($){var F=Object.keys($);for(var U=0;U<F.length;U++){var K=F[U],M=$[K],q=G[K]||G[Q7(K)],L=this.parse(q.name,M);if(L)Z.push(L)}}return Z};C8.getNonDefaultPropertiesHash=function(Q,J,Z){var $=Z.slice(),G,F,U,K,M,q;for(M=0;M<J.length;M++)if(G=J[M],F=Q.pstyle(G,!1),F==null)continue;else if(F.pfValue!=null)$[0]=$9(K,$[0]),$[1]=G9(K,$[1]);else{U=F.strValue;for(q=0;q<U.length;q++)K=U.charCodeAt(q),$[0]=$9(K,$[0]),$[1]=G9(K,$[1])}return $};C8.getPropertiesHash=C8.getNonDefaultPropertiesHash;var R6={};R6.appendFromJson=function(Q){var J=this;for(var Z=0;Z<Q.length;Z++){var $=Q[Z],G=$.selector,F=$.style||$.css,U=Object.keys(F);J.selector(G);for(var K=0;K<U.length;K++){var M=U[K],q=F[M];J.css(M,q)}}return J};R6.fromJson=function(Q){var J=this;return J.resetToDefault(),J.appendFromJson(Q),J};R6.json=function(){var Q=[];for(var J=this.defaultLength;J<this.length;J++){var Z=this[J],$=Z.selector,G=Z.properties,F={};for(var U=0;U<G.length;U++){var K=G[U];F[K.name]=K.strValue}Q.push({selector:!$?"core":$.toString(),style:F})}return Q};var R7={};R7.appendFromString=function(Q){var J=this,Z=this,$=""+Q,G,F,U;$=$.replace(/[/][*](\s|.)+?[*][/]/g,"");function K(){if($.length>G.length)$=$.substr(G.length);else $=""}function M(){if(F.length>U.length)F=F.substr(U.length);else F=""}for(;;){var q=$.match(/^\s*$/);if(q)break;var L=$.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);if(!L){P0("Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: "+$);break}G=L[0];var z=L[1];if(z!=="core"){var A=new l8(z);if(A.invalid){P0("Skipping parsing of block: Invalid selector found in string stylesheet: "+z),K();continue}}var V=L[2],R=!1;F=V;var Y=[];for(;;){var X=F.match(/^\s*$/);if(X)break;var B=F.match(/^\s*(.+?)\s*:\s*(.+?)(?:\s*;|\s*$)/);if(!B){P0("Skipping parsing of block: Invalid formatting of style property and value definitions found in:"+V),R=!0;break}U=B[0];var O=B[1],N=B[2],H=J.properties[O];if(!H){P0("Skipping property: Invalid property name in: "+U),M();continue}var j=Z.parse(O,N);if(!j){P0("Skipping property: Invalid property definition in: "+U),M();continue}Y.push({name:O,val:N}),M()}if(R){K();break}Z.selector(z);for(var D=0;D<Y.length;D++){var k=Y[D];Z.css(k.name,k.val)}K()}return Z};R7.fromString=function(Q){var J=this;return J.resetToDefault(),J.appendFromString(Q),J};var n0={};(function(){var Q=c0,J=hU,Z=xU,$=cU,G=dU,F=function o(e){return"^"+e+"\\s*\\(\\s*([\\w\\.]+)\\s*\\)$"},U=function o(e){var t=Q+"|\\w+|"+J+"|"+Z+"|"+$+"|"+G;return"^"+e+"\\s*\\(([\\w\\.]+)\\s*\\,\\s*("+Q+")\\s*\\,\\s*("+Q+")\\s*,\\s*("+t+")\\s*\\,\\s*("+t+")\\)$"},K=['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$',"^(none)$","^(.+)$"];n0.types={time:{number:!0,min:0,units:"s|ms",implicitUnits:"ms"},percent:{number:!0,min:0,max:100,units:"%",implicitUnits:"%"},percentages:{number:!0,min:0,max:100,units:"%",implicitUnits:"%",multiple:!0},zeroOneNumber:{number:!0,min:0,max:1,unitless:!0},zeroOneNumbers:{number:!0,min:0,max:1,unitless:!0,multiple:!0},nOneOneNumber:{number:!0,min:-1,max:1,unitless:!0},nonNegativeInt:{number:!0,min:0,integer:!0,unitless:!0},nonNegativeNumber:{number:!0,min:0,unitless:!0},position:{enums:["parent","origin"]},nodeSize:{number:!0,min:0,enums:["label"]},number:{number:!0,unitless:!0},numbers:{number:!0,unitless:!0,multiple:!0},positiveNumber:{number:!0,unitless:!0,min:0,strictMin:!0},size:{number:!0,min:0},bidirectionalSize:{number:!0},bidirectionalSizeMaybePercent:{number:!0,allowPercent:!0},bidirectionalSizes:{number:!0,multiple:!0},sizeMaybePercent:{number:!0,min:0,allowPercent:!0},axisDirection:{enums:["horizontal","leftward","rightward","vertical","upward","downward","auto"]},paddingRelativeTo:{enums:["width","height","average","min","max"]},bgWH:{number:!0,min:0,allowPercent:!0,enums:["auto"],multiple:!0},bgPos:{number:!0,allowPercent:!0,multiple:!0},bgRelativeTo:{enums:["inner","include-padding"],multiple:!0},bgRepeat:{enums:["repeat","repeat-x","repeat-y","no-repeat"],multiple:!0},bgFit:{enums:["none","contain","cover"],multiple:!0},bgCrossOrigin:{enums:["anonymous","use-credentials","null"],multiple:!0},bgClip:{enums:["none","node"],multiple:!0},bgContainment:{enums:["inside","over"],multiple:!0},color:{color:!0},colors:{color:!0,multiple:!0},fill:{enums:["solid","linear-gradient","radial-gradient"]},bool:{enums:["yes","no"]},bools:{enums:["yes","no"],multiple:!0},lineStyle:{enums:["solid","dotted","dashed"]},lineCap:{enums:["butt","round","square"]},borderStyle:{enums:["solid","dotted","dashed","double"]},curveStyle:{enums:["bezier","unbundled-bezier","haystack","segments","straight","straight-triangle","taxi"]},fontFamily:{regex:'^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'},fontStyle:{enums:["italic","normal","oblique"]},fontWeight:{enums:["normal","bold","bolder","lighter","100","200","300","400","500","600","800","900",100,200,300,400,500,600,700,800,900]},textDecoration:{enums:["none","underline","overline","line-through"]},textTransform:{enums:["none","uppercase","lowercase"]},textWrap:{enums:["none","wrap","ellipsis"]},textOverflowWrap:{enums:["whitespace","anywhere"]},textBackgroundShape:{enums:["rectangle","roundrectangle","round-rectangle"]},nodeShape:{enums:["rectangle","roundrectangle","round-rectangle","cutrectangle","cut-rectangle","bottomroundrectangle","bottom-round-rectangle","barrel","ellipse","triangle","round-triangle","square","pentagon","round-pentagon","hexagon","round-hexagon","concavehexagon","concave-hexagon","heptagon","round-heptagon","octagon","round-octagon","tag","round-tag","star","diamond","round-diamond","vee","rhomboid","right-rhomboid","polygon"]},overlayShape:{enums:["roundrectangle","round-rectangle","ellipse"]},compoundIncludeLabels:{enums:["include","exclude"]},arrowShape:{enums:["tee","triangle","triangle-tee","circle-triangle","triangle-cross","triangle-backcurve","vee","square","circle","diamond","chevron","none"]},arrowFill:{enums:["filled","hollow"]},arrowWidth:{number:!0,units:"%|px|em",implicitUnits:"px",enums:["match-line"]},display:{enums:["element","none"]},visibility:{enums:["hidden","visible"]},zCompoundDepth:{enums:["bottom","orphan","auto","top"]},zIndexCompare:{enums:["auto","manual"]},valign:{enums:["top","center","bottom"]},halign:{enums:["left","center","right"]},justification:{enums:["left","center","right","auto"]},text:{string:!0},data:{mapping:!0,regex:F("data")},layoutData:{mapping:!0,regex:F("layoutData")},scratch:{mapping:!0,regex:F("scratch")},mapData:{mapping:!0,regex:U("mapData")},mapLayoutData:{mapping:!0,regex:U("mapLayoutData")},mapScratch:{mapping:!0,regex:U("mapScratch")},fn:{mapping:!0,fn:!0},url:{regexes:K,singleRegexMatchValue:!0},urls:{regexes:K,singleRegexMatchValue:!0,multiple:!0},propList:{propList:!0},angle:{number:!0,units:"deg|rad",implicitUnits:"rad"},textRotation:{number:!0,units:"deg|rad",implicitUnits:"rad",enums:["none","autorotate"]},polygonPointList:{number:!0,multiple:!0,evenMultiple:!0,min:-1,max:1,unitless:!0},edgeDistances:{enums:["intersection","node-position","endpoints"]},edgeEndpoint:{number:!0,multiple:!0,units:"%|px|em|deg|rad",implicitUnits:"px",enums:["inside-to-node","outside-to-node","outside-to-node-or-label","outside-to-line","outside-to-line-or-label"],singleEnum:!0,validate:function o(e,t){switch(e.length){case 2:return t[0]!=="deg"&&t[0]!=="rad"&&t[1]!=="deg"&&t[1]!=="rad";case 1:return R0(e[0])||t[0]==="deg"||t[0]==="rad";default:return!1}}},easing:{regexes:["^(spring)\\s*\\(\\s*("+Q+")\\s*,\\s*("+Q+")\\s*\\)$","^(cubic-bezier)\\s*\\(\\s*("+Q+")\\s*,\\s*("+Q+")\\s*,\\s*("+Q+")\\s*,\\s*("+Q+")\\s*\\)$"],enums:["linear","ease","ease-in","ease-out","ease-in-out","ease-in-sine","ease-out-sine","ease-in-out-sine","ease-in-quad","ease-out-quad","ease-in-out-quad","ease-in-cubic","ease-out-cubic","ease-in-out-cubic","ease-in-quart","ease-out-quart","ease-in-out-quart","ease-in-quint","ease-out-quint","ease-in-out-quint","ease-in-expo","ease-out-expo","ease-in-out-expo","ease-in-circ","ease-out-circ","ease-in-out-circ"]},gradientDirection:{enums:["to-bottom","to-top","to-left","to-right","to-bottom-right","to-bottom-left","to-top-right","to-top-left","to-right-bottom","to-left-bottom","to-right-top","to-left-top"]},boundsExpansion:{number:!0,multiple:!0,min:0,validate:function o(e){var t=e.length;return t===1||t===2||t===4}}};var M={zeroNonZero:function o(e,t){if((e==null||t==null)&&e!==t)return!0;if(e==0&&t!=0)return!0;else if(e!=0&&t==0)return!0;else return!1},any:function o(e,t){return e!=t},emptyNonEmpty:function o(e,t){var J0=d8(e),K0=d8(t);return J0&&!K0||!J0&&K0}},q=n0.types,L=[{name:"label",type:q.text,triggersBounds:M.any,triggersZOrder:M.emptyNonEmpty},{name:"text-rotation",type:q.textRotation,triggersBounds:M.any},{name:"text-margin-x",type:q.bidirectionalSize,triggersBounds:M.any},{name:"text-margin-y",type:q.bidirectionalSize,triggersBounds:M.any}],z=[{name:"source-label",type:q.text,triggersBounds:M.any},{name:"source-text-rotation",type:q.textRotation,triggersBounds:M.any},{name:"source-text-margin-x",type:q.bidirectionalSize,triggersBounds:M.any},{name:"source-text-margin-y",type:q.bidirectionalSize,triggersBounds:M.any},{name:"source-text-offset",type:q.size,triggersBounds:M.any}],A=[{name:"target-label",type:q.text,triggersBounds:M.any},{name:"target-text-rotation",type:q.textRotation,triggersBounds:M.any},{name:"target-text-margin-x",type:q.bidirectionalSize,triggersBounds:M.any},{name:"target-text-margin-y",type:q.bidirectionalSize,triggersBounds:M.any},{name:"target-text-offset",type:q.size,triggersBounds:M.any}],V=[{name:"font-family",type:q.fontFamily,triggersBounds:M.any},{name:"font-style",type:q.fontStyle,triggersBounds:M.any},{name:"font-weight",type:q.fontWeight,triggersBounds:M.any},{name:"font-size",type:q.size,triggersBounds:M.any},{name:"text-transform",type:q.textTransform,triggersBounds:M.any},{name:"text-wrap",type:q.textWrap,triggersBounds:M.any},{name:"text-overflow-wrap",type:q.textOverflowWrap,triggersBounds:M.any},{name:"text-max-width",type:q.size,triggersBounds:M.any},{name:"text-outline-width",type:q.size,triggersBounds:M.any},{name:"line-height",type:q.positiveNumber,triggersBounds:M.any}],R=[{name:"text-valign",type:q.valign,triggersBounds:M.any},{name:"text-halign",type:q.halign,triggersBounds:M.any},{name:"color",type:q.color},{name:"text-outline-color",type:q.color},{name:"text-outline-opacity",type:q.zeroOneNumber},{name:"text-background-color",type:q.color},{name:"text-background-opacity",type:q.zeroOneNumber},{name:"text-background-padding",type:q.size,triggersBounds:M.any},{name:"text-border-opacity",type:q.zeroOneNumber},{name:"text-border-color",type:q.color},{name:"text-border-width",type:q.size,triggersBounds:M.any},{name:"text-border-style",type:q.borderStyle,triggersBounds:M.any},{name:"text-background-shape",type:q.textBackgroundShape,triggersBounds:M.any},{name:"text-justification",type:q.justification}],Y=[{name:"events",type:q.bool,triggersZOrder:M.any},{name:"text-events",type:q.bool,triggersZOrder:M.any}],X=[{name:"display",type:q.display,triggersZOrder:M.any,triggersBounds:M.any,triggersBoundsOfConnectedEdges:!0},{name:"visibility",type:q.visibility,triggersZOrder:M.any},{name:"opacity",type:q.zeroOneNumber,triggersZOrder:M.zeroNonZero},{name:"text-opacity",type:q.zeroOneNumber},{name:"min-zoomed-font-size",type:q.size},{name:"z-compound-depth",type:q.zCompoundDepth,triggersZOrder:M.any},{name:"z-index-compare",type:q.zIndexCompare,triggersZOrder:M.any},{name:"z-index",type:q.number,triggersZOrder:M.any}],B=[{name:"overlay-padding",type:q.size,triggersBounds:M.any},{name:"overlay-color",type:q.color},{name:"overlay-opacity",type:q.zeroOneNumber,triggersBounds:M.zeroNonZero},{name:"overlay-shape",type:q.overlayShape,triggersBounds:M.any}],O=[{name:"underlay-padding",type:q.size,triggersBounds:M.any},{name:"underlay-color",type:q.color},{name:"underlay-opacity",type:q.zeroOneNumber,triggersBounds:M.zeroNonZero},{name:"underlay-shape",type:q.overlayShape,triggersBounds:M.any}],N=[{name:"transition-property",type:q.propList},{name:"transition-duration",type:q.time},{name:"transition-delay",type:q.time},{name:"transition-timing-function",type:q.easing}],H=function o(e,t){if(t.value==="label")return-e.poolIndex();else return t.pfValue},j=[{name:"height",type:q.nodeSize,triggersBounds:M.any,hashOverride:H},{name:"width",type:q.nodeSize,triggersBounds:M.any,hashOverride:H},{name:"shape",type:q.nodeShape,triggersBounds:M.any},{name:"shape-polygon-points",type:q.polygonPointList,triggersBounds:M.any},{name:"background-color",type:q.color},{name:"background-fill",type:q.fill},{name:"background-opacity",type:q.zeroOneNumber},{name:"background-blacken",type:q.nOneOneNumber},{name:"background-gradient-stop-colors",type:q.colors},{name:"background-gradient-stop-positions",type:q.percentages},{name:"background-gradient-direction",type:q.gradientDirection},{name:"padding",type:q.sizeMaybePercent,triggersBounds:M.any},{name:"padding-relative-to",type:q.paddingRelativeTo,triggersBounds:M.any},{name:"bounds-expansion",type:q.boundsExpansion,triggersBounds:M.any}],D=[{name:"border-color",type:q.color},{name:"border-opacity",type:q.zeroOneNumber},{name:"border-width",type:q.size,triggersBounds:M.any},{name:"border-style",type:q.borderStyle}],k=[{name:"outline-color",type:q.color},{name:"outline-opacity",type:q.zeroOneNumber},{name:"outline-width",type:q.size,triggersBounds:M.any},{name:"outline-style",type:q.borderStyle},{name:"outline-offset",type:q.size,triggersBounds:M.any}],C=[{name:"background-image",type:q.urls},{name:"background-image-crossorigin",type:q.bgCrossOrigin},{name:"background-image-opacity",type:q.zeroOneNumbers},{name:"background-image-containment",type:q.bgContainment},{name:"background-image-smoothing",type:q.bools},{name:"background-position-x",type:q.bgPos},{name:"background-position-y",type:q.bgPos},{name:"background-width-relative-to",type:q.bgRelativeTo},{name:"background-height-relative-to",type:q.bgRelativeTo},{name:"background-repeat",type:q.bgRepeat},{name:"background-fit",type:q.bgFit},{name:"background-clip",type:q.bgClip},{name:"background-width",type:q.bgWH},{name:"background-height",type:q.bgWH},{name:"background-offset-x",type:q.bgPos},{name:"background-offset-y",type:q.bgPos}],E=[{name:"position",type:q.position,triggersBounds:M.any},{name:"compound-sizing-wrt-labels",type:q.compoundIncludeLabels,triggersBounds:M.any},{name:"min-width",type:q.size,triggersBounds:M.any},{name:"min-width-bias-left",type:q.sizeMaybePercent,triggersBounds:M.any},{name:"min-width-bias-right",type:q.sizeMaybePercent,triggersBounds:M.any},{name:"min-height",type:q.size,triggersBounds:M.any},{name:"min-height-bias-top",type:q.sizeMaybePercent,triggersBounds:M.any},{name:"min-height-bias-bottom",type:q.sizeMaybePercent,triggersBounds:M.any}],S=[{name:"line-style",type:q.lineStyle},{name:"line-color",type:q.color},{name:"line-fill",type:q.fill},{name:"line-cap",type:q.lineCap},{name:"line-opacity",type:q.zeroOneNumber},{name:"line-dash-pattern",type:q.numbers},{name:"line-dash-offset",type:q.number},{name:"line-gradient-stop-colors",type:q.colors},{name:"line-gradient-stop-positions",type:q.percentages},{name:"curve-style",type:q.curveStyle,triggersBounds:M.any,triggersBoundsOfParallelBeziers:!0},{name:"haystack-radius",type:q.zeroOneNumber,triggersBounds:M.any},{name:"source-endpoint",type:q.edgeEndpoint,triggersBounds:M.any},{name:"target-endpoint",type:q.edgeEndpoint,triggersBounds:M.any},{name:"control-point-step-size",type:q.size,triggersBounds:M.any},{name:"control-point-distances",type:q.bidirectionalSizes,triggersBounds:M.any},{name:"control-point-weights",type:q.numbers,triggersBounds:M.any},{name:"segment-distances",type:q.bidirectionalSizes,triggersBounds:M.any},{name:"segment-weights",type:q.numbers,triggersBounds:M.any},{name:"taxi-turn",type:q.bidirectionalSizeMaybePercent,triggersBounds:M.any},{name:"taxi-turn-min-distance",type:q.size,triggersBounds:M.any},{name:"taxi-direction",type:q.axisDirection,triggersBounds:M.any},{name:"edge-distances",type:q.edgeDistances,triggersBounds:M.any},{name:"arrow-scale",type:q.positiveNumber,triggersBounds:M.any},{name:"loop-direction",type:q.angle,triggersBounds:M.any},{name:"loop-sweep",type:q.angle,triggersBounds:M.any},{name:"source-distance-from-node",type:q.size,triggersBounds:M.any},{name:"target-distance-from-node",type:q.size,triggersBounds:M.any}],w=[{name:"ghost",type:q.bool,triggersBounds:M.any},{name:"ghost-offset-x",type:q.bidirectionalSize,triggersBounds:M.any},{name:"ghost-offset-y",type:q.bidirectionalSize,triggersBounds:M.any},{name:"ghost-opacity",type:q.zeroOneNumber}],T=[{name:"selection-box-color",type:q.color},{name:"selection-box-opacity",type:q.zeroOneNumber},{name:"selection-box-border-color",type:q.color},{name:"selection-box-border-width",type:q.size},{name:"active-bg-color",type:q.color},{name:"active-bg-opacity",type:q.zeroOneNumber},{name:"active-bg-size",type:q.size},{name:"outside-texture-bg-color",type:q.color},{name:"outside-texture-bg-opacity",type:q.zeroOneNumber}],v=[];n0.pieBackgroundN=16,v.push({name:"pie-size",type:q.sizeMaybePercent});for(var I=1;I<=n0.pieBackgroundN;I++)v.push({name:"pie-"+I+"-background-color",type:q.color}),v.push({name:"pie-"+I+"-background-size",type:q.percent}),v.push({name:"pie-"+I+"-background-opacity",type:q.zeroOneNumber});var _=[],b=n0.arrowPrefixes=["source","mid-source","target","mid-target"];[{name:"arrow-shape",type:q.arrowShape,triggersBounds:M.any},{name:"arrow-color",type:q.color},{name:"arrow-fill",type:q.arrowFill},{name:"arrow-width",type:q.arrowWidth}].forEach(function(o){b.forEach(function(e){var t=e+"-"+o.name,J0=o.type,K0=o.triggersBounds;_.push({name:t,type:J0,triggersBounds:K0})})},{});var P=n0.properties=[].concat(Y,N,X,B,O,w,R,V,L,z,A,j,D,k,C,v,E,S,_,T),u=n0.propertyGroups={behavior:Y,transition:N,visibility:X,overlay:B,underlay:O,ghost:w,commonLabel:R,labelDimensions:V,mainLabel:L,sourceLabel:z,targetLabel:A,nodeBody:j,nodeBorder:D,nodeOutline:k,backgroundImage:C,pie:v,compound:E,edgeLine:S,edgeArrow:_,core:T},h=n0.propertyGroupNames={},p=n0.propertyGroupKeys=Object.keys(u);p.forEach(function(o){h[o]=u[o].map(function(e){return e.name}),u[o].forEach(function(e){return e.groupKey=o})});var m=n0.aliases=[{name:"content",pointsTo:"label"},{name:"control-point-distance",pointsTo:"control-point-distances"},{name:"control-point-weight",pointsTo:"control-point-weights"},{name:"edge-text-rotation",pointsTo:"text-rotation"},{name:"padding-left",pointsTo:"padding"},{name:"padding-right",pointsTo:"padding"},{name:"padding-top",pointsTo:"padding"},{name:"padding-bottom",pointsTo:"padding"}];n0.propertyNames=P.map(function(o){return o.name});for(var c=0;c<P.length;c++){var i=P[c];P[i.name]=i}for(var r=0;r<m.length;r++){var a=m[r],n=P[a.pointsTo],f={name:a.name,alias:!0,pointsTo:n};P.push(f),P[a.name]=f}})();n0.getDefaultProperty=function(Q){return this.getDefaultProperties()[Q]};n0.getDefaultProperties=function(){var Q=this._private;if(Q.defaultProperties!=null)return Q.defaultProperties;var J=V0({"selection-box-color":"#ddd","selection-box-opacity":0.65,"selection-box-border-color":"#aaa","selection-box-border-width":1,"active-bg-color":"black","active-bg-opacity":0.15,"active-bg-size":30,"outside-texture-bg-color":"#000","outside-texture-bg-opacity":0.125,events:"yes","text-events":"no","text-valign":"top","text-halign":"center","text-justification":"auto","line-height":1,color:"#000","text-outline-color":"#000","text-outline-width":0,"text-outline-opacity":1,"text-opacity":1,"text-decoration":"none","text-transform":"none","text-wrap":"none","text-overflow-wrap":"whitespace","text-max-width":9999,"text-background-color":"#000","text-background-opacity":0,"text-background-shape":"rectangle","text-background-padding":0,"text-border-opacity":0,"text-border-width":0,"text-border-style":"solid","text-border-color":"#000","font-family":"Helvetica Neue, Helvetica, sans-serif","font-style":"normal","font-weight":"normal","font-size":16,"min-zoomed-font-size":0,"text-rotation":"none","source-text-rotation":"none","target-text-rotation":"none",visibility:"visible",display:"element",opacity:1,"z-compound-depth":"auto","z-index-compare":"auto","z-index":0,label:"","text-margin-x":0,"text-margin-y":0,"source-label":"","source-text-offset":0,"source-text-margin-x":0,"source-text-margin-y":0,"target-label":"","target-text-offset":0,"target-text-margin-x":0,"target-text-margin-y":0,"overlay-opacity":0,"overlay-color":"#000","overlay-padding":10,"overlay-shape":"round-rectangle","underlay-opacity":0,"underlay-color":"#000","underlay-padding":10,"underlay-shape":"round-rectangle","transition-property":"none","transition-duration":0,"transition-delay":0,"transition-timing-function":"linear","background-blacken":0,"background-color":"#999","background-fill":"solid","background-opacity":1,"background-image":"none","background-image-crossorigin":"anonymous","background-image-opacity":1,"background-image-containment":"inside","background-image-smoothing":"yes","background-position-x":"50%","background-position-y":"50%","background-offset-x":0,"background-offset-y":0,"background-width-relative-to":"include-padding","background-height-relative-to":"include-padding","background-repeat":"no-repeat","background-fit":"none","background-clip":"node","background-width":"auto","background-height":"auto","border-color":"#000","border-opacity":1,"border-width":0,"border-style":"solid","outline-color":"#999","outline-opacity":1,"outline-width":0,"outline-offset":0,"outline-style":"solid",height:30,width:30,shape:"ellipse","shape-polygon-points":"-1, -1,   1, -1,   1, 1,   -1, 1","bounds-expansion":0,"background-gradient-direction":"to-bottom","background-gradient-stop-colors":"#999","background-gradient-stop-positions":"0%",ghost:"no","ghost-offset-y":0,"ghost-offset-x":0,"ghost-opacity":0,padding:0,"padding-relative-to":"width",position:"origin","compound-sizing-wrt-labels":"include","min-width":0,"min-width-bias-left":0,"min-width-bias-right":0,"min-height":0,"min-height-bias-top":0,"min-height-bias-bottom":0},{"pie-size":"100%"},[{name:"pie-{{i}}-background-color",value:"black"},{name:"pie-{{i}}-background-size",value:"0%"},{name:"pie-{{i}}-background-opacity",value:1}].reduce(function(M,q){for(var L=1;L<=n0.pieBackgroundN;L++){var z=q.name.replace("{{i}}",L),A=q.value;M[z]=A}return M},{}),{"line-style":"solid","line-color":"#999","line-fill":"solid","line-cap":"butt","line-opacity":1,"line-gradient-stop-colors":"#999","line-gradient-stop-positions":"0%","control-point-step-size":40,"control-point-weights":0.5,"segment-weights":0.5,"segment-distances":20,"taxi-turn":"50%","taxi-turn-min-distance":10,"taxi-direction":"auto","edge-distances":"intersection","curve-style":"haystack","haystack-radius":0,"arrow-scale":1,"loop-direction":"-45deg","loop-sweep":"-90deg","source-distance-from-node":0,"target-distance-from-node":0,"source-endpoint":"outside-to-node","target-endpoint":"outside-to-node","line-dash-pattern":[6,3],"line-dash-offset":0},[{name:"arrow-shape",value:"none"},{name:"arrow-color",value:"#999"},{name:"arrow-fill",value:"filled"},{name:"arrow-width",value:1}].reduce(function(M,q){return n0.arrowPrefixes.forEach(function(L){var z=L+"-"+q.name,A=q.value;M[z]=A}),M},{})),Z={};for(var $=0;$<this.properties.length;$++){var G=this.properties[$];if(G.pointsTo)continue;var F=G.name,U=J[F],K=this.parse(F,U);Z[F]=K}return Q.defaultProperties=Z,Q.defaultProperties};n0.addDefaultStylesheet=function(){this.selector(":parent").css({shape:"rectangle",padding:10,"background-color":"#eee","border-color":"#ccc","border-width":1}).selector("edge").css({width:3}).selector(":loop").css({"curve-style":"bezier"}).selector("edge:compound").css({"curve-style":"bezier","source-endpoint":"outside-to-line","target-endpoint":"outside-to-line"}).selector(":selected").css({"background-color":"#0169D9","line-color":"#0169D9","source-arrow-color":"#0169D9","target-arrow-color":"#0169D9","mid-source-arrow-color":"#0169D9","mid-target-arrow-color":"#0169D9"}).selector(":parent:selected").css({"background-color":"#CCE1F9","border-color":"#aec8e5"}).selector(":active").css({"overlay-color":"black","overlay-padding":10,"overlay-opacity":0.25}),this.defaultLength=this.length};var V6={};V6.parse=function(Q,J,Z,$){var G=this;if(f0(J))return G.parseImplWarn(Q,J,Z,$);var F=$==="mapping"||$===!0||$===!1||$==null?"dontcare":$,U=Z?"t":"f",K=""+J,M=K$(Q,K,U,F),q=G.propCache=G.propCache||[],L;if(!(L=q[M]))L=q[M]=G.parseImplWarn(Q,J,Z,$);if(Z||$==="mapping"){if(L=j8(L),L)L.value=j8(L.value)}return L};V6.parseImplWarn=function(Q,J,Z,$){var G=this.parseImpl(Q,J,Z,$);if(!G&&J!=null)P0("The style property `".concat(Q,": ").concat(J,"` is invalid"));if(G&&(G.name==="width"||G.name==="height")&&J==="label")P0("The style value of `label` is deprecated for `"+G.name+"`");return G};V6.parseImpl=function(Q,J,Z,$){var G=this;Q=Q7(Q);var F=G.properties[Q],U=J,K=G.types;if(!F)return null;if(J===void 0)return null;if(F.alias)F=F.pointsTo,Q=F.name;var M=R0(J);if(M)J=J.trim();var q=F.type;if(!q)return null;if(Z&&(J===""||J===null))return{name:Q,value:J,bypass:!0,deleteBypass:!0};if(f0(J))return{name:Q,value:J,strValue:"fn",mapped:K.fn,bypass:Z};var L,z;if(!M||$||J.length<7||J[1]!=="a");else if(J.length>=7&&J[0]==="d"&&(L=new RegExp(K.data.regex).exec(J))){if(Z)return!1;var A=K.data;return{name:Q,value:L,strValue:""+J,mapped:A,field:L[1],bypass:Z}}else if(J.length>=10&&J[0]==="m"&&(z=new RegExp(K.mapData.regex).exec(J))){if(Z)return!1;if(q.multiple)return!1;var V=K.mapData;if(!(q.color||q.number))return!1;var R=this.parse(Q,z[4]);if(!R||R.mapped)return!1;var Y=this.parse(Q,z[5]);if(!Y||Y.mapped)return!1;if(R.pfValue===Y.pfValue||R.strValue===Y.strValue)return P0("`"+Q+": "+J+"` is not a valid mapper because the output range is zero; converting to `"+Q+": "+R.strValue+"`"),this.parse(Q,R.strValue);else if(q.color){var X=R.value,B=Y.value,O=X[0]===B[0]&&X[1]===B[1]&&X[2]===B[2]&&(X[3]===B[3]||(X[3]==null||X[3]===1)&&(B[3]==null||B[3]===1));if(O)return!1}return{name:Q,value:z,strValue:""+J,mapped:V,field:z[1],fieldMin:parseFloat(z[2]),fieldMax:parseFloat(z[3]),valueMin:R.value,valueMax:Y.value,bypass:Z}}if(q.multiple&&$!=="multiple"){var N;if(M)N=J.split(/\s+/);else if(b0(J))N=J;else N=[J];if(q.evenMultiple&&N.length%2!==0)return null;var H=[],j=[],D=[],k="",C=!1;for(var E=0;E<N.length;E++){var S=G.parse(Q,N[E],Z,"multiple");C=C||R0(S.value),H.push(S.value),D.push(S.pfValue!=null?S.pfValue:S.value),j.push(S.units),k+=(E>0?" ":"")+S.strValue}if(q.validate&&!q.validate(H,j))return null;if(q.singleEnum&&C)if(H.length===1&&R0(H[0]))return{name:Q,value:H[0],strValue:H[0],bypass:Z};else return null;return{name:Q,value:H,pfValue:D,strValue:k,bypass:Z,units:j}}var w=function o(){for(var e=0;e<q.enums.length;e++){var t=q.enums[e];if(t===J)return{name:Q,value:J,strValue:""+J,bypass:Z}}return null};if(q.number){var T,v="px";if(q.units)T=q.units;if(q.implicitUnits)v=q.implicitUnits;if(!q.unitless){if(M){var I="px|em"+(q.allowPercent?"|\\%":"");if(T)I=T;var _=J.match("^("+c0+")("+I+")?$");if(_)J=_[1],T=_[2]||v}else if(!T||q.implicitUnits)T=v}if(J=parseFloat(J),isNaN(J)&&q.enums===void 0)return null;if(isNaN(J)&&q.enums!==void 0)return J=U,w();if(q.integer&&!vU(J))return null;if(q.min!==void 0&&(J<q.min||q.strictMin&&J===q.min)||q.max!==void 0&&(J>q.max||q.strictMax&&J===q.max))return null;var b={name:Q,value:J,strValue:""+J+(T?T:""),units:T,bypass:Z};if(q.unitless||T!=="px"&&T!=="em")b.pfValue=J;else b.pfValue=T==="px"||!T?J:this.getEmSizeInPixels()*J;if(T==="ms"||T==="s")b.pfValue=T==="ms"?J:1000*J;if(T==="deg"||T==="rad")b.pfValue=T==="rad"?J:CK(J);if(T==="%")b.pfValue=J/100;return b}else if(q.propList){var P=[],u=""+J;if(u==="none");else{var h=u.split(/\s*,\s*|\s+/);for(var p=0;p<h.length;p++){var m=h[p].trim();if(G.properties[m])P.push(m);else P0("`"+m+"` is not a valid property name")}if(P.length===0)return null}return{name:Q,value:P,strValue:P.length===0?"none":P.join(" "),bypass:Z}}else if(q.color){var c=sU(J);if(!c)return null;return{name:Q,value:c,pfValue:c,strValue:"rgb("+c[0]+","+c[1]+","+c[2]+")",bypass:Z}}else if(q.regex||q.regexes){if(q.enums){var i=w();if(i)return i}var r=q.regexes?q.regexes:[q.regex];for(var a=0;a<r.length;a++){var n=new RegExp(r[a]),f=n.exec(J);if(f)return{name:Q,value:q.singleRegexMatchValue?f[1]:f,strValue:""+J,bypass:Z}}return null}else if(q.string)return{name:Q,value:""+J,strValue:""+J,bypass:Z};else if(q.enums)return w();else return null};var J8=function Q(J){if(!(this instanceof Q))return new Q(J);if(!J7(J)){h0("A style must have a core reference");return}this._private={cy:J,coreStyle:{}},this.length=0,this.resetToDefault()},Z8=J8.prototype;Z8.instanceString=function(){return"style"};Z8.clear=function(){var Q=this._private,J=Q.cy,Z=J.elements();for(var $=0;$<this.length;$++)this[$]=void 0;return this.length=0,Q.contextStyles={},Q.propDiffs={},this.cleanElements(Z,!0),Z.forEach(function(G){var F=G[0]._private;F.styleDirty=!0,F.appliedInitStyle=!1}),this};Z8.resetToDefault=function(){return this.clear(),this.addDefaultStylesheet(),this};Z8.core=function(Q){return this._private.coreStyle[Q]||this.getDefaultProperty(Q)};Z8.selector=function(Q){var J=Q==="core"?null:new l8(Q),Z=this.length++;return this[Z]={selector:J,properties:[],mappedProperties:[],index:Z},this};Z8.css=function(){var Q=this,J=arguments;if(J.length===1){var Z=J[0];for(var $=0;$<Q.properties.length;$++){var G=Q.properties[$],F=Z[G.name];if(F===void 0)F=Z[F6(G.name)];if(F!==void 0)this.cssRule(G.name,F)}}else if(J.length===2)this.cssRule(J[0],J[1]);return this};Z8.style=Z8.css;Z8.cssRule=function(Q,J){var Z=this.parse(Q,J);if(Z){var $=this.length-1;if(this[$].properties.push(Z),this[$].properties[Z.name]=Z,Z.name.match(/pie-(\d+)-background-size/)&&Z.value)this._private.hasPie=!0;if(Z.mapped)this[$].mappedProperties.push(Z);var G=!this[$].selector;if(G)this._private.coreStyle[Z.name]=Z}return this};Z8.append=function(Q){if(eZ(Q))Q.appendToStyle(this);else if(b0(Q))this.appendFromJson(Q);else if(R0(Q))this.appendFromString(Q);return this};J8.fromJson=function(Q,J){var Z=new J8(Q);return Z.fromJson(J),Z};J8.fromString=function(Q,J){return new J8(Q).fromString(J)};[$8,O9,A7,C8,R6,R7,n0,V6].forEach(function(Q){V0(Z8,Q)});J8.types=Z8.types;J8.properties=Z8.properties;J8.propertyGroups=Z8.propertyGroups;J8.propertyGroupNames=Z8.propertyGroupNames;J8.propertyGroupKeys=Z8.propertyGroupKeys;var yM={style:function Q(J){if(J){var Z=this.setStyle(J);Z.update()}return this._private.style},setStyle:function Q(J){var Z=this._private;if(eZ(J))Z.style=J.generateStyle(this);else if(b0(J))Z.style=J8.fromJson(this,J);else if(R0(J))Z.style=J8.fromString(this,J);else Z.style=J8(this);return Z.style},updateStyle:function Q(){this.mutableElements().updateStyle()}},xM="single",FJ={autolock:function Q(J){if(J!==void 0)this._private.autolock=J?!0:!1;else return this._private.autolock;return this},autoungrabify:function Q(J){if(J!==void 0)this._private.autoungrabify=J?!0:!1;else return this._private.autoungrabify;return this},autounselectify:function Q(J){if(J!==void 0)this._private.autounselectify=J?!0:!1;else return this._private.autounselectify;return this},selectionType:function Q(J){var Z=this._private;if(Z.selectionType==null)Z.selectionType=xM;if(J!==void 0){if(J==="additive"||J==="single")Z.selectionType=J}else return Z.selectionType;return this},panningEnabled:function Q(J){if(J!==void 0)this._private.panningEnabled=J?!0:!1;else return this._private.panningEnabled;return this},userPanningEnabled:function Q(J){if(J!==void 0)this._private.userPanningEnabled=J?!0:!1;else return this._private.userPanningEnabled;return this},zoomingEnabled:function Q(J){if(J!==void 0)this._private.zoomingEnabled=J?!0:!1;else return this._private.zoomingEnabled;return this},userZoomingEnabled:function Q(J){if(J!==void 0)this._private.userZoomingEnabled=J?!0:!1;else return this._private.userZoomingEnabled;return this},boxSelectionEnabled:function Q(J){if(J!==void 0)this._private.boxSelectionEnabled=J?!0:!1;else return this._private.boxSelectionEnabled;return this},pan:function Q(){var J=arguments,Z=this._private.pan,$,G,F,U,K;switch(J.length){case 0:return Z;case 1:if(R0(J[0]))return $=J[0],Z[$];else if(D0(J[0])){if(!this._private.panningEnabled)return this;if(F=J[0],U=F.x,K=F.y,$0(U))Z.x=U;if($0(K))Z.y=K;this.emit("pan viewport")}break;case 2:if(!this._private.panningEnabled)return this;if($=J[0],G=J[1],($==="x"||$==="y")&&$0(G))Z[$]=G;this.emit("pan viewport");break}return this.notify("viewport"),this},panBy:function Q(J,Z){var $=arguments,G=this._private.pan,F,U,K,M,q;if(!this._private.panningEnabled)return this;switch($.length){case 1:if(D0(J)){if(K=$[0],M=K.x,q=K.y,$0(M))G.x+=M;if($0(q))G.y+=q;this.emit("pan viewport")}break;case 2:if(F=J,U=Z,(F==="x"||F==="y")&&$0(U))G[F]+=U;this.emit("pan viewport");break}return this.notify("viewport"),this},fit:function Q(J,Z){var $=this.getFitViewport(J,Z);if($){var G=this._private;G.zoom=$.zoom,G.pan=$.pan,this.emit("pan zoom viewport"),this.notify("viewport")}return this},getFitViewport:function Q(J,Z){if($0(J)&&Z===void 0)Z=J,J=void 0;if(!this._private.panningEnabled||!this._private.zoomingEnabled)return;var $;if(R0(J)){var G=J;J=this.$(G)}else if(uU(J)){var F=J;$={x1:F.x1,y1:F.y1,x2:F.x2,y2:F.y2},$.w=$.x2-$.x1,$.h=$.y2-$.y1}else if(!z8(J))J=this.mutableElements();if(z8(J)&&J.empty())return;$=$||J.boundingBox();var U=this.width(),K=this.height(),M;if(Z=$0(Z)?Z:0,!isNaN(U)&&!isNaN(K)&&U>0&&K>0&&!isNaN($.w)&&!isNaN($.h)&&$.w>0&&$.h>0){M=Math.min((U-2*Z)/$.w,(K-2*Z)/$.h),M=M>this._private.maxZoom?this._private.maxZoom:M,M=M<this._private.minZoom?this._private.minZoom:M;var q={x:(U-M*($.x1+$.x2))/2,y:(K-M*($.y1+$.y2))/2};return{zoom:M,pan:q}}return},zoomRange:function Q(J,Z){var $=this._private;if(Z==null){var G=J;J=G.min,Z=G.max}if($0(J)&&$0(Z)&&J<=Z)$.minZoom=J,$.maxZoom=Z;else if($0(J)&&Z===void 0&&J<=$.maxZoom)$.minZoom=J;else if($0(Z)&&J===void 0&&Z>=$.minZoom)$.maxZoom=Z;return this},minZoom:function Q(J){if(J===void 0)return this._private.minZoom;else return this.zoomRange({min:J})},maxZoom:function Q(J){if(J===void 0)return this._private.maxZoom;else return this.zoomRange({max:J})},getZoomedViewport:function Q(J){var Z=this._private,$=Z.pan,G=Z.zoom,F,U,K=!1;if(!Z.zoomingEnabled)K=!0;if($0(J))U=J;else if(D0(J)){if(U=J.level,J.position!=null)F=K6(J.position,G,$);else if(J.renderedPosition!=null)F=J.renderedPosition;if(F!=null&&!Z.panningEnabled)K=!0}if(U=U>Z.maxZoom?Z.maxZoom:U,U=U<Z.minZoom?Z.minZoom:U,K||!$0(U)||U===G||F!=null&&(!$0(F.x)||!$0(F.y)))return null;if(F!=null){var M=$,q=G,L=U,z={x:-L/q*(F.x-M.x)+F.x,y:-L/q*(F.y-M.y)+F.y};return{zoomed:!0,panned:!0,zoom:L,pan:z}}else return{zoomed:!0,panned:!1,zoom:U,pan:$}},zoom:function Q(J){if(J===void 0)return this._private.zoom;else{var Z=this.getZoomedViewport(J),$=this._private;if(Z==null||!Z.zoomed)return this;if($.zoom=Z.zoom,Z.panned)$.pan.x=Z.pan.x,$.pan.y=Z.pan.y;return this.emit("zoom"+(Z.panned?" pan":"")+" viewport"),this.notify("viewport"),this}},viewport:function Q(J){var Z=this._private,$=!0,G=!0,F=[],U=!1,K=!1;if(!J)return this;if(!$0(J.zoom))$=!1;if(!D0(J.pan))G=!1;if(!$&&!G)return this;if($){var M=J.zoom;if(M<Z.minZoom||M>Z.maxZoom||!Z.zoomingEnabled)U=!0;else Z.zoom=M,F.push("zoom")}if(G&&(!U||!J.cancelOnFailedZoom)&&Z.panningEnabled){var q=J.pan;if($0(q.x))Z.pan.x=q.x,K=!1;if($0(q.y))Z.pan.y=q.y,K=!1;if(!K)F.push("pan")}if(F.length>0)F.push("viewport"),this.emit(F.join(" ")),this.notify("viewport");return this},center:function Q(J){var Z=this.getCenterPan(J);if(Z)this._private.pan=Z,this.emit("pan viewport"),this.notify("viewport");return this},getCenterPan:function Q(J,Z){if(!this._private.panningEnabled)return;if(R0(J)){var $=J;J=this.mutableElements().filter($)}else if(!z8(J))J=this.mutableElements();if(J.length===0)return;var G=J.boundingBox(),F=this.width(),U=this.height();Z=Z===void 0?this._private.zoom:Z;var K={x:(F-Z*(G.x1+G.x2))/2,y:(U-Z*(G.y1+G.y2))/2};return K},reset:function Q(){if(!this._private.panningEnabled||!this._private.zoomingEnabled)return this;return this.viewport({pan:{x:0,y:0},zoom:1}),this},invalidateSize:function Q(){this._private.sizeCache=null},size:function Q(){var J=this._private,Z=J.container,$=this;return J.sizeCache=J.sizeCache||(Z?function(){var G=$.window().getComputedStyle(Z),F=function U(K){return parseFloat(G.getPropertyValue(K))};return{width:Z.clientWidth-F("padding-left")-F("padding-right"),height:Z.clientHeight-F("padding-top")-F("padding-bottom")}}():{width:1,height:1})},width:function Q(){return this.size().width},height:function Q(){return this.size().height},extent:function Q(){var J=this._private.pan,Z=this._private.zoom,$=this.renderedExtent(),G={x1:($.x1-J.x)/Z,x2:($.x2-J.x)/Z,y1:($.y1-J.y)/Z,y2:($.y2-J.y)/Z};return G.w=G.x2-G.x1,G.h=G.y2-G.y1,G},renderedExtent:function Q(){var J=this.width(),Z=this.height();return{x1:0,y1:0,x2:J,y2:Z,w:J,h:Z}},multiClickDebounceTime:function Q(J){if(J)this._private.multiClickDebounceTime=J;else return this._private.multiClickDebounceTime;return this}};FJ.centre=FJ.center;FJ.autolockNodes=FJ.autolock;FJ.autoungrabifyNodes=FJ.autoungrabify;var L9={data:w0.data({field:"data",bindingEvent:"data",allowBinding:!0,allowSetting:!0,settingEvent:"data",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,updateStyle:!0}),removeData:w0.removeData({field:"data",event:"data",triggerFnName:"trigger",triggerEvent:!0,updateStyle:!0}),scratch:w0.data({field:"scratch",bindingEvent:"scratch",allowBinding:!0,allowSetting:!0,settingEvent:"scratch",settingTriggersEvent:!0,triggerFnName:"trigger",allowGetting:!0,updateStyle:!0}),removeScratch:w0.removeData({field:"scratch",event:"scratch",triggerFnName:"trigger",triggerEvent:!0,updateStyle:!0})};L9.attr=L9.data;L9.removeAttr=L9.removeData;var z9=function Q(J){var Z=this;J=V0({},J);var $=J.container;if($&&!a9($)&&a9($[0]))$=$[0];var G=$?$._cyreg:null;if(G=G||{},G&&G.cy)G.cy.destroy(),G={};var F=G.readies=G.readies||[];if($)$._cyreg=G;G.cy=Z;var U=x0!==void 0&&$!==void 0&&!J.headless,K=J;K.layout=V0({name:U?"grid":"null"},K.layout),K.renderer=V0({name:U?"canvas":"null"},K.renderer);var M=function V(R,Y,X){if(Y!==void 0)return Y;else if(X!==void 0)return X;else return R},q=this._private={container:$,ready:!1,options:K,elements:new r0(this),listeners:[],aniEles:new r0(this),data:K.data||{},scratch:{},layout:null,renderer:null,destroyed:!1,notificationsEnabled:!0,minZoom:0.00000000000000000000000000000000000000000000000001,maxZoom:100000000000000000000000000000000000000000000000000,zoomingEnabled:M(!0,K.zoomingEnabled),userZoomingEnabled:M(!0,K.userZoomingEnabled),panningEnabled:M(!0,K.panningEnabled),userPanningEnabled:M(!0,K.userPanningEnabled),boxSelectionEnabled:M(!0,K.boxSelectionEnabled),autolock:M(!1,K.autolock,K.autolockNodes),autoungrabify:M(!1,K.autoungrabify,K.autoungrabifyNodes),autounselectify:M(!1,K.autounselectify),styleEnabled:K.styleEnabled===void 0?U:K.styleEnabled,zoom:$0(K.zoom)?K.zoom:1,pan:{x:D0(K.pan)&&$0(K.pan.x)?K.pan.x:0,y:D0(K.pan)&&$0(K.pan.y)?K.pan.y:0},animation:{current:[],queue:[]},hasCompoundNodes:!1,multiClickDebounceTime:M(250,K.multiClickDebounceTime)};this.createEmitter(),this.selectionType(K.selectionType),this.zoomRange({min:K.minZoom,max:K.maxZoom});var L=function V(R,Y){var X=R.some(mU);if(X)return vJ.all(R).then(Y);else Y(R)};if(q.styleEnabled)Z.setStyle([]);var z=V0({},K,K.renderer);Z.initRenderer(z);var A=function V(R,Y,X){Z.notifications(!1);var B=Z.mutableElements();if(B.length>0)B.remove();if(R!=null){if(D0(R)||b0(R))Z.add(R)}Z.one("layoutready",function(N){Z.notifications(!0),Z.emit(N),Z.one("load",Y),Z.emitAndNotify("load")}).one("layoutstop",function(){Z.one("done",X),Z.emit("done")});var O=V0({},Z._private.options.layout);O.eles=Z.elements(),Z.layout(O).run()};L([K.style,K.elements],function(V){var R=V[0],Y=V[1];if(q.styleEnabled)Z.style().append(R);A(Y,function(){if(Z.startAnimationLoop(),q.ready=!0,f0(K.ready))Z.on("ready",K.ready);for(var X=0;X<F.length;X++){var B=F[X];Z.on("ready",B)}if(G)G.readies=[];Z.emit("ready")},K.done)})},J6=z9.prototype;V0(J6,{instanceString:function Q(){return"core"},isReady:function Q(){return this._private.ready},destroyed:function Q(){return this._private.destroyed},ready:function Q(J){if(this.isReady())this.emitter().emit("ready",[],J);else this.on("ready",J);return this},destroy:function Q(){var J=this;if(J.destroyed())return;return J.stopAnimationLoop(),J.destroyRenderer(),this.emit("destroy"),J._private.destroyed=!0,J},hasElementWithId:function Q(J){return this._private.elements.hasElementWithId(J)},getElementById:function Q(J){return this._private.elements.getElementById(J)},hasCompoundNodes:function Q(){return this._private.hasCompoundNodes},headless:function Q(){return this._private.renderer.isHeadless()},styleEnabled:function Q(){return this._private.styleEnabled},addToPool:function Q(J){return this._private.elements.merge(J),this},removeFromPool:function Q(J){return this._private.elements.unmerge(J),this},container:function Q(){return this._private.container||null},window:function Q(){var J=this._private.container;if(J==null)return x0;var Z=this._private.container.ownerDocument;if(Z===void 0||Z==null)return x0;return Z.defaultView||x0},mount:function Q(J){if(J==null)return;var Z=this,$=Z._private,G=$.options;if(!a9(J)&&a9(J[0]))J=J[0];return Z.stopAnimationLoop(),Z.destroyRenderer(),$.container=J,$.styleEnabled=!0,Z.invalidateSize(),Z.initRenderer(V0({},G,G.renderer,{name:G.renderer.name==="null"?"canvas":G.renderer.name})),Z.startAnimationLoop(),Z.style(G.style),Z.emit("mount"),Z},unmount:function Q(){var J=this;return J.stopAnimationLoop(),J.destroyRenderer(),J.initRenderer({name:"null"}),J.emit("unmount"),J},options:function Q(){return j8(this._private.options)},json:function Q(J){var Z=this,$=Z._private,G=Z.mutableElements(),F=function N(H){return Z.getElementById(H.id())};if(D0(J)){if(Z.startBatch(),J.elements){var U={},K=function N(H,j){var D=[],k=[];for(var C=0;C<H.length;C++){var E=H[C];if(!E.data.id){P0("cy.json() cannot handle elements without an ID attribute");continue}var S=""+E.data.id,w=Z.getElementById(S);if(U[S]=!0,w.length!==0)k.push({ele:w,json:E});else if(j)E.group=j,D.push(E);else D.push(E)}Z.add(D);for(var T=0;T<k.length;T++){var v=k[T],I=v.ele,_=v.json;I.json(_)}};if(b0(J.elements))K(J.elements);else{var M=["nodes","edges"];for(var q=0;q<M.length;q++){var L=M[q],z=J.elements[L];if(b0(z))K(z,L)}}var A=Z.collection();G.filter(function(N){return!U[N.id()]}).forEach(function(N){if(N.isParent())A.merge(N);else N.remove()}),A.forEach(function(N){return N.children().move({parent:null})}),A.forEach(function(N){return F(N).remove()})}if(J.style)Z.style(J.style);if(J.zoom!=null&&J.zoom!==$.zoom)Z.zoom(J.zoom);if(J.pan){if(J.pan.x!==$.pan.x||J.pan.y!==$.pan.y)Z.pan(J.pan)}if(J.data)Z.data(J.data);var V=["minZoom","maxZoom","zoomingEnabled","userZoomingEnabled","panningEnabled","userPanningEnabled","boxSelectionEnabled","autolock","autoungrabify","autounselectify","multiClickDebounceTime"];for(var R=0;R<V.length;R++){var Y=V[R];if(J[Y]!=null)Z[Y](J[Y])}return Z.endBatch(),this}else{var X=!!J,B={};if(X)B.elements=this.elements().map(function(N){return N.json()});else B.elements={},G.forEach(function(N){var H=N.group();if(!B.elements[H])B.elements[H]=[];B.elements[H].push(N.json())});if(this._private.styleEnabled)B.style=Z.style().json();B.data=j8(Z.data());var O=$.options;return B.zoomingEnabled=$.zoomingEnabled,B.userZoomingEnabled=$.userZoomingEnabled,B.zoom=$.zoom,B.minZoom=$.minZoom,B.maxZoom=$.maxZoom,B.panningEnabled=$.panningEnabled,B.userPanningEnabled=$.userPanningEnabled,B.pan=j8($.pan),B.boxSelectionEnabled=$.boxSelectionEnabled,B.renderer=j8(O.renderer),B.hideEdgesOnViewport=O.hideEdgesOnViewport,B.textureOnViewport=O.textureOnViewport,B.wheelSensitivity=O.wheelSensitivity,B.motionBlur=O.motionBlur,B.multiClickDebounceTime=O.multiClickDebounceTime,B}}});J6.$id=J6.getElementById;[wM,uM,l$,i6,p9,fM,a6,l9,yM,FJ,L9].forEach(function(Q){V0(J6,Q)});var cM={fit:!0,directed:!1,padding:30,circle:!1,grid:!1,spacingFactor:1.75,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,roots:void 0,depthSort:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}},dM={maximal:!1,acyclic:!1},HJ=function Q(J){return J.scratch("breadthfirst")},_Z=function Q(J,Z){return J.scratch("breadthfirst",Z)};i$.prototype.run=function(){var Q=this.options,J=Q,Z=Q.cy,$=J.eles,G=$.nodes().filter(function(Q0){return!Q0.isParent()}),F=$,U=J.directed,K=J.acyclic||J.maximal||J.maximalAdjustments>0,M=L8(J.boundingBox?J.boundingBox:{x1:0,y1:0,w:Z.width(),h:Z.height()}),q;if(z8(J.roots))q=J.roots;else if(b0(J.roots)){var L=[];for(var z=0;z<J.roots.length;z++){var A=J.roots[z],V=Z.getElementById(A);L.push(V)}q=Z.collection(L)}else if(R0(J.roots))q=Z.$(J.roots);else if(U)q=G.roots();else{var R=$.components();q=Z.collection();var Y=function Q0(Z0){var L0=R[Z0],M0=L0.maxDegree(!1),U0=L0.filter(function(z0){return z0.degree(!1)===M0});q=q.add(U0)};for(var X=0;X<R.length;X++)Y(X)}var B=[],O={},N=function Q0(Z0,L0){if(B[L0]==null)B[L0]=[];var M0=B[L0].length;B[L0].push(Z0),_Z(Z0,{index:M0,depth:L0})},H=function Q0(Z0,L0){var M0=HJ(Z0),U0=M0.depth,z0=M0.index;B[U0][z0]=null,N(Z0,L0)};F.bfs({roots:q,directed:J.directed,visit:function Q0(Z0,L0,M0,U0,z0){var W0=Z0[0],k0=W0.id();N(W0,z0),O[k0]=!0}});var j=[];for(var D=0;D<G.length;D++){var k=G[D];if(O[k.id()])continue;else j.push(k)}var C=function Q0(Z0){var L0=B[Z0];for(var M0=0;M0<L0.length;M0++){var U0=L0[M0];if(U0==null){L0.splice(M0,1),M0--;continue}_Z(U0,{depth:Z0,index:M0})}},E=function Q0(){for(var Z0=0;Z0<B.length;Z0++)C(Z0)},S=function Q0(Z0,L0){var M0=HJ(Z0),U0=Z0.incomers().filter(function(W){return W.isNode()&&$.has(W)}),z0=-1,W0=Z0.id();for(var k0=0;k0<U0.length;k0++){var X0=U0[k0],E0=HJ(X0);z0=Math.max(z0,E0.depth)}if(M0.depth<=z0){if(!J.acyclic&&L0[W0])return null;var y=z0+1;return H(Z0,y),L0[W0]=y,!0}return!1};if(U&&K){var w=[],T={},v=function Q0(Z0){return w.push(Z0)},I=function Q0(){return w.shift()};G.forEach(function(Q0){return w.push(Q0)});while(w.length>0){var _=I(),b=S(_,T);if(b)_.outgoers().filter(function(Q0){return Q0.isNode()&&$.has(Q0)}).forEach(v);else if(b===null){P0("Detected double maximal shift for node `"+_.id()+"`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.");break}}}E();var P=0;if(J.avoidOverlap)for(var u=0;u<G.length;u++){var h=G[u],p=h.layoutDimensions(J),m=p.w,c=p.h;P=Math.max(P,m,c)}var i={},r=function Q0(Z0){if(i[Z0.id()])return i[Z0.id()];var L0=HJ(Z0).depth,M0=Z0.neighborhood(),U0=0,z0=0;for(var W0=0;W0<M0.length;W0++){var k0=M0[W0];if(k0.isEdge()||k0.isParent()||!G.has(k0))continue;var X0=HJ(k0);if(X0==null)continue;var{index:E0,depth:y}=X0;if(E0==null||y==null)continue;var W=B[y].length;if(y<L0)U0+=E0/W,z0++}if(z0=Math.max(1,z0),U0=U0/z0,z0===0)U0=0;return i[Z0.id()]=U0,U0},a=function Q0(Z0,L0){var M0=r(Z0),U0=r(L0),z0=M0-U0;if(z0===0)return Q$(Z0.id(),L0.id());else return z0};if(J.depthSort!==void 0)a=J.depthSort;for(var n=0;n<B.length;n++)B[n].sort(a),C(n);var f=[];for(var o=0;o<j.length;o++)f.push(j[o]);B.unshift(f),E();var e=0;for(var t=0;t<B.length;t++)e=Math.max(B[t].length,e);var J0={x:M.x1+M.w/2,y:M.x1+M.h/2},K0=B.reduce(function(Q0,Z0){return Math.max(Q0,Z0.length)},0),Y0=function Q0(Z0){var L0=HJ(Z0),M0=L0.depth,U0=L0.index,z0=B[M0].length,W0=Math.max(M.w/((J.grid?K0:z0)+1),P),k0=Math.max(M.h/(B.length+1),P),X0=Math.min(M.w/2/B.length,M.h/2/B.length);if(X0=Math.max(X0,P),!J.circle){var E0={x:J0.x+(U0+1-(z0+1)/2)*W0,y:(M0+1)*k0};return E0}else{var y=X0*M0+X0-(B.length>0&&B[0].length<=3?X0/2:0),W=2*Math.PI/B[M0].length*U0;if(M0===0&&B[0].length===1)y=1;return{x:J0.x+y*Math.cos(W),y:J0.y+y*Math.sin(W)}}};return $.nodes().layoutPositions(this,J,Y0),this};var pM={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,spacingFactor:void 0,radius:void 0,startAngle:1.5*Math.PI,sweep:void 0,clockwise:!0,sort:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}};a$.prototype.run=function(){var Q=this.options,J=Q,Z=Q.cy,$=J.eles,G=J.counterclockwise!==void 0?!J.counterclockwise:J.clockwise,F=$.nodes().not(":parent");if(J.sort)F=F.sort(J.sort);var U=L8(J.boundingBox?J.boundingBox:{x1:0,y1:0,w:Z.width(),h:Z.height()}),K={x:U.x1+U.w/2,y:U.y1+U.h/2},M=J.sweep===void 0?2*Math.PI-2*Math.PI/F.length:J.sweep,q=M/Math.max(1,F.length-1),L,z=0;for(var A=0;A<F.length;A++){var V=F[A],R=V.layoutDimensions(J),Y=R.w,X=R.h;z=Math.max(z,Y,X)}if($0(J.radius))L=J.radius;else if(F.length<=1)L=0;else L=Math.min(U.h,U.w)/2-z;if(F.length>1&&J.avoidOverlap){z*=1.75;var B=Math.cos(q)-Math.cos(0),O=Math.sin(q)-Math.sin(0),N=Math.sqrt(z*z/(B*B+O*O));L=Math.max(N,L)}var H=function j(D,k){var C=J.startAngle+k*q*(G?1:-1),E=L*Math.cos(C),S=L*Math.sin(C),w={x:K.x+E,y:K.y+S};return w};return $.nodes().layoutPositions(this,J,H),this};var lM={fit:!0,padding:30,startAngle:1.5*Math.PI,sweep:void 0,clockwise:!0,equidistant:!1,minNodeSpacing:10,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1,height:void 0,width:void 0,spacingFactor:void 0,concentric:function Q(J){return J.degree()},levelWidth:function Q(J){return J.maxDegree()/4},animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}};n$.prototype.run=function(){var Q=this.options,J=Q,Z=J.counterclockwise!==void 0?!J.counterclockwise:J.clockwise,$=Q.cy,G=J.eles,F=G.nodes().not(":parent"),U=L8(J.boundingBox?J.boundingBox:{x1:0,y1:0,w:$.width(),h:$.height()}),K={x:U.x1+U.w/2,y:U.y1+U.h/2},M=[],q=0;for(var L=0;L<F.length;L++){var z=F[L],A=void 0;A=J.concentric(z),M.push({value:A,node:z}),z._private.scratch.concentric=A}F.updateStyle();for(var V=0;V<F.length;V++){var R=F[V],Y=R.layoutDimensions(J);q=Math.max(q,Y.w,Y.h)}M.sort(function(Q0,Z0){return Z0.value-Q0.value});var X=J.levelWidth(F),B=[[]],O=B[0];for(var N=0;N<M.length;N++){var H=M[N];if(O.length>0){var j=Math.abs(O[0].value-H.value);if(j>=X)O=[],B.push(O)}O.push(H)}var D=q+J.minNodeSpacing;if(!J.avoidOverlap){var k=B.length>0&&B[0].length>1,C=Math.min(U.w,U.h)/2-D,E=C/(B.length+k?1:0);D=Math.min(D,E)}var S=0;for(var w=0;w<B.length;w++){var T=B[w],v=J.sweep===void 0?2*Math.PI-2*Math.PI/T.length:J.sweep,I=T.dTheta=v/Math.max(1,T.length-1);if(T.length>1&&J.avoidOverlap){var _=Math.cos(I)-Math.cos(0),b=Math.sin(I)-Math.sin(0),P=Math.sqrt(D*D/(_*_+b*b));S=Math.max(P,S)}T.r=S,S+=D}if(J.equidistant){var u=0,h=0;for(var p=0;p<B.length;p++){var m=B[p],c=m.r-h;u=Math.max(u,c)}h=0;for(var i=0;i<B.length;i++){var r=B[i];if(i===0)h=r.r;r.r=h,h+=u}}var a={};for(var n=0;n<B.length;n++){var f=B[n],o=f.dTheta,e=f.r;for(var t=0;t<f.length;t++){var J0=f[t],K0=J.startAngle+(Z?1:-1)*o*t,Y0={x:K.x+e*Math.cos(K0),y:K.y+e*Math.sin(K0)};a[J0.node.id()]=Y0}}return G.nodes().layoutPositions(this,J,function(Q0){var Z0=Q0.id();return a[Z0]}),this};var f6,iM={ready:function Q(){},stop:function Q(){},animate:!0,animationEasing:void 0,animationDuration:void 0,animateFilter:function Q(J,Z){return!0},animationThreshold:250,refresh:20,fit:!0,padding:30,boundingBox:void 0,nodeDimensionsIncludeLabels:!1,randomize:!1,componentSpacing:40,nodeRepulsion:function Q(J){return 2048},nodeOverlap:4,idealEdgeLength:function Q(J){return 32},edgeElasticity:function Q(J){return 32},nestingFactor:1.2,gravity:1,numIter:1000,initialTemp:1000,coolingFactor:0.99,minTemp:1};Y6.prototype.run=function(){var Q=this.options,J=Q.cy,Z=this;if(Z.stopped=!1,Q.animate===!0||Q.animate===!1)Z.emit({type:"layoutstart",layout:Z});if(Q.debug===!0)f6=!0;else f6=!1;var $=aM(J,Z,Q);if(f6)rM($);if(Q.randomize)oM($);var G=P8(),F=function z(){if(tM($,J,Q),Q.fit===!0)J.fit(Q.padding)},U=function z(A){if(Z.stopped||A>=Q.numIter)return!1;if(eM($,Q),$.temperature=$.temperature*Q.coolingFactor,$.temperature<Q.minTemp)return!1;return!0},K=function z(){if(Q.animate===!0||Q.animate===!1)F(),Z.one("layoutstop",Q.stop),Z.emit({type:"layoutstop",layout:Z});else{var A=Q.eles.nodes(),V=s$($,Q,A);A.layoutPositions(Z,Q,V)}},M=0,q=!0;if(Q.animate===!0){var L=function z(){var A=0;while(q&&A<Q.refresh)q=U(M),M++,A++;if(!q)mZ($,Q),K();else{var V=P8();if(V-G>=Q.animationThreshold)F();n9(z)}};L()}else{while(q)q=U(M),M++;mZ($,Q),K()}return this};Y6.prototype.stop=function(){if(this.stopped=!0,this.thread)this.thread.stop();return this.emit("layoutstop"),this};Y6.prototype.destroy=function(){if(this.thread)this.thread.stop();return this};var aM=function Q(J,Z,$){var G=$.eles.edges(),F=$.eles.nodes(),U=L8($.boundingBox?$.boundingBox:{x1:0,y1:0,w:J.width(),h:J.height()}),K={isCompound:J.hasCompoundNodes(),layoutNodes:[],idToIndex:{},nodeSize:F.size(),graphSet:[],indexToGraph:[],layoutEdges:[],edgeSize:G.size(),temperature:$.initialTemp,clientWidth:U.w,clientHeight:U.h,boundingBox:U},M=$.eles.components(),q={};for(var L=0;L<M.length;L++){var z=M[L];for(var A=0;A<z.length;A++){var V=z[A];q[V.id()]=L}}for(var L=0;L<K.nodeSize;L++){var R=F[L],Y=R.layoutDimensions($),X={};X.isLocked=R.locked(),X.id=R.data("id"),X.parentId=R.data("parent"),X.cmptId=q[R.id()],X.children=[],X.positionX=R.position("x"),X.positionY=R.position("y"),X.offsetX=0,X.offsetY=0,X.height=Y.w,X.width=Y.h,X.maxX=X.positionX+X.width/2,X.minX=X.positionX-X.width/2,X.maxY=X.positionY+X.height/2,X.minY=X.positionY-X.height/2,X.padLeft=parseFloat(R.style("padding")),X.padRight=parseFloat(R.style("padding")),X.padTop=parseFloat(R.style("padding")),X.padBottom=parseFloat(R.style("padding")),X.nodeRepulsion=f0($.nodeRepulsion)?$.nodeRepulsion(R):$.nodeRepulsion,K.layoutNodes.push(X),K.idToIndex[X.id]=L}var B=[],O=0,N=-1,H=[];for(var L=0;L<K.nodeSize;L++){var R=K.layoutNodes[L],j=R.parentId;if(j!=null)K.layoutNodes[K.idToIndex[j]].children.push(R.id);else B[++N]=R.id,H.push(R.id)}K.graphSet.push(H);while(O<=N){var D=B[O++],k=K.idToIndex[D],V=K.layoutNodes[k],C=V.children;if(C.length>0){K.graphSet.push(C);for(var L=0;L<C.length;L++)B[++N]=C[L]}}for(var L=0;L<K.graphSet.length;L++){var E=K.graphSet[L];for(var A=0;A<E.length;A++){var S=K.idToIndex[E[A]];K.indexToGraph[S]=L}}for(var L=0;L<K.edgeSize;L++){var w=G[L],T={};T.id=w.data("id"),T.sourceId=w.data("source"),T.targetId=w.data("target");var v=f0($.idealEdgeLength)?$.idealEdgeLength(w):$.idealEdgeLength,I=f0($.edgeElasticity)?$.edgeElasticity(w):$.edgeElasticity,_=K.idToIndex[T.sourceId],b=K.idToIndex[T.targetId],P=K.indexToGraph[_],u=K.indexToGraph[b];if(P!=u){var h=nM(T.sourceId,T.targetId,K),p=K.graphSet[h],m=0,X=K.layoutNodes[_];while(p.indexOf(X.id)===-1)X=K.layoutNodes[K.idToIndex[X.parentId]],m++;X=K.layoutNodes[b];while(p.indexOf(X.id)===-1)X=K.layoutNodes[K.idToIndex[X.parentId]],m++;v*=m*$.nestingFactor}T.idealLength=v,T.elasticity=I,K.layoutEdges.push(T)}return K},nM=function Q(J,Z,$){var G=sM(J,Z,0,$);if(2>G.count)return 0;else return G.graph},sM=function Q(J,Z,$,G){var F=G.graphSet[$];if(-1<F.indexOf(J)&&-1<F.indexOf(Z))return{count:2,graph:$};var U=0;for(var K=0;K<F.length;K++){var M=F[K],q=G.idToIndex[M],L=G.layoutNodes[q].children;if(L.length===0)continue;var z=G.indexToGraph[G.idToIndex[L[0]]],A=Q(J,Z,z,G);if(A.count===0)continue;else if(A.count===1){if(U++,U===2)break}else return A}return{count:U,graph:$}},rM,oM=function Q(J,Z){var{clientWidth:$,clientHeight:G}=J;for(var F=0;F<J.nodeSize;F++){var U=J.layoutNodes[F];if(U.children.length===0&&!U.isLocked)U.positionX=Math.random()*$,U.positionY=Math.random()*G}},s$=function Q(J,Z,$){var G=J.boundingBox,F={x1:Infinity,x2:(-Infinity),y1:Infinity,y2:(-Infinity)};if(Z.boundingBox)$.forEach(function(U){var K=J.layoutNodes[J.idToIndex[U.data("id")]];F.x1=Math.min(F.x1,K.positionX),F.x2=Math.max(F.x2,K.positionX),F.y1=Math.min(F.y1,K.positionY),F.y2=Math.max(F.y2,K.positionY)}),F.w=F.x2-F.x1,F.h=F.y2-F.y1;return function(U,K){var M=J.layoutNodes[J.idToIndex[U.data("id")]];if(Z.boundingBox){var q=(M.positionX-F.x1)/F.w,L=(M.positionY-F.y1)/F.h;return{x:G.x1+q*G.w,y:G.y1+L*G.h}}else return{x:M.positionX,y:M.positionY}}},tM=function Q(J,Z,$){var G=$.layout,F=$.eles.nodes(),U=s$(J,$,F);if(F.positions(U),J.ready!==!0)J.ready=!0,G.one("layoutready",$.ready),G.emit({type:"layoutready",layout:this})},eM=function Q(J,Z,$){JL(J,Z),$L(J),GL(J,Z),FL(J),UL(J)},JL=function Q(J,Z){for(var $=0;$<J.graphSet.length;$++){var G=J.graphSet[$],F=G.length;for(var U=0;U<F;U++){var K=J.layoutNodes[J.idToIndex[G[U]]];for(var M=U+1;M<F;M++){var q=J.layoutNodes[J.idToIndex[G[M]]];QL(K,q,J,Z)}}}},uZ=function Q(J){return-J+2*J*Math.random()},QL=function Q(J,Z,$,G){var F=J.cmptId,U=Z.cmptId;if(F!==U&&!$.isCompound)return;var K=Z.positionX-J.positionX,M=Z.positionY-J.positionY,q=1;if(K===0&&M===0)K=uZ(q),M=uZ(q);var L=ZL(J,Z,K,M);if(L>0)var z=G.nodeOverlap*L,A=Math.sqrt(K*K+M*M),V=z*K/A,R=z*M/A;else var Y=Q6(J,K,M),X=Q6(Z,-1*K,-1*M),B=X.x-Y.x,O=X.y-Y.y,N=B*B+O*O,A=Math.sqrt(N),z=(J.nodeRepulsion+Z.nodeRepulsion)/N,V=z*B/A,R=z*O/A;if(!J.isLocked)J.offsetX-=V,J.offsetY-=R;if(!Z.isLocked)Z.offsetX+=V,Z.offsetY+=R;return},ZL=function Q(J,Z,$,G){if($>0)var F=J.maxX-Z.minX;else var F=Z.maxX-J.minX;if(G>0)var U=J.maxY-Z.minY;else var U=Z.maxY-J.minY;if(F>=0&&U>=0)return Math.sqrt(F*F+U*U);else return 0},Q6=function Q(J,Z,$){var{positionX:G,positionY:F}=J,U=J.height||1,K=J.width||1,M=$/Z,q=U/K,L={};if(Z===0&&0<$)return L.x=G,L.y=F+U/2,L;if(Z===0&&0>$)return L.x=G,L.y=F+U/2,L;if(0<Z&&-1*q<=M&&M<=q)return L.x=G+K/2,L.y=F+K*$/2/Z,L;if(0>Z&&-1*q<=M&&M<=q)return L.x=G-K/2,L.y=F-K*$/2/Z,L;if(0<$&&(M<=-1*q||M>=q))return L.x=G+U*Z/2/$,L.y=F+U/2,L;if(0>$&&(M<=-1*q||M>=q))return L.x=G-U*Z/2/$,L.y=F-U/2,L;return L},$L=function Q(J,Z){for(var $=0;$<J.edgeSize;$++){var G=J.layoutEdges[$],F=J.idToIndex[G.sourceId],U=J.layoutNodes[F],K=J.idToIndex[G.targetId],M=J.layoutNodes[K],q=M.positionX-U.positionX,L=M.positionY-U.positionY;if(q===0&&L===0)continue;var z=Q6(U,q,L),A=Q6(M,-1*q,-1*L),V=A.x-z.x,R=A.y-z.y,Y=Math.sqrt(V*V+R*R),X=Math.pow(G.idealLength-Y,2)/G.elasticity;if(Y!==0)var B=X*V/Y,O=X*R/Y;else var B=0,O=0;if(!U.isLocked)U.offsetX+=B,U.offsetY+=O;if(!M.isLocked)M.offsetX-=B,M.offsetY-=O}},GL=function Q(J,Z){if(Z.gravity===0)return;var $=1;for(var G=0;G<J.graphSet.length;G++){var F=J.graphSet[G],U=F.length;if(G===0)var K=J.clientHeight/2,M=J.clientWidth/2;else var q=J.layoutNodes[J.idToIndex[F[0]]],L=J.layoutNodes[J.idToIndex[q.parentId]],K=L.positionX,M=L.positionY;for(var z=0;z<U;z++){var A=J.layoutNodes[J.idToIndex[F[z]]];if(A.isLocked)continue;var V=K-A.positionX,R=M-A.positionY,Y=Math.sqrt(V*V+R*R);if(Y>$){var X=Z.gravity*V/Y,B=Z.gravity*R/Y;A.offsetX+=X,A.offsetY+=B}}}},FL=function Q(J,Z){var $=[],G=0,F=-1;$.push.apply($,J.graphSet[0]),F+=J.graphSet[0].length;while(G<=F){var U=$[G++],K=J.idToIndex[U],M=J.layoutNodes[K],q=M.children;if(0<q.length&&!M.isLocked){var{offsetX:L,offsetY:z}=M;for(var A=0;A<q.length;A++){var V=J.layoutNodes[J.idToIndex[q[A]]];V.offsetX+=L,V.offsetY+=z,$[++F]=q[A]}M.offsetX=0,M.offsetY=0}}},UL=function Q(J,Z){for(var $=0;$<J.nodeSize;$++){var G=J.layoutNodes[$];if(0<G.children.length)G.maxX=void 0,G.minX=void 0,G.maxY=void 0,G.minY=void 0}for(var $=0;$<J.nodeSize;$++){var G=J.layoutNodes[$];if(0<G.children.length||G.isLocked)continue;var F=KL(G.offsetX,G.offsetY,J.temperature);G.positionX+=F.x,G.positionY+=F.y,G.offsetX=0,G.offsetY=0,G.minX=G.positionX-G.width,G.maxX=G.positionX+G.width,G.minY=G.positionY-G.height,G.maxY=G.positionY+G.height,qL(G,J)}for(var $=0;$<J.nodeSize;$++){var G=J.layoutNodes[$];if(0<G.children.length&&!G.isLocked)G.positionX=(G.maxX+G.minX)/2,G.positionY=(G.maxY+G.minY)/2,G.width=G.maxX-G.minX,G.height=G.maxY-G.minY}},KL=function Q(J,Z,$){var G=Math.sqrt(J*J+Z*Z);if(G>$)var F={x:$*J/G,y:$*Z/G};else var F={x:J,y:Z};return F},qL=function Q(J,Z){var $=J.parentId;if($==null)return;var G=Z.layoutNodes[Z.idToIndex[$]],F=!1;if(G.maxX==null||J.maxX+G.padRight>G.maxX)G.maxX=J.maxX+G.padRight,F=!0;if(G.minX==null||J.minX-G.padLeft<G.minX)G.minX=J.minX-G.padLeft,F=!0;if(G.maxY==null||J.maxY+G.padBottom>G.maxY)G.maxY=J.maxY+G.padBottom,F=!0;if(G.minY==null||J.minY-G.padTop<G.minY)G.minY=J.minY-G.padTop,F=!0;if(F)return Q(G,Z);return},mZ=function Q(J,Z){var $=J.layoutNodes,G=[];for(var F=0;F<$.length;F++){var U=$[F],K=U.cmptId,M=G[K]=G[K]||[];M.push(U)}var q=0;for(var F=0;F<G.length;F++){var L=G[F];if(!L)continue;L.x1=Infinity,L.x2=(-Infinity),L.y1=Infinity,L.y2=(-Infinity);for(var z=0;z<L.length;z++){var A=L[z];L.x1=Math.min(L.x1,A.positionX-A.width/2),L.x2=Math.max(L.x2,A.positionX+A.width/2),L.y1=Math.min(L.y1,A.positionY-A.height/2),L.y2=Math.max(L.y2,A.positionY+A.height/2)}L.w=L.x2-L.x1,L.h=L.y2-L.y1,q+=L.w*L.h}G.sort(function(O,N){return N.w*N.h-O.w*O.h});var V=0,R=0,Y=0,X=0,B=Math.sqrt(q)*J.clientWidth/J.clientHeight;for(var F=0;F<G.length;F++){var L=G[F];if(!L)continue;for(var z=0;z<L.length;z++){var A=L[z];if(!A.isLocked)A.positionX+=V-L.x1,A.positionY+=R-L.y1}if(V+=L.w+Z.componentSpacing,Y+=L.w+Z.componentSpacing,X=Math.max(X,L.h),Y>B)R+=X+Z.componentSpacing,V=0,Y=0,X=0}},ML={fit:!0,padding:30,boundingBox:void 0,avoidOverlap:!0,avoidOverlapPadding:10,nodeDimensionsIncludeLabels:!1,spacingFactor:void 0,condense:!1,rows:void 0,cols:void 0,position:function Q(J){},sort:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}};r$.prototype.run=function(){var Q=this.options,J=Q,Z=Q.cy,$=J.eles,G=$.nodes().not(":parent");if(J.sort)G=G.sort(J.sort);var F=L8(J.boundingBox?J.boundingBox:{x1:0,y1:0,w:Z.width(),h:Z.height()});if(F.h===0||F.w===0)$.nodes().layoutPositions(this,J,function(i){return{x:F.x1,y:F.y1}});else{var U=G.size(),K=Math.sqrt(U*F.h/F.w),M=Math.round(K),q=Math.round(F.w/F.h*K),L=function i(r){if(r==null)return Math.min(M,q);else{var a=Math.min(M,q);if(a==M)M=r;else q=r}},z=function i(r){if(r==null)return Math.max(M,q);else{var a=Math.max(M,q);if(a==M)M=r;else q=r}},A=J.rows,V=J.cols!=null?J.cols:J.columns;if(A!=null&&V!=null)M=A,q=V;else if(A!=null&&V==null)M=A,q=Math.ceil(U/M);else if(A==null&&V!=null)q=V,M=Math.ceil(U/q);else if(q*M>U){var R=L(),Y=z();if((R-1)*Y>=U)L(R-1);else if((Y-1)*R>=U)z(Y-1)}else while(q*M<U){var X=L(),B=z();if((B+1)*X>=U)z(B+1);else L(X+1)}var O=F.w/q,N=F.h/M;if(J.condense)O=0,N=0;if(J.avoidOverlap)for(var H=0;H<G.length;H++){var j=G[H],D=j._private.position;if(D.x==null||D.y==null)D.x=0,D.y=0;var k=j.layoutDimensions(J),C=J.avoidOverlapPadding,E=k.w+C,S=k.h+C;O=Math.max(O,E),N=Math.max(N,S)}var w={},T=function i(r,a){return w["c-"+r+"-"+a]?!0:!1},v=function i(r,a){w["c-"+r+"-"+a]=!0},I=0,_=0,b=function i(){if(_++,_>=q)_=0,I++},P={};for(var u=0;u<G.length;u++){var h=G[u],p=J.position(h);if(p&&(p.row!==void 0||p.col!==void 0)){var m={row:p.row,col:p.col};if(m.col===void 0){m.col=0;while(T(m.row,m.col))m.col++}else if(m.row===void 0){m.row=0;while(T(m.row,m.col))m.row++}P[h.id()]=m,v(m.row,m.col)}}var c=function i(r,a){var n,f;if(r.locked()||r.isParent())return!1;var o=P[r.id()];if(o)n=o.col*O+O/2+F.x1,f=o.row*N+N/2+F.y1;else{while(T(I,_))b();n=_*O+O/2+F.x1,f=I*N+N/2+F.y1,v(I,_),b()}return{x:n,y:f}};G.layoutPositions(this,J,c)}return this};var LL={ready:function Q(){},stop:function Q(){}};V7.prototype.run=function(){var Q=this.options,J=Q.eles,Z=this;return Q.cy,Z.emit("layoutstart"),J.nodes().positions(function(){return{x:0,y:0}}),Z.one("layoutready",Q.ready),Z.emit("layoutready"),Z.one("layoutstop",Q.stop),Z.emit("layoutstop"),this};V7.prototype.stop=function(){return this};var zL={positions:void 0,zoom:void 0,pan:void 0,fit:!0,padding:30,spacingFactor:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}};o$.prototype.run=function(){var Q=this.options,J=Q.eles,Z=J.nodes(),$=f0(Q.positions);function G(F){if(Q.positions==null)return EK(F.position());if($)return Q.positions(F);var U=Q.positions[F._private.data.id];if(U==null)return null;return U}return Z.layoutPositions(this,Q,function(F,U){var K=G(F);if(F.locked()||K==null)return!1;return K}),this};var AL={fit:!0,padding:30,boundingBox:void 0,animate:!1,animationDuration:500,animationEasing:void 0,animateFilter:function Q(J,Z){return!0},ready:void 0,stop:void 0,transform:function Q(J,Z){return Z}};t$.prototype.run=function(){var Q=this.options,J=Q.cy,Z=Q.eles,$=L8(Q.boundingBox?Q.boundingBox:{x1:0,y1:0,w:J.width(),h:J.height()}),G=function F(U,K){return{x:$.x1+Math.round(Math.random()*$.w),y:$.y1+Math.round(Math.random()*$.h)}};return Z.nodes().layoutPositions(this,Q,G),this};var RL=[{name:"breadthfirst",impl:i$},{name:"circle",impl:a$},{name:"concentric",impl:n$},{name:"cose",impl:Y6},{name:"grid",impl:r$},{name:"null",impl:V7},{name:"preset",impl:o$},{name:"random",impl:t$}],fZ=function Q(){},gZ=function Q(){throw new Error("A headless instance can not render images")};e$.prototype={recalculateRenderedStyle:fZ,notify:function Q(){this.notifications++},init:fZ,isHeadless:function Q(){return!0},png:gZ,jpg:gZ};var Y7={};Y7.arrowShapeWidth=0.3;Y7.registerArrowShapes=function(){var Q=this.arrowShapes={},J=this,Z=function M(q,L,z,A,V,R,Y){var X=V.x-z/2-Y,B=V.x+z/2+Y,O=V.y-z/2-Y,N=V.y+z/2+Y,H=X<=q&&q<=B&&O<=L&&L<=N;return H},$=function M(q,L,z,A,V){var R=q*Math.cos(A)-L*Math.sin(A),Y=q*Math.sin(A)+L*Math.cos(A),X=R*z,B=Y*z,O=X+V.x,N=B+V.y;return{x:O,y:N}},G=function M(q,L,z,A){var V=[];for(var R=0;R<q.length;R+=2){var Y=q[R],X=q[R+1];V.push($(Y,X,L,z,A))}return V},F=function M(q){var L=[];for(var z=0;z<q.length;z++){var A=q[z];L.push(A.x,A.y)}return L},U=function M(q){return q.pstyle("width").pfValue*q.pstyle("arrow-scale").pfValue*2},K=function M(q,L){if(R0(L))L=Q[L];Q[q]=V0({name:q,points:[-0.15,-0.3,0.15,-0.3,0.15,0.3,-0.15,0.3],collide:function z(A,V,R,Y,X,B){var O=F(G(this.points,R+2*B,Y,X)),N=M8(A,V,O);return N},roughCollide:Z,draw:function z(A,V,R,Y){var X=G(this.points,V,R,Y);J.arrowShapeImpl("polygon")(A,X)},spacing:function z(A){return 0},gap:U},L)};K("none",{collide:s9,roughCollide:s9,draw:$7,spacing:e5,gap:e5}),K("triangle",{points:[-0.15,-0.3,0,0,0.15,-0.3]}),K("arrow","triangle"),K("triangle-backcurve",{points:Q.triangle.points,controlPoint:[0,-0.15],roughCollide:Z,draw:function M(q,L,z,A,V){var R=G(this.points,L,z,A),Y=this.controlPoint,X=$(Y[0],Y[1],L,z,A);J.arrowShapeImpl(this.name)(q,R,X)},gap:function M(q){return U(q)*0.8}}),K("triangle-tee",{points:[0,0,0.15,-0.3,-0.15,-0.3,0,0],pointsTee:[-0.15,-0.4,-0.15,-0.5,0.15,-0.5,0.15,-0.4],collide:function M(q,L,z,A,V,R,Y){var X=F(G(this.points,z+2*Y,A,V)),B=F(G(this.pointsTee,z+2*Y,A,V)),O=M8(q,L,X)||M8(q,L,B);return O},draw:function M(q,L,z,A,V){var R=G(this.points,L,z,A),Y=G(this.pointsTee,L,z,A);J.arrowShapeImpl(this.name)(q,R,Y)}}),K("circle-triangle",{radius:0.15,pointsTr:[0,-0.15,0.15,-0.45,-0.15,-0.45,0,-0.15],collide:function M(q,L,z,A,V,R,Y){var X=V,B=Math.pow(X.x-q,2)+Math.pow(X.y-L,2)<=Math.pow((z+2*Y)*this.radius,2),O=F(G(this.points,z+2*Y,A,V));return M8(q,L,O)||B},draw:function M(q,L,z,A,V){var R=G(this.pointsTr,L,z,A);J.arrowShapeImpl(this.name)(q,R,A.x,A.y,this.radius*L)},spacing:function M(q){return J.getArrowWidth(q.pstyle("width").pfValue,q.pstyle("arrow-scale").value)*this.radius}}),K("triangle-cross",{points:[0,0,0.15,-0.3,-0.15,-0.3,0,0],baseCrossLinePts:[-0.15,-0.4,-0.15,-0.4,0.15,-0.4,0.15,-0.4],crossLinePts:function M(q,L){var z=this.baseCrossLinePts.slice(),A=L/q,V=3,R=5;return z[V]=z[V]-A,z[R]=z[R]-A,z},collide:function M(q,L,z,A,V,R,Y){var X=F(G(this.points,z+2*Y,A,V)),B=F(G(this.crossLinePts(z,R),z+2*Y,A,V)),O=M8(q,L,X)||M8(q,L,B);return O},draw:function M(q,L,z,A,V){var R=G(this.points,L,z,A),Y=G(this.crossLinePts(L,V),L,z,A);J.arrowShapeImpl(this.name)(q,R,Y)}}),K("vee",{points:[-0.15,-0.3,0,0,0.15,-0.3,0,-0.15],gap:function M(q){return U(q)*0.525}}),K("circle",{radius:0.15,collide:function M(q,L,z,A,V,R,Y){var X=V,B=Math.pow(X.x-q,2)+Math.pow(X.y-L,2)<=Math.pow((z+2*Y)*this.radius,2);return B},draw:function M(q,L,z,A,V){J.arrowShapeImpl(this.name)(q,A.x,A.y,this.radius*L)},spacing:function M(q){return J.getArrowWidth(q.pstyle("width").pfValue,q.pstyle("arrow-scale").value)*this.radius}}),K("tee",{points:[-0.15,0,-0.15,-0.1,0.15,-0.1,0.15,0],spacing:function M(q){return 1},gap:function M(q){return 1}}),K("square",{points:[-0.15,0,0.15,0,0.15,-0.3,-0.15,-0.3]}),K("diamond",{points:[-0.15,-0.15,0,-0.3,0.15,-0.15,0,0],gap:function M(q){return q.pstyle("width").pfValue*q.pstyle("arrow-scale").value}}),K("chevron",{points:[0,0,-0.15,-0.15,-0.1,-0.2,0,-0.1,0.1,-0.2,0.15,-0.15],gap:function M(q){return 0.95*q.pstyle("width").pfValue*q.pstyle("arrow-scale").value}})};var qJ={};qJ.projectIntoViewport=function(Q,J){var Z=this.cy,$=this.findContainerClientCoords(),G=$[0],F=$[1],U=$[4],K=Z.pan(),M=Z.zoom(),q=((Q-G)/U-K.x)/M,L=((J-F)/U-K.y)/M;return[q,L]};qJ.findContainerClientCoords=function(){if(this.containerBB)return this.containerBB;var Q=this.container,J=Q.getBoundingClientRect(),Z=this.cy.window().getComputedStyle(Q),$=function X(B){return parseFloat(Z.getPropertyValue(B))},G={left:$("padding-left"),right:$("padding-right"),top:$("padding-top"),bottom:$("padding-bottom")},F={left:$("border-left-width"),right:$("border-right-width"),top:$("border-top-width"),bottom:$("border-bottom-width")},U=Q.clientWidth,K=Q.clientHeight,M=G.left+G.right,q=G.top+G.bottom,L=F.left+F.right,z=J.width/(U+L),A=U-M,V=K-q,R=J.left+G.left+F.left,Y=J.top+G.top+F.top;return this.containerBB=[R,Y,A,V,z]};qJ.invalidateContainerClientCoordsCache=function(){this.containerBB=null};qJ.findNearestElement=function(Q,J,Z,$){return this.findNearestElements(Q,J,Z,$)[0]};qJ.findNearestElements=function(Q,J,Z,$){var G=this,F=this,U=F.getCachedZSortedEles(),K=[],M=F.cy.zoom(),q=F.cy.hasCompoundNodes(),L=($?24:8)/M,z=($?8:2)/M,A=($?8:2)/M,V=Infinity,R,Y;if(Z)U=U.interactive;function X(k,C){if(k.isNode())if(Y)return;else Y=k,K.push(k);if(k.isEdge()&&(C==null||C<V))if(R){if(R.pstyle("z-compound-depth").value===k.pstyle("z-compound-depth").value&&R.pstyle("z-compound-depth").value===k.pstyle("z-compound-depth").value){for(var E=0;E<K.length;E++)if(K[E].isEdge()){K[E]=k,R=k,V=C!=null?C:V;break}}}else K.push(k),R=k,V=C!=null?C:V}function B(k){var C=k.outerWidth()+2*z,E=k.outerHeight()+2*z,S=C/2,w=E/2,T=k.position();if(T.x-S<=Q&&Q<=T.x+S&&T.y-w<=J&&J<=T.y+w){var v=F.nodeShapes[G.getNodeShape(k)];if(v.checkPoint(Q,J,0,C,E,T.x,T.y))return X(k,0),!0}}function O(k){var C=k._private,E=C.rscratch,S=k.pstyle("width").pfValue,w=k.pstyle("arrow-scale").value,T=S/2+L,v=T*T,I=T*2,u=C.source,h=C.target,_;if(E.edgeType==="segments"||E.edgeType==="straight"||E.edgeType==="haystack"){var b=E.allpts;for(var P=0;P+3<b.length;P+=2)if(uK(Q,J,b[P],b[P+1],b[P+2],b[P+3],I)&&v>(_=yK(Q,J,b[P],b[P+1],b[P+2],b[P+3])))return X(k,_),!0}else if(E.edgeType==="bezier"||E.edgeType==="multibezier"||E.edgeType==="self"||E.edgeType==="compound"){var b=E.allpts;for(var P=0;P+5<E.allpts.length;P+=4)if(mK(Q,J,b[P],b[P+1],b[P+2],b[P+3],b[P+4],b[P+5],I)&&v>(_=hK(Q,J,b[P],b[P+1],b[P+2],b[P+3],b[P+4],b[P+5])))return X(k,_),!0}var u=u||C.source,h=h||C.target,p=G.getArrowWidth(S,w),m=[{name:"source",x:E.arrowStartX,y:E.arrowStartY,angle:E.srcArrowAngle},{name:"target",x:E.arrowEndX,y:E.arrowEndY,angle:E.tgtArrowAngle},{name:"mid-source",x:E.midX,y:E.midY,angle:E.midsrcArrowAngle},{name:"mid-target",x:E.midX,y:E.midY,angle:E.midtgtArrowAngle}];for(var P=0;P<m.length;P++){var c=m[P],i=F.arrowShapes[k.pstyle(c.name+"-arrow-shape").value],r=k.pstyle("width").pfValue;if(i.roughCollide(Q,J,p,c.angle,{x:c.x,y:c.y},r,L)&&i.collide(Q,J,p,c.angle,{x:c.x,y:c.y},r,L))return X(k),!0}if(q&&K.length>0)B(u),B(h)}function N(k,C,E){return E8(k,C,E)}function H(k,C){var E=k._private,S=A,w;if(C)w=C+"-";else w="";k.boundingBox();var T=E.labelBounds[C||"main"],v=k.pstyle(w+"label").value,I=k.pstyle("text-events").strValue==="yes";if(!I||!v)return;var _=N(E.rscratch,"labelX",C),b=N(E.rscratch,"labelY",C),P=N(E.rscratch,"labelAngle",C),u=k.pstyle(w+"text-margin-x").pfValue,h=k.pstyle(w+"text-margin-y").pfValue,p=T.x1-S-u,m=T.x2+S-u,c=T.y1-S-h,i=T.y2+S-h;if(P){var r=Math.cos(P),a=Math.sin(P),n=function K0(Y0,Q0){return Y0=Y0-_,Q0=Q0-b,{x:Y0*r-Q0*a+_,y:Y0*a+Q0*r+b}},f=n(p,c),o=n(p,i),e=n(m,c),t=n(m,i),J0=[f.x+u,f.y+h,e.x+u,e.y+h,t.x+u,t.y+h,o.x+u,o.y+h];if(M8(Q,J,J0))return X(k),!0}else if(SJ(T,Q,J))return X(k),!0}for(var j=U.length-1;j>=0;j--){var D=U[j];if(D.isNode())B(D)||H(D);else O(D)||H(D)||H(D,"source")||H(D,"target")}return K};qJ.getAllInBox=function(Q,J,Z,$){var G=this.getCachedZSortedEles().interactive,F=[],U=Math.min(Q,Z),K=Math.max(Q,Z),M=Math.min(J,$),q=Math.max(J,$);Q=U,Z=K,J=M,$=q;var L=L8({x1:Q,y1:J,x2:Z,y2:$});for(var z=0;z<G.length;z++){var A=G[z];if(A.isNode()){var V=A,R=V.boundingBox({includeNodes:!0,includeEdges:!1,includeLabels:!1});if(U7(L,R)&&!Y$(R,L))F.push(V)}else{var Y=A,X=Y._private,B=X.rscratch;if(B.startX!=null&&B.startY!=null&&!SJ(L,B.startX,B.startY))continue;if(B.endX!=null&&B.endY!=null&&!SJ(L,B.endX,B.endY))continue;if(B.edgeType==="bezier"||B.edgeType==="multibezier"||B.edgeType==="self"||B.edgeType==="compound"||B.edgeType==="segments"||B.edgeType==="haystack"){var O=X.rstyle.bezierPts||X.rstyle.linePts||X.rstyle.haystackPts,N=!0;for(var H=0;H<O.length;H++)if(!_K(L,O[H])){N=!1;break}if(N)F.push(Y)}else if(B.edgeType==="haystack"||B.edgeType==="straight")F.push(Y)}}return F};var Z6={};Z6.calculateArrowAngles=function(Q){var J=Q._private.rscratch,Z=J.edgeType==="haystack",$=J.edgeType==="bezier",G=J.edgeType==="multibezier",F=J.edgeType==="segments",U=J.edgeType==="compound",K=J.edgeType==="self",M,q,L,z,A,V,B,O;if(Z)L=J.haystackPts[0],z=J.haystackPts[1],A=J.haystackPts[2],V=J.haystackPts[3];else L=J.arrowStartX,z=J.arrowStartY,A=J.arrowEndX,V=J.arrowEndY;if(B=J.midX,O=J.midY,F)M=L-J.segpts[0],q=z-J.segpts[1];else if(G||U||K||$){var R=J.allpts,Y=l0(R[0],R[2],R[4],0.1),X=l0(R[1],R[3],R[5],0.1);M=L-Y,q=z-X}else M=L-B,q=z-O;J.srcArrowAngle=I9(M,q);var{midX:B,midY:O}=J;if(Z)B=(L+A)/2,O=(z+V)/2;if(M=A-L,q=V-z,F){var R=J.allpts;if(R.length/2%2===0){var N=R.length/2,H=N-2;M=R[N]-R[H],q=R[N+1]-R[H+1]}else{var N=R.length/2-1,H=N-2,j=N+2;M=R[N]-R[H],q=R[N+1]-R[H+1]}}else if(G||U||K){var{allpts:R,ctrlpts:D}=J,k,C,E,S;if(D.length/2%2===0){var w=R.length/2-1,T=w+2,v=T+2;k=l0(R[w],R[T],R[v],0),C=l0(R[w+1],R[T+1],R[v+1],0),E=l0(R[w],R[T],R[v],0.0001),S=l0(R[w+1],R[T+1],R[v+1],0.0001)}else{var T=R.length/2-1,w=T-2,v=T+2;k=l0(R[w],R[T],R[v],0.4999),C=l0(R[w+1],R[T+1],R[v+1],0.4999),E=l0(R[w],R[T],R[v],0.5),S=l0(R[w+1],R[T+1],R[v+1],0.5)}M=E-k,q=S-C}if(J.midtgtArrowAngle=I9(M,q),J.midDispX=M,J.midDispY=q,M*=-1,q*=-1,F){var R=J.allpts;if(R.length/2%2===0);else{var N=R.length/2-1,j=N+2;M=-(R[j]-R[N]),q=-(R[j+1]-R[N+1])}}if(J.midsrcArrowAngle=I9(M,q),F)M=A-J.segpts[J.segpts.length-2],q=V-J.segpts[J.segpts.length-1];else if(G||U||K||$){var R=J.allpts,I=R.length,Y=l0(R[I-6],R[I-4],R[I-2],0.9),X=l0(R[I-5],R[I-3],R[I-1],0.9);M=A-Y,q=V-X}else M=A-B,q=V-O;J.tgtArrowAngle=I9(M,q)};Z6.getArrowWidth=Z6.getArrowHeight=function(Q,J){var Z=this.arrowWidthCache=this.arrowWidthCache||{},$=Z[Q+", "+J];if($)return $;return $=Math.max(Math.pow(Q*13.37,0.9),29)*J,Z[Q+", "+J]=$,$};var G8={};G8.findMidptPtsEtc=function(Q,J){var{posPts:Z,intersectionPts:$,vectorNormInverse:G}=J,F,U=Q.pstyle("source-endpoint"),K=Q.pstyle("target-endpoint"),M=U.units!=null&&K.units!=null,q=function H(j,D,k,C){var E=C-D,S=k-j,w=Math.sqrt(S*S+E*E);return{x:-E/w,y:S/w}},L=Q.pstyle("edge-distances").value;switch(L){case"node-position":F=Z;break;case"intersection":F=$;break;case"endpoints":{if(M){var z=this.manualEndptToPx(Q.source()[0],U),A=H8(z,2),V=A[0],R=A[1],Y=this.manualEndptToPx(Q.target()[0],K),X=H8(Y,2),B=X[0],O=X[1],N={x1:V,y1:R,x2:B,y2:O};G=q(V,R,B,O),F=N}else P0("Edge ".concat(Q.id()," has edge-distances:endpoints specified without manual endpoints specified via source-endpoint and target-endpoint.  Falling back on edge-distances:intersection (default).")),F=$;break}}return{midptPts:F,vectorNormInverse:G}};G8.findHaystackPoints=function(Q){for(var J=0;J<Q.length;J++){var Z=Q[J],$=Z._private,G=$.rscratch;if(!G.haystack){var F=Math.random()*2*Math.PI;G.source={x:Math.cos(F),y:Math.sin(F)},F=Math.random()*2*Math.PI,G.target={x:Math.cos(F),y:Math.sin(F)}}var{source:U,target:K}=$,M=U.position(),q=K.position(),L=U.width(),z=K.width(),A=U.height(),V=K.height(),R=Z.pstyle("haystack-radius").value,Y=R/2;G.haystackPts=G.allpts=[G.source.x*L*Y+M.x,G.source.y*A*Y+M.y,G.target.x*z*Y+q.x,G.target.y*V*Y+q.y],G.midX=(G.allpts[0]+G.allpts[2])/2,G.midY=(G.allpts[1]+G.allpts[3])/2,G.edgeType="haystack",G.haystack=!0,this.storeEdgeProjections(Z),this.calculateArrowAngles(Z),this.recalculateEdgeLabelProjections(Z),this.calculateLabelAngles(Z)}};G8.findSegmentsPoints=function(Q,J){var Z=Q._private.rscratch,$=Q.pstyle("segment-weights"),G=Q.pstyle("segment-distances"),F=Math.min($.pfValue.length,G.pfValue.length);Z.edgeType="segments",Z.segpts=[];for(var U=0;U<F;U++){var K=$.pfValue[U],M=G.pfValue[U],q=1-K,L=K,z=this.findMidptPtsEtc(Q,J),A=z.midptPts,V=z.vectorNormInverse,R={x:A.x1*q+A.x2*L,y:A.y1*q+A.y2*L};Z.segpts.push(R.x+V.x*M,R.y+V.y*M)}};G8.findLoopPoints=function(Q,J,Z,$){var G=Q._private.rscratch,F=J.dirCounts,U=J.srcPos,K=Q.pstyle("control-point-distances"),M=K?K.pfValue[0]:void 0,q=Q.pstyle("loop-direction").pfValue,L=Q.pstyle("loop-sweep").pfValue,z=Q.pstyle("control-point-step-size").pfValue;G.edgeType="self";var A=Z,V=z;if($)A=0,V=M;var R=q-Math.PI/2,Y=R-L/2,X=R+L/2,B=String(q+"_"+L);A=F[B]===void 0?F[B]=0:++F[B],G.ctrlpts=[U.x+Math.cos(Y)*1.4*V*(A/3+1),U.y+Math.sin(Y)*1.4*V*(A/3+1),U.x+Math.cos(X)*1.4*V*(A/3+1),U.y+Math.sin(X)*1.4*V*(A/3+1)]};G8.findCompoundLoopPoints=function(Q,J,Z,$){var G=Q._private.rscratch;G.edgeType="compound";var{srcPos:F,tgtPos:U,srcW:K,srcH:M,tgtW:q,tgtH:L}=J,z=Q.pstyle("control-point-step-size").pfValue,A=Q.pstyle("control-point-distances"),V=A?A.pfValue[0]:void 0,R=Z,Y=z;if($)R=0,Y=V;var X=50,B={x:F.x-K/2,y:F.y-M/2},O={x:U.x-q/2,y:U.y-L/2},N={x:Math.min(B.x,O.x),y:Math.min(B.y,O.y)},H=0.5,j=Math.max(H,Math.log(K*0.01)),D=Math.max(H,Math.log(q*0.01));G.ctrlpts=[N.x,N.y-(1+Math.pow(X,1.12)/100)*Y*(R/3+1)*j,N.x-(1+Math.pow(X,1.12)/100)*Y*(R/3+1)*D,N.y]};G8.findStraightEdgePoints=function(Q){Q._private.rscratch.edgeType="straight"};G8.findBezierPoints=function(Q,J,Z,$,G){var F=Q._private.rscratch,U=Q.pstyle("control-point-step-size").pfValue,K=Q.pstyle("control-point-distances"),M=Q.pstyle("control-point-weights"),q=K&&M?Math.min(K.value.length,M.value.length):1,L=K?K.pfValue[0]:void 0,z=M.value[0],A=$;F.edgeType=A?"multibezier":"bezier",F.ctrlpts=[];for(var V=0;V<q;V++){var R=(0.5-J.eles.length/2+Z)*U*(G?-1:1),Y=void 0,X=R$(R);if(A)L=K?K.pfValue[V]:U,z=M.value[V];if($)Y=L;else Y=L!==void 0?X*L:void 0;var B=Y!==void 0?Y:R,O=1-z,N=z,H=this.findMidptPtsEtc(Q,J),j=H.midptPts,D=H.vectorNormInverse,k={x:j.x1*O+j.x2*N,y:j.y1*O+j.y2*N};F.ctrlpts.push(k.x+D.x*B,k.y+D.y*B)}};G8.findTaxiPoints=function(Q,J){var Z=Q._private.rscratch;Z.edgeType="segments";var $="vertical",G="horizontal",F="leftward",U="rightward",K="downward",M="upward",q="auto",L=J.posPts,z=J.srcW,A=J.srcH,V=J.tgtW,R=J.tgtH,Y=Q.pstyle("edge-distances").value,X=Y!=="node-position",B=Q.pstyle("taxi-direction").value,O=B,N=Q.pstyle("taxi-turn"),H=N.units==="%",j=N.pfValue,D=j<0,k=Q.pstyle("taxi-turn-min-distance").pfValue,C=X?(z+V)/2:0,E=X?(A+R)/2:0,S=L.x2-L.x1,w=L.y2-L.y1,T=function A0(l,q0){if(l>0)return Math.max(l-q0,0);else return Math.min(l+q0,0)},v=T(S,C),I=T(w,E),_=!1;if(O===q)B=Math.abs(v)>Math.abs(I)?G:$;else if(O===M||O===K)B=$,_=!0;else if(O===F||O===U)B=G,_=!0;var b=B===$,P=b?I:v,u=b?w:S,h=R$(u),p=!1;if(!(_&&(H||D))&&(O===K&&u<0||O===M&&u>0||O===F&&u>0||O===U&&u<0))h*=-1,P=h*Math.abs(P),p=!0;var m;if(H){var c=j<0?1+j:j;m=c*P}else{var i=j<0?P:0;m=i+j*h}var r=function A0(l){return Math.abs(l)<k||Math.abs(l)>=Math.abs(P)},a=r(m),n=r(Math.abs(P)-Math.abs(m)),f=a||n;if(f&&!p)if(b){var o=Math.abs(u)<=A/2,e=Math.abs(S)<=V/2;if(o){var t=(L.x1+L.x2)/2,J0=L.y1,K0=L.y2;Z.segpts=[t,J0,t,K0]}else if(e){var Y0=(L.y1+L.y2)/2,Q0=L.x1,Z0=L.x2;Z.segpts=[Q0,Y0,Z0,Y0]}else Z.segpts=[L.x1,L.y2]}else{var L0=Math.abs(u)<=z/2,M0=Math.abs(w)<=R/2;if(L0){var U0=(L.y1+L.y2)/2,z0=L.x1,W0=L.x2;Z.segpts=[z0,U0,W0,U0]}else if(M0){var k0=(L.x1+L.x2)/2,X0=L.y1,E0=L.y2;Z.segpts=[k0,X0,k0,E0]}else Z.segpts=[L.x2,L.y1]}else if(b){var y=L.y1+m+(X?A/2*h:0),W=L.x1,g=L.x2;Z.segpts=[W,y,g,y]}else{var s=L.x1+m+(X?z/2*h:0),x=L.y1,d=L.y2;Z.segpts=[s,x,s,d]}};G8.tryToCorrectInvalidPoints=function(Q,J){var Z=Q._private.rscratch;if(Z.edgeType==="bezier"){var{srcPos:$,tgtPos:G,srcW:F,srcH:U,tgtW:K,tgtH:M,srcShape:q,tgtShape:L}=J,z=!$0(Z.startX)||!$0(Z.startY),A=!$0(Z.arrowStartX)||!$0(Z.arrowStartY),V=!$0(Z.endX)||!$0(Z.endY),R=!$0(Z.arrowEndX)||!$0(Z.arrowEndY),Y=3,X=this.getArrowWidth(Q.pstyle("width").pfValue,Q.pstyle("arrow-scale").value)*this.arrowShapeWidth,B=Y*X,O=$J({x:Z.ctrlpts[0],y:Z.ctrlpts[1]},{x:Z.startX,y:Z.startY}),N=O<B,H=$J({x:Z.ctrlpts[0],y:Z.ctrlpts[1]},{x:Z.endX,y:Z.endY}),j=H<B,D=!1;if(z||A||N){D=!0;var k={x:Z.ctrlpts[0]-$.x,y:Z.ctrlpts[1]-$.y},C=Math.sqrt(k.x*k.x+k.y*k.y),E={x:k.x/C,y:k.y/C},S=Math.max(F,U),w={x:Z.ctrlpts[0]+E.x*2*S,y:Z.ctrlpts[1]+E.y*2*S},T=q.intersectLine($.x,$.y,F,U,w.x,w.y,0);if(N)Z.ctrlpts[0]=Z.ctrlpts[0]+E.x*(B-O),Z.ctrlpts[1]=Z.ctrlpts[1]+E.y*(B-O);else Z.ctrlpts[0]=T[0]+E.x*B,Z.ctrlpts[1]=T[1]+E.y*B}if(V||R||j){D=!0;var v={x:Z.ctrlpts[0]-G.x,y:Z.ctrlpts[1]-G.y},I=Math.sqrt(v.x*v.x+v.y*v.y),_={x:v.x/I,y:v.y/I},b=Math.max(F,U),P={x:Z.ctrlpts[0]+_.x*2*b,y:Z.ctrlpts[1]+_.y*2*b},u=L.intersectLine(G.x,G.y,K,M,P.x,P.y,0);if(j)Z.ctrlpts[0]=Z.ctrlpts[0]+_.x*(B-H),Z.ctrlpts[1]=Z.ctrlpts[1]+_.y*(B-H);else Z.ctrlpts[0]=u[0]+_.x*B,Z.ctrlpts[1]=u[1]+_.y*B}if(D)this.findEndpoints(Q)}};G8.storeAllpts=function(Q){var J=Q._private.rscratch;if(J.edgeType==="multibezier"||J.edgeType==="bezier"||J.edgeType==="self"||J.edgeType==="compound"){J.allpts=[],J.allpts.push(J.startX,J.startY);for(var Z=0;Z+1<J.ctrlpts.length;Z+=2)if(J.allpts.push(J.ctrlpts[Z],J.ctrlpts[Z+1]),Z+3<J.ctrlpts.length)J.allpts.push((J.ctrlpts[Z]+J.ctrlpts[Z+2])/2,(J.ctrlpts[Z+1]+J.ctrlpts[Z+3])/2);J.allpts.push(J.endX,J.endY);var $,G;if(J.ctrlpts.length/2%2===0)$=J.allpts.length/2-1,J.midX=J.allpts[$],J.midY=J.allpts[$+1];else $=J.allpts.length/2-3,G=0.5,J.midX=l0(J.allpts[$],J.allpts[$+2],J.allpts[$+4],G),J.midY=l0(J.allpts[$+1],J.allpts[$+3],J.allpts[$+5],G)}else if(J.edgeType==="straight")J.allpts=[J.startX,J.startY,J.endX,J.endY],J.midX=(J.startX+J.endX+J.arrowStartX+J.arrowEndX)/4,J.midY=(J.startY+J.endY+J.arrowStartY+J.arrowEndY)/4;else if(J.edgeType==="segments")if(J.allpts=[],J.allpts.push(J.startX,J.startY),J.allpts.push.apply(J.allpts,J.segpts),J.allpts.push(J.endX,J.endY),J.segpts.length%4===0){var F=J.segpts.length/2,U=F-2;J.midX=(J.segpts[U]+J.segpts[F])/2,J.midY=(J.segpts[U+1]+J.segpts[F+1])/2}else{var K=J.segpts.length/2-1;J.midX=J.segpts[K],J.midY=J.segpts[K+1]}};G8.checkForInvalidEdgeWarning=function(Q){var J=Q[0]._private.rscratch;if(J.nodesOverlap||$0(J.startX)&&$0(J.startY)&&$0(J.endX)&&$0(J.endY))J.loggedErr=!1;else if(!J.loggedErr)J.loggedErr=!0,P0("Edge `"+Q.id()+"` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.")};G8.findEdgeControlPoints=function(Q){var J=this;if(!Q||Q.length===0)return;var Z=this,$=Z.cy,G=$.hasCompoundNodes(),F={map:new D8,get:function D(k){var C=this.map.get(k[0]);if(C!=null)return C.get(k[1]);else return null},set:function D(k,C){var E=this.map.get(k[0]);if(E==null)E=new D8,this.map.set(k[0],E);E.set(k[1],C)}},U=[],K=[];for(var M=0;M<Q.length;M++){var q=Q[M],L=q._private,z=q.pstyle("curve-style").value;if(q.removed()||!q.takesUpSpace())continue;if(z==="haystack"){K.push(q);continue}var A=z==="unbundled-bezier"||z==="segments"||z==="straight"||z==="straight-triangle"||z==="taxi",V=z==="unbundled-bezier"||z==="bezier",R=L.source,Y=L.target,X=R.poolIndex(),B=Y.poolIndex(),O=[X,B].sort(),N=F.get(O);if(N==null)N={eles:[]},F.set(O,N),U.push(O);if(N.eles.push(q),A)N.hasUnbundled=!0;if(V)N.hasBezier=!0}var H=function D(k){var C=U[k],E=F.get(C),S=void 0;if(!E.hasUnbundled){var w=E.eles[0].parallelEdges().filter(function(E0){return E0.isBundledBezier()});G7(E.eles),w.forEach(function(E0){return E.eles.push(E0)}),E.eles.sort(function(E0,y){return E0.poolIndex()-y.poolIndex()})}var T=E.eles[0],v=T.source(),I=T.target();if(v.poolIndex()>I.poolIndex()){var _=v;v=I,I=_}var b=E.srcPos=v.position(),P=E.tgtPos=I.position(),u=E.srcW=v.outerWidth(),h=E.srcH=v.outerHeight(),p=E.tgtW=I.outerWidth(),m=E.tgtH=I.outerHeight(),c=E.srcShape=Z.nodeShapes[J.getNodeShape(v)],i=E.tgtShape=Z.nodeShapes[J.getNodeShape(I)];E.dirCounts={north:0,west:0,south:0,east:0,northwest:0,southwest:0,northeast:0,southeast:0};for(var r=0;r<E.eles.length;r++){var a=E.eles[r],n=a[0]._private.rscratch,f=a.pstyle("curve-style").value,o=f==="unbundled-bezier"||f==="segments"||f==="taxi",e=!v.same(a.source());if(!E.calculatedIntersection&&v!==I&&(E.hasBezier||E.hasUnbundled)){E.calculatedIntersection=!0;var t=c.intersectLine(b.x,b.y,u,h,P.x,P.y,0),J0=E.srcIntn=t,K0=i.intersectLine(P.x,P.y,p,m,b.x,b.y,0),Y0=E.tgtIntn=K0,Q0=E.intersectionPts={x1:t[0],x2:K0[0],y1:t[1],y2:K0[1]},Z0=E.posPts={x1:b.x,x2:P.x,y1:b.y,y2:P.y},L0=K0[1]-t[1],M0=K0[0]-t[0],U0=Math.sqrt(M0*M0+L0*L0),z0=E.vector={x:M0,y:L0},W0=E.vectorNorm={x:z0.x/U0,y:z0.y/U0},k0={x:-W0.y,y:W0.x};E.nodesOverlap=!$0(U0)||i.checkPoint(t[0],t[1],0,p,m,P.x,P.y)||c.checkPoint(K0[0],K0[1],0,u,h,b.x,b.y),E.vectorNormInverse=k0,S={nodesOverlap:E.nodesOverlap,dirCounts:E.dirCounts,calculatedIntersection:!0,hasBezier:E.hasBezier,hasUnbundled:E.hasUnbundled,eles:E.eles,srcPos:P,tgtPos:b,srcW:p,srcH:m,tgtW:u,tgtH:h,srcIntn:Y0,tgtIntn:J0,srcShape:i,tgtShape:c,posPts:{x1:Z0.x2,y1:Z0.y2,x2:Z0.x1,y2:Z0.y1},intersectionPts:{x1:Q0.x2,y1:Q0.y2,x2:Q0.x1,y2:Q0.y1},vector:{x:-z0.x,y:-z0.y},vectorNorm:{x:-W0.x,y:-W0.y},vectorNormInverse:{x:-k0.x,y:-k0.y}}}var X0=e?S:E;if(n.nodesOverlap=X0.nodesOverlap,n.srcIntn=X0.srcIntn,n.tgtIntn=X0.tgtIntn,G&&(v.isParent()||v.isChild()||I.isParent()||I.isChild())&&(v.parents().anySame(I)||I.parents().anySame(v)||v.same(I)&&v.isParent()))J.findCompoundLoopPoints(a,X0,r,o);else if(v===I)J.findLoopPoints(a,X0,r,o);else if(f==="segments")J.findSegmentsPoints(a,X0);else if(f==="taxi")J.findTaxiPoints(a,X0);else if(f==="straight"||!o&&E.eles.length%2===1&&r===Math.floor(E.eles.length/2))J.findStraightEdgePoints(a);else J.findBezierPoints(a,X0,r,o,e);J.findEndpoints(a),J.tryToCorrectInvalidPoints(a,X0),J.checkForInvalidEdgeWarning(a),J.storeAllpts(a),J.storeEdgeProjections(a),J.calculateArrowAngles(a),J.recalculateEdgeLabelProjections(a),J.calculateLabelAngles(a)}};for(var j=0;j<U.length;j++)H(j);this.findHaystackPoints(K)};G8.getSegmentPoints=function(Q){var J=Q[0]._private.rscratch,Z=J.edgeType;if(Z==="segments")return this.recalculateRenderedStyle(Q),J4(J.segpts)};G8.getControlPoints=function(Q){var J=Q[0]._private.rscratch,Z=J.edgeType;if(Z==="bezier"||Z==="multibezier"||Z==="self"||Z==="compound")return this.recalculateRenderedStyle(Q),J4(J.ctrlpts)};G8.getEdgeMidpoint=function(Q){var J=Q[0]._private.rscratch;return this.recalculateRenderedStyle(Q),{x:J.midX,y:J.midY}};var N9={};N9.manualEndptToPx=function(Q,J){var Z=this,$=Q.position(),G=Q.outerWidth(),F=Q.outerHeight();if(J.value.length===2){var U=[J.pfValue[0],J.pfValue[1]];if(J.units[0]==="%")U[0]=U[0]*G;if(J.units[1]==="%")U[1]=U[1]*F;return U[0]+=$.x,U[1]+=$.y,U}else{var K=J.pfValue[0];K=-Math.PI/2+K;var M=2*Math.max(G,F),q=[$.x+Math.cos(K)*M,$.y+Math.sin(K)*M];return Z.nodeShapes[this.getNodeShape(Q)].intersectLine($.x,$.y,G,F,q[0],q[1],0)}};N9.findEndpoints=function(Q){var J=this,Z,$=Q.source()[0],G=Q.target()[0],F=$.position(),U=G.position(),K=Q.pstyle("target-arrow-shape").value,M=Q.pstyle("source-arrow-shape").value,q=Q.pstyle("target-distance-from-node").pfValue,L=Q.pstyle("source-distance-from-node").pfValue,z=Q.pstyle("curve-style").value,A=Q._private.rscratch,V=A.edgeType,R=z==="taxi",Y=V==="self"||V==="compound",X=V==="bezier"||V==="multibezier"||Y,B=V!=="bezier",O=V==="straight"||V==="segments",N=V==="segments",H=X||B||O,j=Y||R,D=Q.pstyle("source-endpoint"),k=j?"outside-to-node":D.value,C=Q.pstyle("target-endpoint"),E=j?"outside-to-node":C.value;A.srcManEndpt=D,A.tgtManEndpt=C;var S,w,T,v;if(X){var I=[A.ctrlpts[0],A.ctrlpts[1]],_=B?[A.ctrlpts[A.ctrlpts.length-2],A.ctrlpts[A.ctrlpts.length-1]]:I;S=_,w=I}else if(O){var b=!N?[U.x,U.y]:A.segpts.slice(0,2),P=!N?[F.x,F.y]:A.segpts.slice(A.segpts.length-2);S=P,w=b}if(E==="inside-to-node")Z=[U.x,U.y];else if(C.units)Z=this.manualEndptToPx(G,C);else if(E==="outside-to-line")Z=A.tgtIntn;else{if(E==="outside-to-node"||E==="outside-to-node-or-label")T=S;else if(E==="outside-to-line"||E==="outside-to-line-or-label")T=[F.x,F.y];if(Z=J.nodeShapes[this.getNodeShape(G)].intersectLine(U.x,U.y,G.outerWidth(),G.outerHeight(),T[0],T[1],0),E==="outside-to-node-or-label"||E==="outside-to-line-or-label"){var u=G._private.rscratch,h=u.labelWidth,p=u.labelHeight,m=u.labelX,c=u.labelY,i=h/2,r=p/2,a=G.pstyle("text-valign").value;if(a==="top")c-=r;else if(a==="bottom")c+=r;var n=G.pstyle("text-halign").value;if(n==="left")m-=i;else if(n==="right")m+=i;var f=K9(T[0],T[1],[m-i,c-r,m+i,c-r,m+i,c+r,m-i,c+r],U.x,U.y);if(f.length>0){var o=F,e=e8(o,EJ(Z)),t=e8(o,EJ(f)),J0=e;if(t<e)Z=f,J0=t;if(f.length>2){var K0=e8(o,{x:f[2],y:f[3]});if(K0<J0)Z=[f[2],f[3]]}}}}var Y0=w9(Z,S,J.arrowShapes[K].spacing(Q)+q),Q0=w9(Z,S,J.arrowShapes[K].gap(Q)+q);if(A.endX=Q0[0],A.endY=Q0[1],A.arrowEndX=Y0[0],A.arrowEndY=Y0[1],k==="inside-to-node")Z=[F.x,F.y];else if(D.units)Z=this.manualEndptToPx($,D);else if(k==="outside-to-line")Z=A.srcIntn;else{if(k==="outside-to-node"||k==="outside-to-node-or-label")v=w;else if(k==="outside-to-line"||k==="outside-to-line-or-label")v=[U.x,U.y];if(Z=J.nodeShapes[this.getNodeShape($)].intersectLine(F.x,F.y,$.outerWidth(),$.outerHeight(),v[0],v[1],0),k==="outside-to-node-or-label"||k==="outside-to-line-or-label"){var Z0=$._private.rscratch,L0=Z0.labelWidth,M0=Z0.labelHeight,U0=Z0.labelX,z0=Z0.labelY,W0=L0/2,k0=M0/2,X0=$.pstyle("text-valign").value;if(X0==="top")z0-=k0;else if(X0==="bottom")z0+=k0;var E0=$.pstyle("text-halign").value;if(E0==="left")U0-=W0;else if(E0==="right")U0+=W0;var y=K9(v[0],v[1],[U0-W0,z0-k0,U0+W0,z0-k0,U0+W0,z0+k0,U0-W0,z0+k0],F.x,F.y);if(y.length>0){var W=U,g=e8(W,EJ(Z)),s=e8(W,EJ(y)),x=g;if(s<g)Z=[y[0],y[1]],x=s;if(y.length>2){var d=e8(W,{x:y[2],y:y[3]});if(d<x)Z=[y[2],y[3]]}}}}var A0=w9(Z,w,J.arrowShapes[M].spacing(Q)+L),l=w9(Z,w,J.arrowShapes[M].gap(Q)+L);if(A.startX=l[0],A.startY=l[1],A.arrowStartX=A0[0],A.arrowStartY=A0[1],H)if(!$0(A.startX)||!$0(A.startY)||!$0(A.endX)||!$0(A.endY))A.badLine=!0;else A.badLine=!1};N9.getSourceEndpoint=function(Q){var J=Q[0]._private.rscratch;switch(this.recalculateRenderedStyle(Q),J.edgeType){case"haystack":return{x:J.haystackPts[0],y:J.haystackPts[1]};default:return{x:J.arrowStartX,y:J.arrowStartY}}};N9.getTargetEndpoint=function(Q){var J=Q[0]._private.rscratch;switch(this.recalculateRenderedStyle(Q),J.edgeType){case"haystack":return{x:J.haystackPts[2],y:J.haystackPts[3]};default:return{x:J.arrowEndX,y:J.arrowEndY}}};var X7={};X7.storeEdgeProjections=function(Q){var J=Q._private,Z=J.rscratch,$=Z.edgeType;if(J.rstyle.bezierPts=null,J.rstyle.linePts=null,J.rstyle.haystackPts=null,$==="multibezier"||$==="bezier"||$==="self"||$==="compound"){J.rstyle.bezierPts=[];for(var G=0;G+5<Z.allpts.length;G+=4)VL(this,Q,Z.allpts.slice(G,G+6))}else if($==="segments"){var F=J.rstyle.linePts=[];for(var G=0;G+1<Z.allpts.length;G+=2)F.push({x:Z.allpts[G],y:Z.allpts[G+1]})}else if($==="haystack"){var U=Z.haystackPts;J.rstyle.haystackPts=[{x:U[0],y:U[1]},{x:U[2],y:U[3]}]}J.rstyle.arrowWidth=this.getArrowWidth(Q.pstyle("width").pfValue,Q.pstyle("arrow-scale").value)*this.arrowShapeWidth};X7.recalculateEdgeProjections=function(Q){this.findEdgeControlPoints(Q)};var S8={};S8.recalculateNodeLabelProjection=function(Q){var J=Q.pstyle("label").strValue;if(d8(J))return;var Z,$,G=Q._private,F=Q.width(),U=Q.height(),K=Q.padding(),M=Q.position(),q=Q.pstyle("text-halign").strValue,L=Q.pstyle("text-valign").strValue,z=G.rscratch,A=G.rstyle;switch(q){case"left":Z=M.x-F/2-K;break;case"right":Z=M.x+F/2+K;break;default:Z=M.x}switch(L){case"top":$=M.y-U/2-K;break;case"bottom":$=M.y+U/2+K;break;default:$=M.y}z.labelX=Z,z.labelY=$,A.labelX=Z,A.labelY=$,this.calculateLabelAngles(Q),this.applyLabelDimensions(Q)};var Q4=function Q(J,Z){var $=Math.atan(Z/J);if(J===0&&$<0)$=$*-1;return $},Z4=function Q(J,Z){var $=Z.x-J.x,G=Z.y-J.y;return Q4($,G)},YL=function Q(J,Z,$,G){var F=U9(0,G-0.001,1),U=U9(0,G+0.001,1),K=TJ(J,Z,$,F),M=TJ(J,Z,$,U);return Z4(K,M)};S8.recalculateEdgeLabelProjections=function(Q){var J,Z=Q._private,$=Z.rscratch,G=this,F={mid:Q.pstyle("label").strValue,source:Q.pstyle("source-label").strValue,target:Q.pstyle("target-label").strValue};if(F.mid||F.source||F.target);else return;J={x:$.midX,y:$.midY};var U=function L(z,A,V){h8(Z.rscratch,z,A,V),h8(Z.rstyle,z,A,V)};U("labelX",null,J.x),U("labelY",null,J.y);var K=Q4($.midDispX,$.midDispY);U("labelAutoAngle",null,K);var M=function L(){if(L.cache)return L.cache;var z=[];for(var A=0;A+5<$.allpts.length;A+=4){var V={x:$.allpts[A],y:$.allpts[A+1]},R={x:$.allpts[A+2],y:$.allpts[A+3]},Y={x:$.allpts[A+4],y:$.allpts[A+5]};z.push({p0:V,p1:R,p2:Y,startDist:0,length:0,segments:[]})}var X=Z.rstyle.bezierPts,B=G.bezierProjPcts.length;function O(k,C,E,S,w){var T=$J(C,E),v=k.segments[k.segments.length-1],I={p0:C,p1:E,t0:S,t1:w,startDist:v?v.startDist+v.length:0,length:T};k.segments.push(I),k.length+=T}for(var N=0;N<z.length;N++){var H=z[N],j=z[N-1];if(j)H.startDist=j.startDist+j.length;O(H,H.p0,X[N*B],0,G.bezierProjPcts[0]);for(var D=0;D<B-1;D++)O(H,X[N*B+D],X[N*B+D+1],G.bezierProjPcts[D],G.bezierProjPcts[D+1]);O(H,X[N*B+B-1],H.p2,G.bezierProjPcts[B-1],1)}return L.cache=z},q=function L(z){var A,V=z==="source";if(!F[z])return;var R=Q.pstyle(z+"-text-offset").pfValue;switch($.edgeType){case"self":case"compound":case"bezier":case"multibezier":{var Y=M(),X,B=0,O=0;for(var N=0;N<Y.length;N++){var H=Y[V?N:Y.length-1-N];for(var j=0;j<H.segments.length;j++){var D=H.segments[V?j:H.segments.length-1-j],k=N===Y.length-1&&j===H.segments.length-1;if(B=O,O+=D.length,O>=R||k){X={cp:H,segment:D};break}}if(X)break}var{cp:C,segment:E}=X,S=(R-B)/E.length,w=E.t1-E.t0,T=V?E.t0+w*S:E.t1-w*S;T=U9(0,T,1),J=TJ(C.p0,C.p1,C.p2,T),A=YL(C.p0,C.p1,C.p2,T);break}case"straight":case"segments":case"haystack":{var v=0,I,_,b,P,u=$.allpts.length;for(var h=0;h+3<u;h+=2){if(V)b={x:$.allpts[h],y:$.allpts[h+1]},P={x:$.allpts[h+2],y:$.allpts[h+3]};else b={x:$.allpts[u-2-h],y:$.allpts[u-1-h]},P={x:$.allpts[u-4-h],y:$.allpts[u-3-h]};if(I=$J(b,P),_=v,v+=I,v>=R)break}var p=R-_,m=p/I;m=U9(0,m,1),J=IK(b,P,m),A=Z4(b,P);break}}U("labelX",z,J.x),U("labelY",z,J.y),U("labelAutoAngle",z,A)};q("source"),q("target"),this.applyLabelDimensions(Q)};S8.applyLabelDimensions=function(Q){if(this.applyPrefixedLabelDimensions(Q),Q.isEdge())this.applyPrefixedLabelDimensions(Q,"source"),this.applyPrefixedLabelDimensions(Q,"target")};S8.applyPrefixedLabelDimensions=function(Q,J){var Z=Q._private,$=this.getLabelText(Q,J),G=this.calculateLabelDimensions(Q,$),F=Q.pstyle("line-height").pfValue,U=Q.pstyle("text-wrap").strValue,K=E8(Z.rscratch,"labelWrapCachedLines",J)||[],M=U!=="wrap"?1:Math.max(K.length,1),q=G.height/M,L=q*F,z=G.width,A=G.height+(M-1)*(F-1)*q;h8(Z.rstyle,"labelWidth",J,z),h8(Z.rscratch,"labelWidth",J,z),h8(Z.rstyle,"labelHeight",J,A),h8(Z.rscratch,"labelHeight",J,A),h8(Z.rscratch,"labelLineHeight",J,L)};S8.getLabelText=function(Q,J){var Z=Q._private,$=J?J+"-":"",G=Q.pstyle($+"label").strValue,F=Q.pstyle("text-transform").value,U=function h(p,m){if(m)return h8(Z.rscratch,p,J,m),m;else return E8(Z.rscratch,p,J)};if(!G)return"";if(F=="none");else if(F=="uppercase")G=G.toUpperCase();else if(F=="lowercase")G=G.toLowerCase();var K=Q.pstyle("text-wrap").value;if(K==="wrap"){var M=U("labelKey");if(M!=null&&U("labelWrapKey")===M)return U("labelWrapCachedText");var q="\u200B",L=G.split("\n"),z=Q.pstyle("text-max-width").pfValue,A=Q.pstyle("text-overflow-wrap").value,V=A==="anywhere",R=[],Y=/[\s\u200b]+/,X=V?"":" ";for(var B=0;B<L.length;B++){var O=L[B],N=this.calculateLabelDimensions(Q,O),H=N.width;if(V){var j=O.split("").join(q);O=j}if(H>z){var D=O.split(Y),k="";for(var C=0;C<D.length;C++){var E=D[C],S=k.length===0?E:k+X+E,w=this.calculateLabelDimensions(Q,S),T=w.width;if(T<=z)k+=E+X;else{if(k)R.push(k);k=E+X}}if(!k.match(/^[\s\u200b]+$/))R.push(k)}else R.push(O)}U("labelWrapCachedLines",R),G=U("labelWrapCachedText",R.join("\n")),U("labelWrapKey",M)}else if(K==="ellipsis"){var v=Q.pstyle("text-max-width").pfValue,I="",_="\u2026",b=!1;if(this.calculateLabelDimensions(Q,G).width<v)return G;for(var P=0;P<G.length;P++){var u=this.calculateLabelDimensions(Q,I+G[P]+_).width;if(u>v)break;if(I+=G[P],P===G.length-1)b=!0}if(!b)I+=_;return I}return G};S8.getLabelJustification=function(Q){var J=Q.pstyle("text-justification").strValue,Z=Q.pstyle("text-halign").strValue;if(J==="auto")if(Q.isNode())switch(Z){case"left":return"right";case"right":return"left";default:return"center"}else return"center";else return J};S8.calculateLabelDimensions=function(Q,J){var Z=this,$=ZJ(J,Q._private.labelDimsKey),G=Z.labelDimCache||(Z.labelDimCache=[]),F=G[$];if(F!=null)return F;var U=0,K=Q.pstyle("font-style").strValue,M=Q.pstyle("font-size").pfValue,q=Q.pstyle("font-family").strValue,L=Q.pstyle("font-weight").strValue,z=this.labelCalcCanvas,A=this.labelCalcCanvasContext;if(!z){z=this.labelCalcCanvas=document.createElement("canvas"),A=this.labelCalcCanvasContext=z.getContext("2d");var V=z.style;V.position="absolute",V.left="-9999px",V.top="-9999px",V.zIndex="-1",V.visibility="hidden",V.pointerEvents="none"}A.font="".concat(K," ").concat(L," ").concat(M,"px ").concat(q);var R=0,Y=0,X=J.split("\n");for(var B=0;B<X.length;B++){var O=X[B],N=A.measureText(O),H=Math.ceil(N.width),j=M;R=Math.max(H,R),Y+=j}return R+=U,Y+=U,G[$]={width:R,height:Y}};S8.calculateLabelAngle=function(Q,J){var Z=Q._private,$=Z.rscratch,G=Q.isEdge(),F=J?J+"-":"",U=Q.pstyle(F+"text-rotation"),K=U.strValue;if(K==="none")return 0;else if(G&&K==="autorotate")return $.labelAutoAngle;else if(K==="autorotate")return 0;else return U.pfValue};S8.calculateLabelAngles=function(Q){var J=this,Z=Q.isEdge(),$=Q._private,G=$.rscratch;if(G.labelAngle=J.calculateLabelAngle(Q),Z)G.sourceLabelAngle=J.calculateLabelAngle(Q,"source"),G.targetLabelAngle=J.calculateLabelAngle(Q,"target")};var $4={},hZ=28,yZ=!1;$4.getNodeShape=function(Q){var J=this,Z=Q.pstyle("shape").value;if(Z==="cutrectangle"&&(Q.width()<hZ||Q.height()<hZ)){if(!yZ)P0("The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead"),yZ=!0;return"rectangle"}if(Q.isParent())if(Z==="rectangle"||Z==="roundrectangle"||Z==="round-rectangle"||Z==="cutrectangle"||Z==="cut-rectangle"||Z==="barrel")return Z;else return"rectangle";if(Z==="polygon"){var $=Q.pstyle("shape-polygon-points").value;return J.nodeShapes.makePolygon($).name}return Z};var X6={};X6.registerCalculationListeners=function(){var Q=this.cy,J=Q.collection(),Z=this,$=function F(U){var K=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;if(J.merge(U),K)for(var M=0;M<U.length;M++){var q=U[M],L=q._private,z=L.rstyle;z.clean=!1,z.cleanConnected=!1}};Z.binder(Q).on("bounds.* dirty.*",function F(U){var K=U.target;$(K)}).on("style.* background.*",function F(U){var K=U.target;$(K,!1)});var G=function F(U){if(U){var K=Z.onUpdateEleCalcsFns;J.cleanStyle();for(var M=0;M<J.length;M++){var q=J[M],L=q._private.rstyle;if(q.isNode()&&!L.cleanConnected)$(q.connectedEdges()),L.cleanConnected=!0}if(K)for(var z=0;z<K.length;z++){var A=K[z];A(U,J)}Z.recalculateRenderedStyle(J),J=Q.collection()}};Z.flushRenderedStyleQueue=function(){G(!0)},Z.beforeRender(G,Z.beforeRenderPriorities.eleCalcs)};X6.onUpdateEleCalcs=function(Q){var J=this.onUpdateEleCalcsFns=this.onUpdateEleCalcsFns||[];J.push(Q)};X6.recalculateRenderedStyle=function(Q,J){var Z=function N(H){return H._private.rstyle.cleanConnected},$=[],G=[];if(this.destroyed)return;if(J===void 0)J=!0;for(var F=0;F<Q.length;F++){var U=Q[F],K=U._private,M=K.rstyle;if(U.isEdge()&&(!Z(U.source())||!Z(U.target())))M.clean=!1;if(J&&M.clean||U.removed())continue;if(U.pstyle("display").value==="none")continue;if(K.group==="nodes")G.push(U);else $.push(U);M.clean=!0}for(var q=0;q<G.length;q++){var L=G[q],z=L._private,A=z.rstyle,V=L.position();this.recalculateNodeLabelProjection(L),A.nodeX=V.x,A.nodeY=V.y,A.nodeW=L.pstyle("width").pfValue,A.nodeH=L.pstyle("height").pfValue}this.recalculateEdgeProjections($);for(var R=0;R<$.length;R++){var Y=$[R],X=Y._private,B=X.rstyle,O=X.rscratch;B.srcX=O.arrowStartX,B.srcY=O.arrowStartY,B.tgtX=O.arrowEndX,B.tgtY=O.arrowEndY,B.midX=O.midX,B.midY=O.midY,B.labelAngle=O.labelAngle,B.sourceLabelAngle=O.sourceLabelAngle,B.targetLabelAngle=O.targetLabelAngle}};var B6={};B6.updateCachedGrabbedEles=function(){var Q=this.cachedZSortedEles;if(!Q)return;Q.drag=[],Q.nondrag=[];var J=[];for(var Z=0;Z<Q.length;Z++){var $=Q[Z],G=$._private.rscratch;if($.grabbed()&&!$.isParent())J.push($);else if(G.inDragLayer)Q.drag.push($);else Q.nondrag.push($)}for(var Z=0;Z<J.length;Z++){var $=J[Z];Q.drag.push($)}};B6.invalidateCachedZSortedEles=function(){this.cachedZSortedEles=null};B6.getCachedZSortedEles=function(Q){if(Q||!this.cachedZSortedEles){var J=this.cy.mutableElements().toArray();J.sort(d$),J.interactive=J.filter(function(Z){return Z.interactive()}),this.cachedZSortedEles=J,this.updateCachedGrabbedEles()}else J=this.cachedZSortedEles;return J};var G4={};[qJ,Z6,G8,N9,X7,S8,$4,X6,B6].forEach(function(Q){V0(G4,Q)});var F4={};F4.getCachedImage=function(Q,J,Z){var $=this,G=$.imageCache=$.imageCache||{},F=G[Q];if(F){if(!F.image.complete)F.image.addEventListener("load",Z);return F.image}else{F=G[Q]=G[Q]||{};var U=F.image=new Image;U.addEventListener("load",Z),U.addEventListener("error",function(){U.error=!0});var K="data:",M=Q.substring(0,K.length).toLowerCase()===K;if(!M)J=J==="null"?null:J,U.crossOrigin=J;return U.src=Q,U}};var uJ={};uJ.registerBinding=function(Q,J,Z,$){var G=Array.prototype.slice.apply(arguments,[1]),F=this.binder(Q);return F.on.apply(F,G)};uJ.binder=function(Q){var J=this,Z=J.cy.window(),$=Q===Z||Q===Z.document||Q===Z.document.body||_U(Q);if(J.supportsPassiveEvents==null){var G=!1;try{var F=Object.defineProperty({},"passive",{get:function K(){return G=!0,!0}});Z.addEventListener("test",null,F)}catch(K){}J.supportsPassiveEvents=G}var U=function K(M,q,L){var z=Array.prototype.slice.call(arguments);if($&&J.supportsPassiveEvents)z[2]={capture:L!=null?L:!1,passive:!1,once:!1};return J.bindings.push({target:Q,args:z}),(Q.addEventListener||Q.on).apply(Q,z),this};return{on:U,addEventListener:U,addListener:U,bind:U}};uJ.nodeIsDraggable=function(Q){return Q&&Q.isNode()&&!Q.locked()&&Q.grabbable()};uJ.nodeIsGrabbable=function(Q){return this.nodeIsDraggable(Q)&&Q.interactive()};uJ.load=function(){var Q=this,J=Q.cy.window(),Z=function y(W){return W.selected()},$=function y(W,g,s,x){if(W==null)W=Q.cy;for(var d=0;d<g.length;d++){var A0=g[d];W.emit({originalEvent:s,type:A0,position:x})}},G=function y(W){return W.shiftKey||W.metaKey||W.ctrlKey},F=function y(W,g){var s=!0;if(Q.cy.hasCompoundNodes()&&W&&W.pannable())for(var x=0;g&&x<g.length;x++){var W=g[x];if(W.isNode()&&W.isParent()&&!W.pannable()){s=!1;break}}else s=!0;return s},U=function y(W){W[0]._private.grabbed=!0},K=function y(W){W[0]._private.grabbed=!1},M=function y(W){W[0]._private.rscratch.inDragLayer=!0},q=function y(W){W[0]._private.rscratch.inDragLayer=!1},L=function y(W){W[0]._private.rscratch.isGrabTarget=!0},z=function y(W){W[0]._private.rscratch.isGrabTarget=!1},A=function y(W,g){var s=g.addToList,x=s.has(W);if(!x&&W.grabbable()&&!W.locked())s.merge(W),U(W)},V=function y(W,g){if(!W.cy().hasCompoundNodes())return;if(g.inDragLayer==null&&g.addToList==null)return;var s=W.descendants();if(g.inDragLayer)s.forEach(M),s.connectedEdges().forEach(M);if(g.addToList)A(s,g)},R=function y(W,g){g=g||{};var s=W.cy().hasCompoundNodes();if(g.inDragLayer)W.forEach(M),W.neighborhood().stdFilter(function(x){return!s||x.isEdge()}).forEach(M);if(g.addToList)W.forEach(function(x){A(x,g)});V(W,g),B(W,{inDragLayer:g.inDragLayer}),Q.updateCachedGrabbedEles()},Y=R,X=function y(W){if(!W)return;Q.getCachedZSortedEles().forEach(function(g){K(g),q(g),z(g)}),Q.updateCachedGrabbedEles()},B=function y(W,g){if(g.inDragLayer==null&&g.addToList==null)return;if(!W.cy().hasCompoundNodes())return;var s=W.ancestors().orphans();if(s.same(W))return;var x=s.descendants().spawnSelf().merge(s).unmerge(W).unmerge(W.descendants()),d=x.connectedEdges();if(g.inDragLayer)d.forEach(M),x.forEach(M);if(g.addToList)x.forEach(function(A0){A(A0,g)})},O=function y(){if(document.activeElement!=null&&document.activeElement.blur!=null)document.activeElement.blur()},N=typeof MutationObserver!=="undefined",H=typeof ResizeObserver!=="undefined";if(N){if(Q.removeObserver=new MutationObserver(function(y){for(var W=0;W<y.length;W++){var g=y[W],s=g.removedNodes;if(s)for(var x=0;x<s.length;x++){var d=s[x];if(d===Q.container){Q.destroy();break}}}}),Q.container.parentNode)Q.removeObserver.observe(Q.container.parentNode,{childList:!0})}else Q.registerBinding(Q.container,"DOMNodeRemoved",function(y){Q.destroy()});var j=G6.default(function(){Q.cy.resize()},100);if(N)Q.styleObserver=new MutationObserver(j),Q.styleObserver.observe(Q.container,{attributes:!0});if(Q.registerBinding(J,"resize",j),H)Q.resizeObserver=new ResizeObserver(j),Q.resizeObserver.observe(Q.container);var D=function y(W,g){while(W!=null)g(W),W=W.parentNode},k=function y(){Q.invalidateContainerClientCoordsCache()};D(Q.container,function(y){Q.registerBinding(y,"transitionend",k),Q.registerBinding(y,"animationend",k),Q.registerBinding(y,"scroll",k)}),Q.registerBinding(Q.container,"contextmenu",function(y){y.preventDefault()});var C=function y(){return Q.selection[4]!==0},E=function y(W){var g=Q.findContainerClientCoords(),s=g[0],x=g[1],d=g[2],A0=g[3],l=W.touches?W.touches:[W],q0=!1;for(var N0=0;N0<l.length;N0++){var C0=l[N0];if(s<=C0.clientX&&C0.clientX<=s+d&&x<=C0.clientY&&C0.clientY<=x+A0){q0=!0;break}}if(!q0)return!1;var B0=Q.container,T0=W.target,O0=T0.parentNode,H0=!1;while(O0){if(O0===B0){H0=!0;break}O0=O0.parentNode}if(!H0)return!1;return!0};Q.registerBinding(Q.container,"mousedown",function y(W){if(!E(W))return;W.preventDefault(),O(),Q.hoverData.capture=!0,Q.hoverData.which=W.which;var g=Q.cy,s=[W.clientX,W.clientY],x=Q.projectIntoViewport(s[0],s[1]),d=Q.selection,A0=Q.findNearestElements(x[0],x[1],!0,!1),l=A0[0],q0=Q.dragData.possibleDragElements;Q.hoverData.mdownPos=x,Q.hoverData.mdownGPos=s;var N0=function H0(){Q.hoverData.tapholdCancelled=!1,clearTimeout(Q.hoverData.tapholdTimeout),Q.hoverData.tapholdTimeout=setTimeout(function(){if(Q.hoverData.tapholdCancelled)return;else{var g0=Q.hoverData.down;if(g0)g0.emit({originalEvent:W,type:"taphold",position:{x:x[0],y:x[1]}});else g.emit({originalEvent:W,type:"taphold",position:{x:x[0],y:x[1]}})}},Q.tapholdDuration)};if(W.which==3){Q.hoverData.cxtStarted=!0;var C0={originalEvent:W,type:"cxttapstart",position:{x:x[0],y:x[1]}};if(l)l.activate(),l.emit(C0),Q.hoverData.down=l;else g.emit(C0);Q.hoverData.downTime=(new Date()).getTime(),Q.hoverData.cxtDragged=!1}else if(W.which==1){if(l)l.activate();{if(l!=null){if(Q.nodeIsGrabbable(l)){var B0=function H0(g0){return{originalEvent:W,type:g0,position:{x:x[0],y:x[1]}}},T0=function H0(g0){g0.emit(B0("grab"))};if(L(l),!l.selected())q0=Q.dragData.possibleDragElements=g.collection(),Y(l,{addToList:q0}),l.emit(B0("grabon")).emit(B0("grab"));else{q0=Q.dragData.possibleDragElements=g.collection();var O0=g.$(function(H0){return H0.isNode()&&H0.selected()&&Q.nodeIsGrabbable(H0)});R(O0,{addToList:q0}),l.emit(B0("grabon")),O0.forEach(T0)}Q.redrawHint("eles",!0),Q.redrawHint("drag",!0)}}Q.hoverData.down=l,Q.hoverData.downs=A0,Q.hoverData.downTime=(new Date()).getTime()}if($(l,["mousedown","tapstart","vmousedown"],W,{x:x[0],y:x[1]}),l==null)d[4]=1,Q.data.bgActivePosistion={x:x[0],y:x[1]},Q.redrawHint("select",!0),Q.redraw();else if(l.pannable())d[4]=1;N0()}d[0]=d[2]=x[0],d[1]=d[3]=x[1]},!1),Q.registerBinding(J,"mousemove",function y(W){var g=Q.hoverData.capture;if(!g&&!E(W))return;var s=!1,x=Q.cy,d=x.zoom(),A0=[W.clientX,W.clientY],l=Q.projectIntoViewport(A0[0],A0[1]),q0=Q.hoverData.mdownPos,N0=Q.hoverData.mdownGPos,C0=Q.selection,B0=null;if(!Q.hoverData.draggingEles&&!Q.hoverData.dragging&&!Q.hoverData.selecting)B0=Q.findNearestElement(l[0],l[1],!0,!1);var T0=Q.hoverData.last,O0=Q.hoverData.down,H0=[l[0]-C0[2],l[1]-C0[3]],g0=Q.dragData.possibleDragElements,i0;if(N0){var X8=A0[0]-N0[0],B8=X8*X8,a0=A0[1]-N0[1],R8=a0*a0,F8=B8+R8;Q.hoverData.isOverThresholdDrag=i0=F8>=Q.desktopTapThreshold2}var w8=G(W);if(i0)Q.hoverData.tapholdCancelled=!0;var m8=function W9(){var T8=Q.hoverData.dragDelta=Q.hoverData.dragDelta||[];if(T8.length===0)T8.push(H0[0]),T8.push(H0[1]);else T8[0]+=H0[0],T8[1]+=H0[1]};s=!0,$(B0,["mousemove","vmousemove","tapdrag"],W,{x:l[0],y:l[1]});var LJ=function W9(){if(Q.data.bgActivePosistion=void 0,!Q.hoverData.selecting)x.emit({originalEvent:W,type:"boxstart",position:{x:l[0],y:l[1]}});C0[4]=1,Q.hoverData.selecting=!0,Q.redrawHint("select",!0),Q.redraw()};if(Q.hoverData.which===3){if(i0){var r8={originalEvent:W,type:"cxtdrag",position:{x:l[0],y:l[1]}};if(O0)O0.emit(r8);else x.emit(r8);if(Q.hoverData.cxtDragged=!0,!Q.hoverData.cxtOver||B0!==Q.hoverData.cxtOver){if(Q.hoverData.cxtOver)Q.hoverData.cxtOver.emit({originalEvent:W,type:"cxtdragout",position:{x:l[0],y:l[1]}});if(Q.hoverData.cxtOver=B0,B0)B0.emit({originalEvent:W,type:"cxtdragover",position:{x:l[0],y:l[1]}})}}}else if(Q.hoverData.dragging){if(s=!0,x.panningEnabled()&&x.userPanningEnabled()){var zJ;if(Q.hoverData.justStartedPan){var E9=Q.hoverData.mdownPos;zJ={x:(l[0]-E9[0])*d,y:(l[1]-E9[1])*d},Q.hoverData.justStartedPan=!1}else zJ={x:H0[0]*d,y:H0[1]*d};x.panBy(zJ),x.emit("dragpan"),Q.hoverData.dragged=!0}l=Q.projectIntoViewport(W.clientX,W.clientY)}else if(C0[4]==1&&(O0==null||O0.pannable())){if(i0){if(!Q.hoverData.dragging&&x.boxSelectionEnabled()&&(w8||!x.panningEnabled()||!x.userPanningEnabled()))LJ();else if(!Q.hoverData.selecting&&x.panningEnabled()&&x.userPanningEnabled()){var o8=F(O0,Q.hoverData.downs);if(o8)Q.hoverData.dragging=!0,Q.hoverData.justStartedPan=!0,C0[4]=0,Q.data.bgActivePosistion=EJ(q0),Q.redrawHint("select",!0),Q.redraw()}if(O0&&O0.pannable()&&O0.active())O0.unactivate()}}else{if(O0&&O0.pannable()&&O0.active())O0.unactivate();if((!O0||!O0.grabbed())&&B0!=T0){if(T0)$(T0,["mouseout","tapdragout"],W,{x:l[0],y:l[1]});if(B0)$(B0,["mouseover","tapdragover"],W,{x:l[0],y:l[1]});Q.hoverData.last=B0}if(O0)if(i0){if(x.boxSelectionEnabled()&&w8){if(O0&&O0.grabbed()){if(X(g0),O0.emit("freeon"),g0.emit("free"),Q.dragData.didDrag)O0.emit("dragfreeon"),g0.emit("dragfree")}LJ()}else if(O0&&O0.grabbed()&&Q.nodeIsDraggable(O0)){var K8=!Q.dragData.didDrag;if(K8)Q.redrawHint("eles",!0);if(Q.dragData.didDrag=!0,!Q.hoverData.draggingEles)R(g0,{inDragLayer:!0});var e0={x:0,y:0};if($0(H0[0])&&$0(H0[1])){if(e0.x+=H0[0],e0.y+=H0[1],K8){var q8=Q.hoverData.dragDelta;if(q8&&$0(q8[0])&&$0(q8[1]))e0.x+=q8[0],e0.y+=q8[1]}}Q.hoverData.draggingEles=!0,g0.silentShift(e0).emit("position drag"),Q.redrawHint("drag",!0),Q.redraw()}}else m8();s=!0}if(C0[2]=l[0],C0[3]=l[1],s){if(W.stopPropagation)W.stopPropagation();if(W.preventDefault)W.preventDefault();return!1}},!1);var S,w,T;Q.registerBinding(J,"mouseup",function y(W){var g=Q.hoverData.capture;if(!g)return;Q.hoverData.capture=!1;var s=Q.cy,x=Q.projectIntoViewport(W.clientX,W.clientY),d=Q.selection,A0=Q.findNearestElement(x[0],x[1],!0,!1),l=Q.dragData.possibleDragElements,q0=Q.hoverData.down,N0=G(W);if(Q.data.bgActivePosistion)Q.redrawHint("select",!0),Q.redraw();if(Q.hoverData.tapholdCancelled=!0,Q.data.bgActivePosistion=void 0,q0)q0.unactivate();if(Q.hoverData.which===3){var C0={originalEvent:W,type:"cxttapend",position:{x:x[0],y:x[1]}};if(q0)q0.emit(C0);else s.emit(C0);if(!Q.hoverData.cxtDragged){var B0={originalEvent:W,type:"cxttap",position:{x:x[0],y:x[1]}};if(q0)q0.emit(B0);else s.emit(B0)}Q.hoverData.cxtDragged=!1,Q.hoverData.which=null}else if(Q.hoverData.which===1){if($(A0,["mouseup","tapend","vmouseup"],W,{x:x[0],y:x[1]}),!Q.dragData.didDrag&&!Q.hoverData.dragged&&!Q.hoverData.selecting&&!Q.hoverData.isOverThresholdDrag)if($(q0,["click","tap","vclick"],W,{x:x[0],y:x[1]}),w=!1,W.timeStamp-T<=s.multiClickDebounceTime())S&&clearTimeout(S),w=!0,T=null,$(q0,["dblclick","dbltap","vdblclick"],W,{x:x[0],y:x[1]});else S=setTimeout(function(){if(w)return;$(q0,["oneclick","onetap","voneclick"],W,{x:x[0],y:x[1]})},s.multiClickDebounceTime()),T=W.timeStamp;if(q0==null&&!Q.dragData.didDrag&&!Q.hoverData.selecting&&!Q.hoverData.dragged&&!G(W)){if(s.$(Z).unselect(["tapunselect"]),l.length>0)Q.redrawHint("eles",!0);Q.dragData.possibleDragElements=l=s.collection()}if(A0==q0&&!Q.dragData.didDrag&&!Q.hoverData.selecting){if(A0!=null&&A0._private.selectable){if(Q.hoverData.dragging);else if(s.selectionType()==="additive"||N0)if(A0.selected())A0.unselect(["tapunselect"]);else A0.select(["tapselect"]);else if(!N0)s.$(Z).unmerge(A0).unselect(["tapunselect"]),A0.select(["tapselect"]);Q.redrawHint("eles",!0)}}if(Q.hoverData.selecting){var T0=s.collection(Q.getAllInBox(d[0],d[1],d[2],d[3]));if(Q.redrawHint("select",!0),T0.length>0)Q.redrawHint("eles",!0);s.emit({type:"boxend",originalEvent:W,position:{x:x[0],y:x[1]}});var O0=function g0(i0){return i0.selectable()&&!i0.selected()};if(s.selectionType()==="additive")T0.emit("box").stdFilter(O0).select().emit("boxselect");else{if(!N0)s.$(Z).unmerge(T0).unselect();T0.emit("box").stdFilter(O0).select().emit("boxselect")}Q.redraw()}if(Q.hoverData.dragging)Q.hoverData.dragging=!1,Q.redrawHint("select",!0),Q.redrawHint("eles",!0),Q.redraw();if(!d[4]){Q.redrawHint("drag",!0),Q.redrawHint("eles",!0);var H0=q0&&q0.grabbed();if(X(l),H0){if(q0.emit("freeon"),l.emit("free"),Q.dragData.didDrag)q0.emit("dragfreeon"),l.emit("dragfree")}}}d[4]=0,Q.hoverData.down=null,Q.hoverData.cxtStarted=!1,Q.hoverData.draggingEles=!1,Q.hoverData.selecting=!1,Q.hoverData.isOverThresholdDrag=!1,Q.dragData.didDrag=!1,Q.hoverData.dragged=!1,Q.hoverData.dragDelta=[],Q.hoverData.mdownPos=null,Q.hoverData.mdownGPos=null},!1);var v=function y(W){if(Q.scrollingPage)return;var g=Q.cy,s=g.zoom(),x=g.pan(),d=Q.projectIntoViewport(W.clientX,W.clientY),A0=[d[0]*s+x.x,d[1]*s+x.y];if(Q.hoverData.draggingEles||Q.hoverData.dragging||Q.hoverData.cxtStarted||C()){W.preventDefault();return}if(g.panningEnabled()&&g.userPanningEnabled()&&g.zoomingEnabled()&&g.userZoomingEnabled()){W.preventDefault(),Q.data.wheelZooming=!0,clearTimeout(Q.data.wheelTimeout),Q.data.wheelTimeout=setTimeout(function(){Q.data.wheelZooming=!1,Q.redrawHint("eles",!0),Q.redraw()},150);var l;if(W.deltaY!=null)l=W.deltaY/-250;else if(W.wheelDeltaY!=null)l=W.wheelDeltaY/1000;else l=W.wheelDelta/1000;l=l*Q.wheelSensitivity;var q0=W.deltaMode===1;if(q0)l*=33;var N0=g.zoom()*Math.pow(10,l);if(W.type==="gesturechange")N0=Q.gestureStartZoom*W.scale;g.zoom({level:N0,renderedPosition:{x:A0[0],y:A0[1]}}),g.emit(W.type==="gesturechange"?"pinchzoom":"scrollzoom")}};Q.registerBinding(Q.container,"wheel",v,!0),Q.registerBinding(J,"scroll",function y(W){Q.scrollingPage=!0,clearTimeout(Q.scrollingPageTimeout),Q.scrollingPageTimeout=setTimeout(function(){Q.scrollingPage=!1},250)},!0),Q.registerBinding(Q.container,"gesturestart",function y(W){if(Q.gestureStartZoom=Q.cy.zoom(),!Q.hasTouchStarted)W.preventDefault()},!0),Q.registerBinding(Q.container,"gesturechange",function(y){if(!Q.hasTouchStarted)v(y)},!0),Q.registerBinding(Q.container,"mouseout",function y(W){var g=Q.projectIntoViewport(W.clientX,W.clientY);Q.cy.emit({originalEvent:W,type:"mouseout",position:{x:g[0],y:g[1]}})},!1),Q.registerBinding(Q.container,"mouseover",function y(W){var g=Q.projectIntoViewport(W.clientX,W.clientY);Q.cy.emit({originalEvent:W,type:"mouseover",position:{x:g[0],y:g[1]}})},!1);var I,_,b,P,u,h,p,m,c,i,r,a,n,f=function y(W,g,s,x){return Math.sqrt((s-W)*(s-W)+(x-g)*(x-g))},o=function y(W,g,s,x){return(s-W)*(s-W)+(x-g)*(x-g)},e;Q.registerBinding(Q.container,"touchstart",e=function y(W){if(Q.hasTouchStarted=!0,!E(W))return;O(),Q.touchData.capture=!0,Q.data.bgActivePosistion=void 0;var g=Q.cy,s=Q.touchData.now,x=Q.touchData.earlier;if(W.touches[0]){var d=Q.projectIntoViewport(W.touches[0].clientX,W.touches[0].clientY);s[0]=d[0],s[1]=d[1]}if(W.touches[1]){var d=Q.projectIntoViewport(W.touches[1].clientX,W.touches[1].clientY);s[2]=d[0],s[3]=d[1]}if(W.touches[2]){var d=Q.projectIntoViewport(W.touches[2].clientX,W.touches[2].clientY);s[4]=d[0],s[5]=d[1]}if(W.touches[1]){Q.touchData.singleTouchMoved=!0,X(Q.dragData.touchDragEles);var A0=Q.findContainerClientCoords();c=A0[0],i=A0[1],r=A0[2],a=A0[3],I=W.touches[0].clientX-c,_=W.touches[0].clientY-i,b=W.touches[1].clientX-c,P=W.touches[1].clientY-i,n=0<=I&&I<=r&&0<=b&&b<=r&&0<=_&&_<=a&&0<=P&&P<=a;var l=g.pan(),q0=g.zoom();u=f(I,_,b,P),h=o(I,_,b,P),p=[(I+b)/2,(_+P)/2],m=[(p[0]-l.x)/q0,(p[1]-l.y)/q0];var N0=200,C0=N0*N0;if(h<C0&&!W.touches[2]){var B0=Q.findNearestElement(s[0],s[1],!0,!0),T0=Q.findNearestElement(s[2],s[3],!0,!0);if(B0&&B0.isNode())B0.activate().emit({originalEvent:W,type:"cxttapstart",position:{x:s[0],y:s[1]}}),Q.touchData.start=B0;else if(T0&&T0.isNode())T0.activate().emit({originalEvent:W,type:"cxttapstart",position:{x:s[0],y:s[1]}}),Q.touchData.start=T0;else g.emit({originalEvent:W,type:"cxttapstart",position:{x:s[0],y:s[1]}});if(Q.touchData.start)Q.touchData.start._private.grabbed=!1;Q.touchData.cxt=!0,Q.touchData.cxtDragged=!1,Q.data.bgActivePosistion=void 0,Q.redraw();return}}if(W.touches[2]){if(g.boxSelectionEnabled())W.preventDefault()}else if(W.touches[1]);else if(W.touches[0]){var O0=Q.findNearestElements(s[0],s[1],!0,!0),H0=O0[0];if(H0!=null){if(H0.activate(),Q.touchData.start=H0,Q.touchData.starts=O0,Q.nodeIsGrabbable(H0)){var g0=Q.dragData.touchDragEles=g.collection(),i0=null;if(Q.redrawHint("eles",!0),Q.redrawHint("drag",!0),H0.selected())i0=g.$(function(F8){return F8.selected()&&Q.nodeIsGrabbable(F8)}),R(i0,{addToList:g0});else Y(H0,{addToList:g0});L(H0);var X8=function F8(w8){return{originalEvent:W,type:w8,position:{x:s[0],y:s[1]}}};if(H0.emit(X8("grabon")),i0)i0.forEach(function(F8){F8.emit(X8("grab"))});else H0.emit(X8("grab"))}}if($(H0,["touchstart","tapstart","vmousedown"],W,{x:s[0],y:s[1]}),H0==null)Q.data.bgActivePosistion={x:d[0],y:d[1]},Q.redrawHint("select",!0),Q.redraw();Q.touchData.singleTouchMoved=!1,Q.touchData.singleTouchStartTime=+new Date,clearTimeout(Q.touchData.tapholdTimeout),Q.touchData.tapholdTimeout=setTimeout(function(){if(Q.touchData.singleTouchMoved===!1&&!Q.pinching&&!Q.touchData.selecting)$(Q.touchData.start,["taphold"],W,{x:s[0],y:s[1]})},Q.tapholdDuration)}if(W.touches.length>=1){var B8=Q.touchData.startPosition=[null,null,null,null,null,null];for(var a0=0;a0<s.length;a0++)B8[a0]=x[a0]=s[a0];var R8=W.touches[0];Q.touchData.startGPosition=[R8.clientX,R8.clientY]}},!1);var t;Q.registerBinding(window,"touchmove",t=function y(W){var g=Q.touchData.capture;if(!g&&!E(W))return;var{selection:s,cy:x}=Q,d=Q.touchData.now,A0=Q.touchData.earlier,l=x.zoom();if(W.touches[0]){var q0=Q.projectIntoViewport(W.touches[0].clientX,W.touches[0].clientY);d[0]=q0[0],d[1]=q0[1]}if(W.touches[1]){var q0=Q.projectIntoViewport(W.touches[1].clientX,W.touches[1].clientY);d[2]=q0[0],d[3]=q0[1]}if(W.touches[2]){var q0=Q.projectIntoViewport(W.touches[2].clientX,W.touches[2].clientY);d[4]=q0[0],d[5]=q0[1]}var N0=Q.touchData.startGPosition,C0;if(g&&W.touches[0]&&N0){var B0=[];for(var T0=0;T0<d.length;T0++)B0[T0]=d[T0]-A0[T0];var O0=W.touches[0].clientX-N0[0],H0=O0*O0,g0=W.touches[0].clientY-N0[1],i0=g0*g0,X8=H0+i0;C0=X8>=Q.touchTapThreshold2}if(g&&Q.touchData.cxt){W.preventDefault();var B8=W.touches[0].clientX-c,a0=W.touches[0].clientY-i,R8=W.touches[1].clientX-c,F8=W.touches[1].clientY-i,w8=o(B8,a0,R8,F8),m8=w8/h,LJ=150,r8=LJ*LJ,zJ=1.5,E9=zJ*zJ;if(m8>=E9||w8>=r8){Q.touchData.cxt=!1,Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0);var o8={originalEvent:W,type:"cxttapend",position:{x:d[0],y:d[1]}};if(Q.touchData.start)Q.touchData.start.unactivate().emit(o8),Q.touchData.start=null;else x.emit(o8)}}if(g&&Q.touchData.cxt){var o8={originalEvent:W,type:"cxtdrag",position:{x:d[0],y:d[1]}};if(Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0),Q.touchData.start)Q.touchData.start.emit(o8);else x.emit(o8);if(Q.touchData.start)Q.touchData.start._private.grabbed=!1;Q.touchData.cxtDragged=!0;var K8=Q.findNearestElement(d[0],d[1],!0,!0);if(!Q.touchData.cxtOver||K8!==Q.touchData.cxtOver){if(Q.touchData.cxtOver)Q.touchData.cxtOver.emit({originalEvent:W,type:"cxtdragout",position:{x:d[0],y:d[1]}});if(Q.touchData.cxtOver=K8,K8)K8.emit({originalEvent:W,type:"cxtdragover",position:{x:d[0],y:d[1]}})}}else if(g&&W.touches[2]&&x.boxSelectionEnabled()){if(W.preventDefault(),Q.data.bgActivePosistion=void 0,this.lastThreeTouch=+new Date,!Q.touchData.selecting)x.emit({originalEvent:W,type:"boxstart",position:{x:d[0],y:d[1]}});if(Q.touchData.selecting=!0,Q.touchData.didSelect=!0,s[4]=1,!s||s.length===0||s[0]===void 0)s[0]=(d[0]+d[2]+d[4])/3,s[1]=(d[1]+d[3]+d[5])/3,s[2]=(d[0]+d[2]+d[4])/3+1,s[3]=(d[1]+d[3]+d[5])/3+1;else s[2]=(d[0]+d[2]+d[4])/3,s[3]=(d[1]+d[3]+d[5])/3;Q.redrawHint("select",!0),Q.redraw()}else if(g&&W.touches[1]&&!Q.touchData.didSelect&&x.zoomingEnabled()&&x.panningEnabled()&&x.userZoomingEnabled()&&x.userPanningEnabled()){W.preventDefault(),Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0);var e0=Q.dragData.touchDragEles;if(e0){Q.redrawHint("drag",!0);for(var q8=0;q8<e0.length;q8++){var W9=e0[q8]._private;W9.grabbed=!1,W9.rscratch.inDragLayer=!1}}var T8=Q.touchData.start,B8=W.touches[0].clientX-c,a0=W.touches[0].clientY-i,R8=W.touches[1].clientX-c,F8=W.touches[1].clientY-i,O7=f(B8,a0,R8,F8),T4=O7/u;if(n){var j4=B8-I,D4=a0-_,C4=R8-b,S4=F8-P,I4=(j4+C4)/2,w4=(D4+S4)/2,gJ=x.zoom(),O6=gJ*T4,T9=x.pan(),N7=m[0]*gJ+T9.x,H7=m[1]*gJ+T9.y,P4={x:-O6/gJ*(N7-T9.x-I4)+N7,y:-O6/gJ*(H7-T9.y-w4)+H7};if(T8&&T8.active()){var e0=Q.dragData.touchDragEles;if(X(e0),Q.redrawHint("drag",!0),Q.redrawHint("eles",!0),T8.unactivate().emit("freeon"),e0.emit("free"),Q.dragData.didDrag)T8.emit("dragfreeon"),e0.emit("dragfree")}x.viewport({zoom:O6,pan:P4,cancelOnFailedZoom:!0}),x.emit("pinchzoom"),u=O7,I=B8,_=a0,b=R8,P=F8,Q.pinching=!0}if(W.touches[0]){var q0=Q.projectIntoViewport(W.touches[0].clientX,W.touches[0].clientY);d[0]=q0[0],d[1]=q0[1]}if(W.touches[1]){var q0=Q.projectIntoViewport(W.touches[1].clientX,W.touches[1].clientY);d[2]=q0[0],d[3]=q0[1]}if(W.touches[2]){var q0=Q.projectIntoViewport(W.touches[2].clientX,W.touches[2].clientY);d[4]=q0[0],d[5]=q0[1]}}else if(W.touches[0]&&!Q.touchData.didSelect){var O8=Q.touchData.start,N6=Q.touchData.last,K8;if(!Q.hoverData.draggingEles&&!Q.swipePanning)K8=Q.findNearestElement(d[0],d[1],!0,!0);if(g&&O8!=null)W.preventDefault();if(g&&O8!=null&&Q.nodeIsDraggable(O8))if(C0){var e0=Q.dragData.touchDragEles,k7=!Q.dragData.didDrag;if(k7)R(e0,{inDragLayer:!0});Q.dragData.didDrag=!0;var hJ={x:0,y:0};if($0(B0[0])&&$0(B0[1])){if(hJ.x+=B0[0],hJ.y+=B0[1],k7){Q.redrawHint("eles",!0);var N8=Q.touchData.dragDelta;if(N8&&$0(N8[0])&&$0(N8[1]))hJ.x+=N8[0],hJ.y+=N8[1]}}if(Q.hoverData.draggingEles=!0,e0.silentShift(hJ).emit("position drag"),Q.redrawHint("drag",!0),Q.touchData.startPosition[0]==A0[0]&&Q.touchData.startPosition[1]==A0[1])Q.redrawHint("eles",!0);Q.redraw()}else{var N8=Q.touchData.dragDelta=Q.touchData.dragDelta||[];if(N8.length===0)N8.push(B0[0]),N8.push(B0[1]);else N8[0]+=B0[0],N8[1]+=B0[1]}{if($(O8||K8,["touchmove","tapdrag","vmousemove"],W,{x:d[0],y:d[1]}),(!O8||!O8.grabbed())&&K8!=N6){if(N6)N6.emit({originalEvent:W,type:"tapdragout",position:{x:d[0],y:d[1]}});if(K8)K8.emit({originalEvent:W,type:"tapdragover",position:{x:d[0],y:d[1]}})}Q.touchData.last=K8}if(g){for(var q8=0;q8<d.length;q8++)if(d[q8]&&Q.touchData.startPosition[q8]&&C0)Q.touchData.singleTouchMoved=!0}if(g&&(O8==null||O8.pannable())&&x.panningEnabled()&&x.userPanningEnabled()){var v4=F(O8,Q.touchData.starts);if(v4){if(W.preventDefault(),!Q.data.bgActivePosistion)Q.data.bgActivePosistion=EJ(Q.touchData.startPosition);if(Q.swipePanning)x.panBy({x:B0[0]*l,y:B0[1]*l}),x.emit("dragpan");else if(C0){if(Q.swipePanning=!0,x.panBy({x:O0*l,y:g0*l}),x.emit("dragpan"),O8)O8.unactivate(),Q.redrawHint("select",!0),Q.touchData.start=null}}var q0=Q.projectIntoViewport(W.touches[0].clientX,W.touches[0].clientY);d[0]=q0[0],d[1]=q0[1]}}for(var T0=0;T0<d.length;T0++)A0[T0]=d[T0];if(g&&W.touches.length>0&&!Q.hoverData.draggingEles&&!Q.swipePanning&&Q.data.bgActivePosistion!=null)Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0),Q.redraw()},!1);var J0;Q.registerBinding(J,"touchcancel",J0=function y(W){var g=Q.touchData.start;if(Q.touchData.capture=!1,g)g.unactivate()});var K0,Y0,Q0,Z0;if(Q.registerBinding(J,"touchend",K0=function y(W){var g=Q.touchData.start,s=Q.touchData.capture;if(s){if(W.touches.length===0)Q.touchData.capture=!1;W.preventDefault()}else return;var x=Q.selection;Q.swipePanning=!1,Q.hoverData.draggingEles=!1;var d=Q.cy,A0=d.zoom(),l=Q.touchData.now,q0=Q.touchData.earlier;if(W.touches[0]){var N0=Q.projectIntoViewport(W.touches[0].clientX,W.touches[0].clientY);l[0]=N0[0],l[1]=N0[1]}if(W.touches[1]){var N0=Q.projectIntoViewport(W.touches[1].clientX,W.touches[1].clientY);l[2]=N0[0],l[3]=N0[1]}if(W.touches[2]){var N0=Q.projectIntoViewport(W.touches[2].clientX,W.touches[2].clientY);l[4]=N0[0],l[5]=N0[1]}if(g)g.unactivate();var C0;if(Q.touchData.cxt){if(C0={originalEvent:W,type:"cxttapend",position:{x:l[0],y:l[1]}},g)g.emit(C0);else d.emit(C0);if(!Q.touchData.cxtDragged){var B0={originalEvent:W,type:"cxttap",position:{x:l[0],y:l[1]}};if(g)g.emit(B0);else d.emit(B0)}if(Q.touchData.start)Q.touchData.start._private.grabbed=!1;Q.touchData.cxt=!1,Q.touchData.start=null,Q.redraw();return}if(!W.touches[2]&&d.boxSelectionEnabled()&&Q.touchData.selecting){Q.touchData.selecting=!1;var T0=d.collection(Q.getAllInBox(x[0],x[1],x[2],x[3]));x[0]=void 0,x[1]=void 0,x[2]=void 0,x[3]=void 0,x[4]=0,Q.redrawHint("select",!0),d.emit({type:"boxend",originalEvent:W,position:{x:l[0],y:l[1]}});var O0=function LJ(r8){return r8.selectable()&&!r8.selected()};if(T0.emit("box").stdFilter(O0).select().emit("boxselect"),T0.nonempty())Q.redrawHint("eles",!0);Q.redraw()}if(g!=null)g.unactivate();if(W.touches[2])Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0);else if(W.touches[1]);else if(W.touches[0]);else if(!W.touches[0]){Q.data.bgActivePosistion=void 0,Q.redrawHint("select",!0);var H0=Q.dragData.touchDragEles;if(g!=null){var g0=g._private.grabbed;if(X(H0),Q.redrawHint("drag",!0),Q.redrawHint("eles",!0),g0){if(g.emit("freeon"),H0.emit("free"),Q.dragData.didDrag)g.emit("dragfreeon"),H0.emit("dragfree")}$(g,["touchend","tapend","vmouseup","tapdragout"],W,{x:l[0],y:l[1]}),g.unactivate(),Q.touchData.start=null}else{var i0=Q.findNearestElement(l[0],l[1],!0,!0);$(i0,["touchend","tapend","vmouseup","tapdragout"],W,{x:l[0],y:l[1]})}var X8=Q.touchData.startPosition[0]-l[0],B8=X8*X8,a0=Q.touchData.startPosition[1]-l[1],R8=a0*a0,F8=B8+R8,w8=F8*A0*A0;if(!Q.touchData.singleTouchMoved){if(!g)d.$(":selected").unselect(["tapunselect"]);if($(g,["tap","vclick"],W,{x:l[0],y:l[1]}),Y0=!1,W.timeStamp-Z0<=d.multiClickDebounceTime())Q0&&clearTimeout(Q0),Y0=!0,Z0=null,$(g,["dbltap","vdblclick"],W,{x:l[0],y:l[1]});else Q0=setTimeout(function(){if(Y0)return;$(g,["onetap","voneclick"],W,{x:l[0],y:l[1]})},d.multiClickDebounceTime()),Z0=W.timeStamp}if(g!=null&&!Q.dragData.didDrag&&g._private.selectable&&w8<Q.touchTapThreshold2&&!Q.pinching){if(d.selectionType()==="single")d.$(Z).unmerge(g).unselect(["tapunselect"]),g.select(["tapselect"]);else if(g.selected())g.unselect(["tapunselect"]);else g.select(["tapselect"]);Q.redrawHint("eles",!0)}Q.touchData.singleTouchMoved=!0}for(var m8=0;m8<l.length;m8++)q0[m8]=l[m8];if(Q.dragData.didDrag=!1,W.touches.length===0)Q.touchData.dragDelta=[],Q.touchData.startPosition=[null,null,null,null,null,null],Q.touchData.startGPosition=null,Q.touchData.didSelect=!1;if(W.touches.length<2){if(W.touches.length===1)Q.touchData.startGPosition=[W.touches[0].clientX,W.touches[0].clientY];Q.pinching=!1,Q.redrawHint("eles",!0),Q.redraw()}},!1),typeof TouchEvent==="undefined"){var L0=[],M0=function y(W){return{clientX:W.clientX,clientY:W.clientY,force:1,identifier:W.pointerId,pageX:W.pageX,pageY:W.pageY,radiusX:W.width/2,radiusY:W.height/2,screenX:W.screenX,screenY:W.screenY,target:W.target}},U0=function y(W){return{event:W,touch:M0(W)}},z0=function y(W){L0.push(U0(W))},W0=function y(W){for(var g=0;g<L0.length;g++){var s=L0[g];if(s.event.pointerId===W.pointerId){L0.splice(g,1);return}}},k0=function y(W){var g=L0.filter(function(s){return s.event.pointerId===W.pointerId})[0];g.event=W,g.touch=M0(W)},X0=function y(W){W.touches=L0.map(function(g){return g.touch})},E0=function y(W){return W.pointerType==="mouse"||W.pointerType===4};Q.registerBinding(Q.container,"pointerdown",function(y){if(E0(y))return;y.preventDefault(),z0(y),X0(y),e(y)}),Q.registerBinding(Q.container,"pointerup",function(y){if(E0(y))return;W0(y),X0(y),K0(y)}),Q.registerBinding(Q.container,"pointercancel",function(y){if(E0(y))return;W0(y),X0(y),J0(y)}),Q.registerBinding(Q.container,"pointermove",function(y){if(E0(y))return;y.preventDefault(),k0(y),X0(y),t(y)})}};var _8={};_8.generatePolygon=function(Q,J){return this.nodeShapes[Q]={renderer:this,name:Q,points:J,draw:function Z($,G,F,U,K){this.renderer.nodeShapeImpl("polygon",$,G,F,U,K,this.points)},intersectLine:function Z($,G,F,U,K,M,q){return K9(K,M,this.points,$,G,F/2,U/2,q)},checkPoint:function Z($,G,F,U,K,M,q){return v8($,G,this.points,M,q,U,K,[0,-1],F)}}};_8.generateEllipse=function(){return this.nodeShapes.ellipse={renderer:this,name:"ellipse",draw:function Q(J,Z,$,G,F){this.renderer.nodeShapeImpl(this.name,J,Z,$,G,F)},intersectLine:function Q(J,Z,$,G,F,U,K){return cK(F,U,J,Z,$/2+K,G/2+K)},checkPoint:function Q(J,Z,$,G,F,U,K){return QJ(J,Z,G,F,U,K,$)}}};_8.generateRoundPolygon=function(Q,J){var Z=new Array(J.length*2);for(var $=0;$<J.length/2;$++){var G=$*2,F=void 0;if($<J.length/2-1)F=($+1)*2;else F=0;Z[$*4]=J[G],Z[$*4+1]=J[G+1];var U=J[F]-J[G],K=J[F+1]-J[G+1],M=Math.sqrt(U*U+K*K);Z[$*4+2]=U/M,Z[$*4+3]=K/M}return this.nodeShapes[Q]={renderer:this,name:Q,points:Z,draw:function q(L,z,A,V,R){this.renderer.nodeShapeImpl("round-polygon",L,z,A,V,R,this.points)},intersectLine:function q(L,z,A,V,R,Y,X){return dK(R,Y,this.points,L,z,A,V)},checkPoint:function q(L,z,A,V,R,Y,X){return xK(L,z,this.points,Y,X,V,R)}}};_8.generateRoundRectangle=function(){return this.nodeShapes["round-rectangle"]=this.nodeShapes.roundrectangle={renderer:this,name:"round-rectangle",points:U8(4,0),draw:function Q(J,Z,$,G,F){this.renderer.nodeShapeImpl(this.name,J,Z,$,G,F)},intersectLine:function Q(J,Z,$,G,F,U,K){return X$(F,U,J,Z,$,G,K)},checkPoint:function Q(J,Z,$,G,F,U,K){var M=X9(G,F),q=M*2;if(v8(J,Z,this.points,U,K,G,F-q,[0,-1],$))return!0;if(v8(J,Z,this.points,U,K,G-q,F,[0,-1],$))return!0;if(QJ(J,Z,q,q,U-G/2+M,K-F/2+M,$))return!0;if(QJ(J,Z,q,q,U+G/2-M,K-F/2+M,$))return!0;if(QJ(J,Z,q,q,U+G/2-M,K+F/2-M,$))return!0;if(QJ(J,Z,q,q,U-G/2+M,K+F/2-M,$))return!0;return!1}}};_8.generateCutRectangle=function(){return this.nodeShapes["cut-rectangle"]=this.nodeShapes.cutrectangle={renderer:this,name:"cut-rectangle",cornerLength:O$(),points:U8(4,0),draw:function Q(J,Z,$,G,F){this.renderer.nodeShapeImpl(this.name,J,Z,$,G,F)},generateCutTrianglePts:function Q(J,Z,$,G){var F=this.cornerLength,U=Z/2,K=J/2,M=$-K,q=$+K,L=G-U,z=G+U;return{topLeft:[M,L+F,M+F,L,M+F,L+F],topRight:[q-F,L,q,L+F,q-F,L+F],bottomRight:[q,z-F,q-F,z,q-F,z-F],bottomLeft:[M+F,z,M,z-F,M+F,z-F]}},intersectLine:function Q(J,Z,$,G,F,U,K){var M=this.generateCutTrianglePts($+2*K,G+2*K,J,Z),q=[].concat.apply([],[M.topLeft.splice(0,4),M.topRight.splice(0,4),M.bottomRight.splice(0,4),M.bottomLeft.splice(0,4)]);return K9(F,U,q,J,Z)},checkPoint:function Q(J,Z,$,G,F,U,K){if(v8(J,Z,this.points,U,K,G,F-2*this.cornerLength,[0,-1],$))return!0;if(v8(J,Z,this.points,U,K,G-2*this.cornerLength,F,[0,-1],$))return!0;var M=this.generateCutTrianglePts(G,F,U,K);return M8(J,Z,M.topLeft)||M8(J,Z,M.topRight)||M8(J,Z,M.bottomRight)||M8(J,Z,M.bottomLeft)}}};_8.generateBarrel=function(){return this.nodeShapes.barrel={renderer:this,name:"barrel",points:U8(4,0),draw:function Q(J,Z,$,G,F){this.renderer.nodeShapeImpl(this.name,J,Z,$,G,F)},intersectLine:function Q(J,Z,$,G,F,U,K){var M=0.15,q=0.5,L=0.85,z=this.generateBarrelBezierPts($+2*K,G+2*K,J,Z),A=function R(Y){var X=TJ({x:Y[0],y:Y[1]},{x:Y[2],y:Y[3]},{x:Y[4],y:Y[5]},M),B=TJ({x:Y[0],y:Y[1]},{x:Y[2],y:Y[3]},{x:Y[4],y:Y[5]},q),O=TJ({x:Y[0],y:Y[1]},{x:Y[2],y:Y[3]},{x:Y[4],y:Y[5]},L);return[Y[0],Y[1],X.x,X.y,B.x,B.y,O.x,O.y,Y[4],Y[5]]},V=[].concat(A(z.topLeft),A(z.topRight),A(z.bottomRight),A(z.bottomLeft));return K9(F,U,V,J,Z)},generateBarrelBezierPts:function Q(J,Z,$,G){var F=Z/2,U=J/2,K=$-U,M=$+U,q=G-F,L=G+F,z=x6(J,Z),A=z.heightOffset,V=z.widthOffset,R=z.ctrlPtOffsetPct*J,Y={topLeft:[K,q+A,K+R,q,K+V,q],topRight:[M-V,q,M-R,q,M,q+A],bottomRight:[M,L-A,M-R,L,M-V,L],bottomLeft:[K+V,L,K+R,L,K,L-A]};return Y.topLeft.isTop=!0,Y.topRight.isTop=!0,Y.bottomLeft.isBottom=!0,Y.bottomRight.isBottom=!0,Y},checkPoint:function Q(J,Z,$,G,F,U,K){var M=x6(G,F),q=M.heightOffset,L=M.widthOffset;if(v8(J,Z,this.points,U,K,G,F-2*q,[0,-1],$))return!0;if(v8(J,Z,this.points,U,K,G-2*L,F,[0,-1],$))return!0;var z=this.generateBarrelBezierPts(G,F,U,K),A=function D(k,C,E){var S=E[4],w=E[2],T=E[0],v=E[5],I=E[1],_=Math.min(S,T),b=Math.max(S,T),P=Math.min(v,I),u=Math.max(v,I);if(_<=k&&k<=b&&P<=C&&C<=u){var h=pK(S,w,T),p=fK(h[0],h[1],h[2],k),m=p.filter(function(c){return 0<=c&&c<=1});if(m.length>0)return m[0]}return null},V=Object.keys(z);for(var R=0;R<V.length;R++){var Y=V[R],X=z[Y],B=A(J,Z,X);if(B==null)continue;var O=X[5],N=X[3],H=X[1],j=l0(O,N,H,B);if(X.isTop&&j<=Z)return!0;if(X.isBottom&&Z<=j)return!0}return!1}}};_8.generateBottomRoundrectangle=function(){return this.nodeShapes["bottom-round-rectangle"]=this.nodeShapes.bottomroundrectangle={renderer:this,name:"bottom-round-rectangle",points:U8(4,0),draw:function Q(J,Z,$,G,F){this.renderer.nodeShapeImpl(this.name,J,Z,$,G,F)},intersectLine:function Q(J,Z,$,G,F,U,K){var M=J-($/2+K),q=Z-(G/2+K),L=q,z=J+($/2+K),A=y8(F,U,J,Z,M,q,z,L,!1);if(A.length>0)return A;return X$(F,U,J,Z,$,G,K)},checkPoint:function Q(J,Z,$,G,F,U,K){var M=X9(G,F),q=2*M;if(v8(J,Z,this.points,U,K,G,F-q,[0,-1],$))return!0;if(v8(J,Z,this.points,U,K,G-q,F,[0,-1],$))return!0;var L=G/2+2*$,z=F/2+2*$,A=[U-L,K-z,U-L,K,U+L,K,U+L,K-z];if(M8(J,Z,A))return!0;if(QJ(J,Z,q,q,U+G/2-M,K+F/2-M,$))return!0;if(QJ(J,Z,q,q,U-G/2+M,K+F/2-M,$))return!0;return!1}}};_8.registerNodeShapes=function(){var Q=this.nodeShapes={},J=this;this.generateEllipse(),this.generatePolygon("triangle",U8(3,0)),this.generateRoundPolygon("round-triangle",U8(3,0)),this.generatePolygon("rectangle",U8(4,0)),Q.square=Q.rectangle,this.generateRoundRectangle(),this.generateCutRectangle(),this.generateBarrel(),this.generateBottomRoundrectangle();{var Z=[0,1,1,0,0,-1,-1,0];this.generatePolygon("diamond",Z),this.generateRoundPolygon("round-diamond",Z)}this.generatePolygon("pentagon",U8(5,0)),this.generateRoundPolygon("round-pentagon",U8(5,0)),this.generatePolygon("hexagon",U8(6,0)),this.generateRoundPolygon("round-hexagon",U8(6,0)),this.generatePolygon("heptagon",U8(7,0)),this.generateRoundPolygon("round-heptagon",U8(7,0)),this.generatePolygon("octagon",U8(8,0)),this.generateRoundPolygon("round-octagon",U8(8,0));var $=new Array(20);{var G=y6(5,0),F=y6(5,Math.PI/5),U=0.5*(3-Math.sqrt(5));U*=1.57;for(var K=0;K<F.length/2;K++)F[K*2]*=U,F[K*2+1]*=U;for(var K=0;K<5;K++)$[K*4]=G[K*2],$[K*4+1]=G[K*2+1],$[K*4+2]=F[K*2],$[K*4+3]=F[K*2+1]}$=B$($),this.generatePolygon("star",$),this.generatePolygon("vee",[-1,-1,0,-0.333,1,-1,0,1]),this.generatePolygon("rhomboid",[-1,-1,0.333,-1,1,1,-0.333,1]),this.generatePolygon("right-rhomboid",[-0.333,-1,1,-1,0.333,1,-1,1]),this.nodeShapes.concavehexagon=this.generatePolygon("concave-hexagon",[-1,-0.95,-0.75,0,-1,0.95,1,0.95,0.75,0,1,-0.95]);{var M=[-1,-1,0.25,-1,1,0,0.25,1,-1,1];this.generatePolygon("tag",M),this.generateRoundPolygon("round-tag",M)}Q.makePolygon=function(q){var L=q.join("$"),z="polygon-"+L,A;if(A=this[z])return A;return J.generatePolygon(z,q)}};var H9={};H9.timeToRender=function(){return this.redrawTotalTime/this.redrawCount};H9.redraw=function(Q){Q=Q||z$();var J=this;if(J.averageRedrawTime===void 0)J.averageRedrawTime=0;if(J.lastRedrawTime===void 0)J.lastRedrawTime=0;if(J.lastDrawTime===void 0)J.lastDrawTime=0;J.requestedFrame=!0,J.renderOptions=Q};H9.beforeRender=function(Q,J){if(this.destroyed)return;if(J==null)h0("Priority is not optional for beforeRender");var Z=this.beforeRenderCallbacks;Z.push({fn:Q,priority:J}),Z.sort(function($,G){return G.priority-$.priority})};var xZ=function Q(J,Z,$){var G=J.beforeRenderCallbacks;for(var F=0;F<G.length;F++)G[F].fn(Z,$)};H9.startRenderLoop=function(){var Q=this,J=Q.cy;if(Q.renderLoopStarted)return;else Q.renderLoopStarted=!0;var Z=function $(G){if(Q.destroyed)return;if(J.batching());else if(Q.requestedFrame&&!Q.skipFrame){xZ(Q,!0,G);var F=P8();Q.render(Q.renderOptions);var U=Q.lastDrawTime=P8();if(Q.averageRedrawTime===void 0)Q.averageRedrawTime=U-F;if(Q.redrawCount===void 0)Q.redrawCount=0;if(Q.redrawCount++,Q.redrawTotalTime===void 0)Q.redrawTotalTime=0;var K=U-F;Q.redrawTotalTime+=K,Q.lastRedrawTime=K,Q.averageRedrawTime=Q.averageRedrawTime/2+K/2,Q.requestedFrame=!1}else xZ(Q,!1,G);Q.skipFrame=!1,n9($)};n9(Z)};var XL=function Q(J){this.init(J)},U4=XL,mJ=U4.prototype;mJ.clientFunctions=["redrawHint","render","renderTo","matchCanvasSize","nodeShapeImpl","arrowShapeImpl"];mJ.init=function(Q){var J=this;J.options=Q,J.cy=Q.cy;var Z=J.container=Q.cy.container(),$=J.cy.window();if($){var G=$.document,F=G.head,U="__________cytoscape_stylesheet",K="__________cytoscape_container",M=G.getElementById(U)!=null;if(Z.className.indexOf(K)<0)Z.className=(Z.className||"")+" "+K;if(!M){var q=G.createElement("style");q.id=U,q.textContent="."+K+" { position: relative; }",F.insertBefore(q,F.children[0])}var L=$.getComputedStyle(Z),z=L.getPropertyValue("position");if(z==="static")P0("A Cytoscape container has style position:static and so can not use UI extensions properly")}J.selection=[void 0,void 0,void 0,void 0,0],J.bezierProjPcts=[0.05,0.225,0.4,0.5,0.6,0.775,0.95],J.hoverData={down:null,last:null,downTime:null,triggerMode:null,dragging:!1,initialPan:[null,null],capture:!1},J.dragData={possibleDragElements:[]},J.touchData={start:null,capture:!1,startPosition:[null,null,null,null,null,null],singleTouchStartTime:null,singleTouchMoved:!0,now:[null,null,null,null,null,null],earlier:[null,null,null,null,null,null]},J.redraws=0,J.showFps=Q.showFps,J.debug=Q.debug,J.hideEdgesOnViewport=Q.hideEdgesOnViewport,J.textureOnViewport=Q.textureOnViewport,J.wheelSensitivity=Q.wheelSensitivity,J.motionBlurEnabled=Q.motionBlur,J.forcedPixelRatio=$0(Q.pixelRatio)?Q.pixelRatio:null,J.motionBlur=Q.motionBlur,J.motionBlurOpacity=Q.motionBlurOpacity,J.motionBlurTransparency=1-J.motionBlurOpacity,J.motionBlurPxRatio=1,J.mbPxRBlurry=1,J.minMbLowQualFrames=4,J.fullQualityMb=!1,J.clearedForMotionBlur=[],J.desktopTapThreshold=Q.desktopTapThreshold,J.desktopTapThreshold2=Q.desktopTapThreshold*Q.desktopTapThreshold,J.touchTapThreshold=Q.touchTapThreshold,J.touchTapThreshold2=Q.touchTapThreshold*Q.touchTapThreshold,J.tapholdDuration=500,J.bindings=[],J.beforeRenderCallbacks=[],J.beforeRenderPriorities={animations:400,eleCalcs:300,eleTxrDeq:200,lyrTxrDeq:150,lyrTxrSkip:100},J.registerNodeShapes(),J.registerArrowShapes(),J.registerCalculationListeners()};mJ.notify=function(Q,J){var Z=this,$=Z.cy;if(this.destroyed)return;if(Q==="init"){Z.load();return}if(Q==="destroy"){Z.destroy();return}if(Q==="add"||Q==="remove"||Q==="move"&&$.hasCompoundNodes()||Q==="load"||Q==="zorder"||Q==="mount")Z.invalidateCachedZSortedEles();if(Q==="viewport")Z.redrawHint("select",!0);if(Q==="load"||Q==="resize"||Q==="mount")Z.invalidateContainerClientCoordsCache(),Z.matchCanvasSize(Z.container);Z.redrawHint("eles",!0),Z.redrawHint("drag",!0),this.startRenderLoop(),this.redraw()};mJ.destroy=function(){var Q=this;Q.destroyed=!0,Q.cy.stopAnimationLoop();for(var J=0;J<Q.bindings.length;J++){var Z=Q.bindings[J],$=Z,G=$.target;(G.off||G.removeEventListener).apply(G,$.args)}if(Q.bindings=[],Q.beforeRenderCallbacks=[],Q.onUpdateEleCalcsFns=[],Q.removeObserver)Q.removeObserver.disconnect();if(Q.styleObserver)Q.styleObserver.disconnect();if(Q.resizeObserver)Q.resizeObserver.disconnect();if(Q.labelCalcDiv)try{document.body.removeChild(Q.labelCalcDiv)}catch(F){}};mJ.isHeadless=function(){return!1};[Y7,G4,F4,uJ,_8,H9].forEach(function(Q){V0(mJ,Q)});var g6=16.666666666666668,K4={setupDequeueing:function Q(J){return function Z(){var $=this,G=this.renderer;if($.dequeueingSetup)return;else $.dequeueingSetup=!0;var F=G6.default(function(){G.redrawHint("eles",!0),G.redrawHint("drag",!0),G.redraw()},J.deqRedrawThreshold),U=function M(q,L){var z=P8(),A=G.averageRedrawTime,V=G.lastRedrawTime,R=[],Y=G.cy.extent(),X=G.getPixelRatio();if(!q)G.flushRenderedStyleQueue();while(!0){var B=P8(),O=B-z,N=B-L;if(V<g6){var H=g6-(q?A:0);if(N>=J.deqFastCost*H)break}else if(q){if(O>=J.deqCost*V||O>=J.deqAvgCost*A)break}else if(N>=J.deqNoDrawCost*g6)break;var j=J.deq($,X,Y);if(j.length>0)for(var D=0;D<j.length;D++)R.push(j[D]);else break}if(R.length>0){if(J.onDeqd($,R),!q&&J.shouldRedraw($,R,X,Y))F()}},K=J.priority||$7;G.beforeRender(U,K($))}}},BL=function(){function Q(J){var Z=arguments.length>1&&arguments[1]!==void 0?arguments[1]:s9;t6(this,Q),this.idsByKey=new D8,this.keyForId=new D8,this.cachesByLvl=new D8,this.lvls=[],this.getKey=J,this.doesEleInvalidateKey=Z}return e6(Q,[{key:"getIdsFor",value:function J(Z){if(Z==null)h0("Can not get id list for null key");var $=this.idsByKey,G=this.idsByKey.get(Z);if(!G)G=new PJ,$.set(Z,G);return G}},{key:"addIdForKey",value:function J(Z,$){if(Z!=null)this.getIdsFor(Z).add($)}},{key:"deleteIdForKey",value:function J(Z,$){if(Z!=null)this.getIdsFor(Z).delete($)}},{key:"getNumberOfIdsForKey",value:function J(Z){if(Z==null)return 0;else return this.getIdsFor(Z).size}},{key:"updateKeyMappingFor",value:function J(Z){var $=Z.id(),G=this.keyForId.get($),F=this.getKey(Z);this.deleteIdForKey(G,$),this.addIdForKey(F,$),this.keyForId.set($,F)}},{key:"deleteKeyMappingFor",value:function J(Z){var $=Z.id(),G=this.keyForId.get($);this.deleteIdForKey(G,$),this.keyForId.delete($)}},{key:"keyHasChangedFor",value:function J(Z){var $=Z.id(),G=this.keyForId.get($),F=this.getKey(Z);return G!==F}},{key:"isInvalid",value:function J(Z){return this.keyHasChangedFor(Z)||this.doesEleInvalidateKey(Z)}},{key:"getCachesAt",value:function J(Z){var $=this.cachesByLvl,G=this.lvls,F=$.get(Z);if(!F)F=new D8,$.set(Z,F),G.push(Z);return F}},{key:"getCache",value:function J(Z,$){return this.getCachesAt($).get(Z)}},{key:"get",value:function J(Z,$){var G=this.getKey(Z),F=this.getCache(G,$);if(F!=null)this.updateKeyMappingFor(Z);return F}},{key:"getForCachedKey",value:function J(Z,$){var G=this.keyForId.get(Z.id()),F=this.getCache(G,$);return F}},{key:"hasCache",value:function J(Z,$){return this.getCachesAt($).has(Z)}},{key:"has",value:function J(Z,$){var G=this.getKey(Z);return this.hasCache(G,$)}},{key:"setCache",value:function J(Z,$,G){G.key=Z,this.getCachesAt($).set(Z,G)}},{key:"set",value:function J(Z,$,G){var F=this.getKey(Z);this.setCache(F,$,G),this.updateKeyMappingFor(Z)}},{key:"deleteCache",value:function J(Z,$){this.getCachesAt($).delete(Z)}},{key:"delete",value:function J(Z,$){var G=this.getKey(Z);this.deleteCache(G,$)}},{key:"invalidateKey",value:function J(Z){var $=this;this.lvls.forEach(function(G){return $.deleteCache(Z,G)})}},{key:"invalidate",value:function J(Z){var $=Z.id(),G=this.keyForId.get($);this.deleteKeyMappingFor(Z);var F=this.doesEleInvalidateKey(Z);if(F)this.invalidateKey(G);return F||this.getNumberOfIdsForKey(G)===0}}]),Q}(),cZ=25,g9=50,i9=-4,n6=3,OL=7.99,NL=8,HL=1024,kL=1024,EL=1024,WL=0.2,TL=0.8,jL=10,DL=0.15,CL=0.1,SL=0.9,IL=0.9,wL=100,PL=1,WJ={dequeue:"dequeue",downscale:"downscale",highQuality:"highQuality"},vL=o0({getKey:null,doesEleInvalidateKey:s9,drawElement:null,getBoundingBox:null,getRotationPoint:null,getRotationOffset:null,isVisible:q$,allowEdgeTxrCaching:!0,allowParentTxrCaching:!0}),eJ=function Q(J,Z){var $=this;$.renderer=J,$.onDequeues=[];var G=vL(Z);V0($,G),$.lookup=new BL(G.getKey,G.doesEleInvalidateKey),$.setupDequeueing()},p0=eJ.prototype;p0.reasons=WJ;p0.getTextureQueue=function(Q){var J=this;return J.eleImgCaches=J.eleImgCaches||{},J.eleImgCaches[Q]=J.eleImgCaches[Q]||[]};p0.getRetiredTextureQueue=function(Q){var J=this,Z=J.eleImgCaches.retired=J.eleImgCaches.retired||{},$=Z[Q]=Z[Q]||[];return $};p0.getElementQueue=function(){var Q=this,J=Q.eleCacheQueue=Q.eleCacheQueue||new R9.default(function(Z,$){return $.reqs-Z.reqs});return J};p0.getElementKeyToQueue=function(){var Q=this,J=Q.eleKeyToCacheQueue=Q.eleKeyToCacheQueue||{};return J};p0.getElement=function(Q,J,Z,$,G){var F=this,U=this.renderer,K=U.cy.zoom(),M=this.lookup;if(!J||J.w===0||J.h===0||isNaN(J.w)||isNaN(J.h)||!Q.visible()||Q.removed())return null;if(!F.allowEdgeTxrCaching&&Q.isEdge()||!F.allowParentTxrCaching&&Q.isParent())return null;if($==null)$=Math.ceil(F7(K*Z));if($<i9)$=i9;else if(K>=OL||$>n6)return null;var q=Math.pow(2,$),L=J.h*q,z=J.w*q,A=U.eleTextBiggerThanMin(Q,q);if(!this.isVisible(Q,A))return null;var V=M.get(Q,$);if(V&&V.invalidated)V.invalidated=!1,V.texture.invalidatedWidth-=V.width;if(V)return V;var R;if(L<=cZ)R=cZ;else if(L<=g9)R=g9;else R=Math.ceil(L/g9)*g9;if(L>EL||z>kL)return null;var Y=F.getTextureQueue(R),X=Y[Y.length-2],B=function _(){return F.recycleTexture(R,z)||F.addTexture(R,z)};if(!X)X=Y[Y.length-1];if(!X)X=B();if(X.width-X.usedWidth<z)X=B();var O=function _(b){return b&&b.scaledLabelShown===A},N=G&&G===WJ.dequeue,H=G&&G===WJ.highQuality,j=G&&G===WJ.downscale,D;for(var k=$+1;k<=n6;k++){var C=M.get(Q,k);if(C){D=C;break}}var E=D&&D.level===$+1?D:null,S=function _(){X.context.drawImage(E.texture.canvas,E.x,0,E.width,E.height,X.usedWidth,0,z,L)};if(X.context.setTransform(1,0,0,1,0,0),X.context.clearRect(X.usedWidth,0,z,R),O(E))S();else if(O(D))if(H){for(var w=D.level;w>$;w--)E=F.getElement(Q,J,Z,w,WJ.downscale);S()}else return F.queueElement(Q,D.level-1),D;else{var T;if(!N&&!H&&!j)for(var v=$-1;v>=i9;v--){var I=M.get(Q,v);if(I){T=I;break}}if(O(T))return F.queueElement(Q,$),T;X.context.translate(X.usedWidth,0),X.context.scale(q,q),this.drawElement(X.context,Q,J,A,!1),X.context.scale(1/q,1/q),X.context.translate(-X.usedWidth,0)}return V={x:X.usedWidth,texture:X,level:$,scale:q,width:z,height:L,scaledLabelShown:A},X.usedWidth+=Math.ceil(z+NL),X.eleCaches.push(V),M.set(Q,$,V),F.checkTextureFullness(X),V};p0.invalidateElements=function(Q){for(var J=0;J<Q.length;J++)this.invalidateElement(Q[J])};p0.invalidateElement=function(Q){var J=this,Z=J.lookup,$=[],G=Z.isInvalid(Q);if(!G)return;for(var F=i9;F<=n6;F++){var U=Z.getForCachedKey(Q,F);if(U)$.push(U)}var K=Z.invalidate(Q);if(K)for(var M=0;M<$.length;M++){var q=$[M],L=q.texture;L.invalidatedWidth+=q.width,q.invalidated=!0,J.checkTextureUtility(L)}J.removeFromQueue(Q)};p0.checkTextureUtility=function(Q){if(Q.invalidatedWidth>=WL*Q.width)this.retireTexture(Q)};p0.checkTextureFullness=function(Q){var J=this,Z=J.getTextureQueue(Q.height);if(Q.usedWidth/Q.width>TL&&Q.fullnessChecks>=jL)p8(Z,Q);else Q.fullnessChecks++};p0.retireTexture=function(Q){var J=this,Z=Q.height,$=J.getTextureQueue(Z),G=this.lookup;p8($,Q),Q.retired=!0;var F=Q.eleCaches;for(var U=0;U<F.length;U++){var K=F[U];G.deleteCache(K.key,K.level)}G7(F);var M=J.getRetiredTextureQueue(Z);M.push(Q)};p0.addTexture=function(Q,J){var Z=this,$=Z.getTextureQueue(Q),G={};return $.push(G),G.eleCaches=[],G.height=Q,G.width=Math.max(HL,J),G.usedWidth=0,G.invalidatedWidth=0,G.fullnessChecks=0,G.canvas=Z.renderer.makeOffscreenCanvas(G.width,G.height),G.context=G.canvas.getContext("2d"),G};p0.recycleTexture=function(Q,J){var Z=this,$=Z.getTextureQueue(Q),G=Z.getRetiredTextureQueue(Q);for(var F=0;F<G.length;F++){var U=G[F];if(U.width>=J)return U.retired=!1,U.usedWidth=0,U.invalidatedWidth=0,U.fullnessChecks=0,G7(U.eleCaches),U.context.setTransform(1,0,0,1,0,0),U.context.clearRect(0,0,U.width,U.height),p8(G,U),$.push(U),U}};p0.queueElement=function(Q,J){var Z=this,$=Z.getElementQueue(),G=Z.getElementKeyToQueue(),F=this.getKey(Q),U=G[F];if(U)U.level=Math.max(U.level,J),U.eles.merge(Q),U.reqs++,$.updateItem(U);else{var K={eles:Q.spawn().merge(Q),level:J,reqs:1,key:F};$.push(K),G[F]=K}};p0.dequeue=function(Q){var J=this,Z=J.getElementQueue(),$=J.getElementKeyToQueue(),G=[],F=J.lookup;for(var U=0;U<PL;U++)if(Z.size()>0){var K=Z.pop(),M=K.key,q=K.eles[0],L=F.hasCache(q,K.level);if($[M]=null,L)continue;G.push(K);var z=J.getBoundingBox(q);J.getElement(q,z,Q,K.level,WJ.dequeue)}else break;return G};p0.removeFromQueue=function(Q){var J=this,Z=J.getElementQueue(),$=J.getElementKeyToQueue(),G=this.getKey(Q),F=$[G];if(F!=null)if(F.eles.length===1)F.reqs=Z7,Z.updateItem(F),Z.pop(),$[G]=null;else F.eles.unmerge(Q)};p0.onDequeue=function(Q){this.onDequeues.push(Q)};p0.offDequeue=function(Q){p8(this.onDequeues,Q)};p0.setupDequeueing=K4.setupDequeueing({deqRedrawThreshold:wL,deqCost:DL,deqAvgCost:CL,deqNoDrawCost:SL,deqFastCost:IL,deq:function Q(J,Z,$){return J.dequeue(Z,$)},onDeqd:function Q(J,Z){for(var $=0;$<J.onDequeues.length;$++){var G=J.onDequeues[$];G(Z)}},shouldRedraw:function Q(J,Z,$,G){for(var F=0;F<Z.length;F++){var U=Z[F].eles;for(var K=0;K<U.length;K++){var M=U[K].boundingBox();if(U7(M,G))return!0}}return!1},priority:function Q(J){return J.renderer.beforeRenderPriorities.eleTxrDeq}});var bL=1,Q9=-4,$6=2,_L=3.99,uL=50,mL=50,fL=0.15,gL=0.1,hL=0.9,yL=0.9,xL=1,dZ=250,cL=16000000,dL=!0,q4=function Q(J){var Z=this,$=Z.renderer=J,G=$.cy;Z.layersByLevel={},Z.firstGet=!0,Z.lastInvalidationTime=P8()-2*dZ,Z.skipping=!1,Z.eleTxrDeqs=G.collection(),Z.scheduleElementRefinement=G6.default(function(){Z.refineElementTextures(Z.eleTxrDeqs),Z.eleTxrDeqs.unmerge(Z.eleTxrDeqs)},mL),$.beforeRender(function(U,K){if(K-Z.lastInvalidationTime<=dZ)Z.skipping=!0;else Z.skipping=!1},$.beforeRenderPriorities.lyrTxrSkip);var F=function U(K,M){return M.reqs-K.reqs};Z.layersQueue=new R9.default(F),Z.setupDequeueing()},t0=q4.prototype,pZ=0,pL=Math.pow(2,53)-1;t0.makeLayer=function(Q,J){var Z=Math.pow(2,J),$=Math.ceil(Q.w*Z),G=Math.ceil(Q.h*Z),F=this.renderer.makeOffscreenCanvas($,G),U={id:pZ=++pZ%pL,bb:Q,level:J,width:$,height:G,canvas:F,context:F.getContext("2d"),eles:[],elesQueue:[],reqs:0},K=U.context,M=-U.bb.x1,q=-U.bb.y1;return K.scale(Z,Z),K.translate(M,q),U};t0.getLayers=function(Q,J,Z){var $=this,G=$.renderer,F=G.cy,U=F.zoom(),K=$.firstGet;if($.firstGet=!1,Z==null){if(Z=Math.ceil(F7(U*J)),Z<Q9)Z=Q9;else if(U>=_L||Z>$6)return null}$.validateLayersElesOrdering(Z,Q);var M=$.layersByLevel,q=Math.pow(2,Z),L=M[Z]=M[Z]||[],z,A=$.levelIsComplete(Z,Q),V,R=function E(){var S=function I(_){if($.validateLayersElesOrdering(_,Q),$.levelIsComplete(_,Q))return V=M[_],!0},w=function I(_){if(V)return;for(var b=Z+_;Q9<=b&&b<=$6;b+=_)if(S(b))break};w(1),w(-1);for(var T=L.length-1;T>=0;T--){var v=L[T];if(v.invalid)p8(L,v)}};if(!A)R();else return L;var Y=function E(){if(!z){z=L8();for(var S=0;S<Q.length;S++)V$(z,Q[S].boundingBox())}return z},X=function E(S){S=S||{};var w=S.after;Y();var T=z.w*q*(z.h*q);if(T>cL)return null;var v=$.makeLayer(z,Z);if(w!=null){var I=L.indexOf(w)+1;L.splice(I,0,v)}else if(S.insert===void 0||S.insert)L.unshift(v);return v};if($.skipping&&!K)return null;var B=null,O=Q.length/bL,N=!K;for(var H=0;H<Q.length;H++){var j=Q[H],D=j._private.rscratch,k=D.imgLayerCaches=D.imgLayerCaches||{},C=k[Z];if(C){B=C;continue}if(!B||B.eles.length>=O||!Y$(B.bb,j.boundingBox())){if(B=X({insert:!0,after:B}),!B)return null}if(V||N)$.queueLayer(B,j);else $.drawEleInLayer(B,j,Z,J);B.eles.push(j),k[Z]=B}if(V)return V;if(N)return null;return L};t0.getEleLevelForLayerLevel=function(Q,J){return Q};t0.drawEleInLayer=function(Q,J,Z,$){var G=this,F=this.renderer,U=Q.context,K=J.boundingBox();if(K.w===0||K.h===0||!J.visible())return;Z=G.getEleLevelForLayerLevel(Z,$),F.setImgSmoothing(U,!1),F.drawCachedElement(U,J,null,null,Z,dL),F.setImgSmoothing(U,!0)};t0.levelIsComplete=function(Q,J){var Z=this,$=Z.layersByLevel[Q];if(!$||$.length===0)return!1;var G=0;for(var F=0;F<$.length;F++){var U=$[F];if(U.reqs>0)return!1;if(U.invalid)return!1;G+=U.eles.length}if(G!==J.length)return!1;return!0};t0.validateLayersElesOrdering=function(Q,J){var Z=this.layersByLevel[Q];if(!Z)return;for(var $=0;$<Z.length;$++){var G=Z[$],F=-1;for(var U=0;U<J.length;U++)if(G.eles[0]===J[U]){F=U;break}if(F<0){this.invalidateLayer(G);continue}var K=F;for(var U=0;U<G.eles.length;U++)if(G.eles[U]!==J[K+U]){this.invalidateLayer(G);break}}};t0.updateElementsInLayers=function(Q,J){var Z=this,$=Y9(Q[0]);for(var G=0;G<Q.length;G++){var F=$?null:Q[G],U=$?Q[G]:Q[G].ele,K=U._private.rscratch,M=K.imgLayerCaches=K.imgLayerCaches||{};for(var q=Q9;q<=$6;q++){var L=M[q];if(!L)continue;if(F&&Z.getEleLevelForLayerLevel(L.level)!==F.level)continue;J(L,U,F)}}};t0.haveLayers=function(){var Q=this,J=!1;for(var Z=Q9;Z<=$6;Z++){var $=Q.layersByLevel[Z];if($&&$.length>0){J=!0;break}}return J};t0.invalidateElements=function(Q){var J=this;if(Q.length===0)return;if(J.lastInvalidationTime=P8(),Q.length===0||!J.haveLayers())return;J.updateElementsInLayers(Q,function Z($,G,F){J.invalidateLayer($)})};t0.invalidateLayer=function(Q){if(this.lastInvalidationTime=P8(),Q.invalid)return;var{level:J,eles:Z}=Q,$=this.layersByLevel[J];if(p8($,Q),Q.elesQueue=[],Q.invalid=!0,Q.replacement)Q.replacement.invalid=!0;for(var G=0;G<Z.length;G++){var F=Z[G]._private.rscratch.imgLayerCaches;if(F)F[J]=null}};t0.refineElementTextures=function(Q){var J=this;J.updateElementsInLayers(Q,function Z($,G,F){var U=$.replacement;if(!U)U=$.replacement=J.makeLayer($.bb,$.level),U.replaces=$,U.eles=$.eles;if(!U.reqs)for(var K=0;K<U.eles.length;K++)J.queueLayer(U,U.eles[K])})};t0.enqueueElementRefinement=function(Q){this.eleTxrDeqs.merge(Q),this.scheduleElementRefinement()};t0.queueLayer=function(Q,J){var Z=this,$=Z.layersQueue,G=Q.elesQueue,F=G.hasId=G.hasId||{};if(Q.replacement)return;if(J){if(F[J.id()])return;G.push(J),F[J.id()]=!0}if(Q.reqs)Q.reqs++,$.updateItem(Q);else Q.reqs=1,$.push(Q)};t0.dequeue=function(Q){var J=this,Z=J.layersQueue,$=[],G=0;while(G<xL){if(Z.size()===0)break;var F=Z.peek();if(F.replacement){Z.pop();continue}if(F.replaces&&F!==F.replaces.replacement){Z.pop();continue}if(F.invalid){Z.pop();continue}var U=F.elesQueue.shift();if(U)J.drawEleInLayer(F,U,F.level,Q),G++;if($.length===0)$.push(!0);if(F.elesQueue.length===0){if(Z.pop(),F.reqs=0,F.replaces)J.applyLayerReplacement(F);J.requestRedraw()}}return $};t0.applyLayerReplacement=function(Q){var J=this,Z=J.layersByLevel[Q.level],$=Q.replaces,G=Z.indexOf($);if(G<0||$.invalid)return;Z[G]=Q;for(var F=0;F<Q.eles.length;F++){var U=Q.eles[F]._private,K=U.imgLayerCaches=U.imgLayerCaches||{};if(K)K[Q.level]=Q}J.requestRedraw()};t0.requestRedraw=G6.default(function(){var Q=this.renderer;Q.redrawHint("eles",!0),Q.redrawHint("drag",!0),Q.redraw()},100);t0.setupDequeueing=K4.setupDequeueing({deqRedrawThreshold:uL,deqCost:fL,deqAvgCost:gL,deqNoDrawCost:hL,deqFastCost:yL,deq:function Q(J,Z){return J.dequeue(Z)},onDeqd:$7,shouldRedraw:q$,priority:function Q(J){return J.renderer.beforeRenderPriorities.lyrTxrDeq}});var M4={},lZ;M4.arrowShapeImpl=function(Q){return(lZ||(lZ={polygon:lL,"triangle-backcurve":iL,"triangle-tee":iZ,"circle-triangle":aL,"triangle-cross":iZ,circle:nL}))[Q]};var I8={};I8.drawElement=function(Q,J,Z,$,G,F){var U=this;if(J.isNode())U.drawNode(Q,J,Z,$,G,F);else U.drawEdge(Q,J,Z,$,G,F)};I8.drawElementOverlay=function(Q,J){var Z=this;if(J.isNode())Z.drawNodeOverlay(Q,J);else Z.drawEdgeOverlay(Q,J)};I8.drawElementUnderlay=function(Q,J){var Z=this;if(J.isNode())Z.drawNodeUnderlay(Q,J);else Z.drawEdgeUnderlay(Q,J)};I8.drawCachedElementPortion=function(Q,J,Z,$,G,F,U,K){var M=this,q=Z.getBoundingBox(J);if(q.w===0||q.h===0)return;var L=Z.getElement(J,q,$,G,F);if(L!=null){var z=K(M,J);if(z===0)return;var A=U(M,J),V=q.x1,R=q.y1,Y=q.w,X=q.h,B,O,N,H,j;if(A!==0){var D=Z.getRotationPoint(J);if(N=D.x,H=D.y,Q.translate(N,H),Q.rotate(A),j=M.getImgSmoothing(Q),!j)M.setImgSmoothing(Q,!0);var k=Z.getRotationOffset(J);B=k.x,O=k.y}else B=V,O=R;var C;if(z!==1)C=Q.globalAlpha,Q.globalAlpha=C*z;if(Q.drawImage(L.texture.canvas,L.x,0,L.width,L.height,B,O,Y,X),z!==1)Q.globalAlpha=C;if(A!==0){if(Q.rotate(-A),Q.translate(-N,-H),!j)M.setImgSmoothing(Q,!1)}}else Z.drawElement(Q,J)};var sL=function Q(){return 0},rL=function Q(J,Z){return J.getTextAngle(Z,null)},oL=function Q(J,Z){return J.getTextAngle(Z,"source")},tL=function Q(J,Z){return J.getTextAngle(Z,"target")},eL=function Q(J,Z){return Z.effectiveOpacity()},h6=function Q(J,Z){return Z.pstyle("text-opacity").pfValue*Z.effectiveOpacity()};I8.drawCachedElement=function(Q,J,Z,$,G,F){var U=this,K=U.data,M=K.eleTxrCache,q=K.lblTxrCache,L=K.slbTxrCache,z=K.tlbTxrCache,A=J.boundingBox(),V=F===!0?M.reasons.highQuality:null;if(A.w===0||A.h===0||!J.visible())return;if(!$||U7(A,$)){var R=J.isEdge(),Y=J.element()._private.rscratch.badLine;if(U.drawElementUnderlay(Q,J),U.drawCachedElementPortion(Q,J,M,Z,G,V,sL,eL),!R||!Y)U.drawCachedElementPortion(Q,J,q,Z,G,V,rL,h6);if(R&&!Y)U.drawCachedElementPortion(Q,J,L,Z,G,V,oL,h6),U.drawCachedElementPortion(Q,J,z,Z,G,V,tL,h6);U.drawElementOverlay(Q,J)}};I8.drawElements=function(Q,J){var Z=this;for(var $=0;$<J.length;$++){var G=J[$];Z.drawElement(Q,G)}};I8.drawCachedElements=function(Q,J,Z,$){var G=this;for(var F=0;F<J.length;F++){var U=J[F];G.drawCachedElement(Q,U,Z,$)}};I8.drawCachedNodes=function(Q,J,Z,$){var G=this;for(var F=0;F<J.length;F++){var U=J[F];if(!U.isNode())continue;G.drawCachedElement(Q,U,Z,$)}};I8.drawLayeredElements=function(Q,J,Z,$){var G=this,F=G.data.lyrTxrCache.getLayers(J,Z);if(F)for(var U=0;U<F.length;U++){var K=F[U],M=K.bb;if(M.w===0||M.h===0)continue;Q.drawImage(K.canvas,M.x1,M.y1,M.w,M.h)}else G.drawCachedElements(Q,J,Z,$)};var u8={};u8.drawEdge=function(Q,J,Z){var $=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0,G=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!0,F=arguments.length>5&&arguments[5]!==void 0?arguments[5]:!0,U=this,K=J._private.rscratch;if(F&&!J.visible())return;if(K.badLine||K.allpts==null||isNaN(K.allpts[0]))return;var M;if(Z)M=Z,Q.translate(-M.x1,-M.y1);var q=F?J.pstyle("opacity").value:1,L=F?J.pstyle("line-opacity").value:1,z=J.pstyle("curve-style").value,A=J.pstyle("line-style").value,V=J.pstyle("width").pfValue,R=J.pstyle("line-cap").value,Y=q*L,X=q*L,B=function w(){var T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:Y;if(z==="straight-triangle")U.eleStrokeStyle(Q,J,T),U.drawEdgeTrianglePath(J,Q,K.allpts);else Q.lineWidth=V,Q.lineCap=R,U.eleStrokeStyle(Q,J,T),U.drawEdgePath(J,Q,K.allpts,A),Q.lineCap="butt"},O=function w(){if(!G)return;U.drawEdgeOverlay(Q,J)},N=function w(){if(!G)return;U.drawEdgeUnderlay(Q,J)},H=function w(){var T=arguments.length>0&&arguments[0]!==void 0?arguments[0]:X;U.drawArrowheads(Q,J,T)},j=function w(){U.drawElementText(Q,J,null,$)};Q.lineJoin="round";var D=J.pstyle("ghost").value==="yes";if(D){var k=J.pstyle("ghost-offset-x").pfValue,C=J.pstyle("ghost-offset-y").pfValue,E=J.pstyle("ghost-opacity").value,S=Y*E;Q.translate(k,C),B(S),H(S),Q.translate(-k,-C)}if(N(),B(),H(),O(),j(),Z)Q.translate(M.x1,M.y1)};var L4=function Q(J){if(!["overlay","underlay"].includes(J))throw new Error("Invalid state");return function(Z,$){if(!$.visible())return;var G=$.pstyle("".concat(J,"-opacity")).value;if(G===0)return;var F=this,U=F.usePaths(),K=$._private.rscratch,M=$.pstyle("".concat(J,"-padding")).pfValue,q=2*M,L=$.pstyle("".concat(J,"-color")).value;if(Z.lineWidth=q,K.edgeType==="self"&&!U)Z.lineCap="butt";else Z.lineCap="round";F.colorStrokeStyle(Z,L[0],L[1],L[2],G),F.drawEdgePath($,Z,K.allpts,"solid")}};u8.drawEdgeOverlay=L4("overlay");u8.drawEdgeUnderlay=L4("underlay");u8.drawEdgePath=function(Q,J,Z,$){var G=Q._private.rscratch,F=J,U,K=!1,M=this.usePaths(),q=Q.pstyle("line-dash-pattern").pfValue,L=Q.pstyle("line-dash-offset").pfValue;if(M){var z=Z.join("$"),A=G.pathCacheKey&&G.pathCacheKey===z;if(A)U=J=G.pathCache,K=!0;else U=J=new Path2D,G.pathCacheKey=z,G.pathCache=U}if(F.setLineDash)switch($){case"dotted":F.setLineDash([1,1]);break;case"dashed":F.setLineDash(q),F.lineDashOffset=L;break;case"solid":F.setLineDash([]);break}if(!K&&!G.badLine){if(J.beginPath)J.beginPath();switch(J.moveTo(Z[0],Z[1]),G.edgeType){case"bezier":case"self":case"compound":case"multibezier":for(var V=2;V+3<Z.length;V+=4)J.quadraticCurveTo(Z[V],Z[V+1],Z[V+2],Z[V+3]);break;case"straight":case"segments":case"haystack":for(var R=2;R+1<Z.length;R+=2)J.lineTo(Z[R],Z[R+1]);break}}if(J=F,M)J.stroke(U);else J.stroke();if(J.setLineDash)J.setLineDash([])};u8.drawEdgeTrianglePath=function(Q,J,Z){J.fillStyle=J.strokeStyle;var $=Q.pstyle("width").pfValue;for(var G=0;G+1<Z.length;G+=2){var F=[Z[G+2]-Z[G],Z[G+3]-Z[G+1]],U=Math.sqrt(F[0]*F[0]+F[1]*F[1]),K=[F[1]/U,-F[0]/U],M=[K[0]*$/2,K[1]*$/2];J.beginPath(),J.moveTo(Z[G]-M[0],Z[G+1]-M[1]),J.lineTo(Z[G]+M[0],Z[G+1]+M[1]),J.lineTo(Z[G+2],Z[G+3]),J.closePath(),J.fill()}};u8.drawArrowheads=function(Q,J,Z){var $=J._private.rscratch,G=$.edgeType==="haystack";if(!G)this.drawArrowhead(Q,J,"source",$.arrowStartX,$.arrowStartY,$.srcArrowAngle,Z);if(this.drawArrowhead(Q,J,"mid-target",$.midX,$.midY,$.midtgtArrowAngle,Z),this.drawArrowhead(Q,J,"mid-source",$.midX,$.midY,$.midsrcArrowAngle,Z),!G)this.drawArrowhead(Q,J,"target",$.arrowEndX,$.arrowEndY,$.tgtArrowAngle,Z)};u8.drawArrowhead=function(Q,J,Z,$,G,F,U){if(isNaN($)||$==null||isNaN(G)||G==null||isNaN(F)||F==null)return;var K=this,M=J.pstyle(Z+"-arrow-shape").value;if(M==="none")return;var q=J.pstyle(Z+"-arrow-fill").value==="hollow"?"both":"filled",L=J.pstyle(Z+"-arrow-fill").value,z=J.pstyle("width").pfValue,A=J.pstyle(Z+"-arrow-width"),V=A.value==="match-line"?z:A.pfValue;if(A.units==="%")V*=z;var R=J.pstyle("opacity").value;if(U===void 0)U=R;var Y=Q.globalCompositeOperation;if(U!==1||L==="hollow")Q.globalCompositeOperation="destination-out",K.colorFillStyle(Q,255,255,255,1),K.colorStrokeStyle(Q,255,255,255,1),K.drawArrowShape(J,Q,q,z,M,V,$,G,F),Q.globalCompositeOperation=Y;var X=J.pstyle(Z+"-arrow-color").value;K.colorFillStyle(Q,X[0],X[1],X[2],U),K.colorStrokeStyle(Q,X[0],X[1],X[2],U),K.drawArrowShape(J,Q,L,z,M,V,$,G,F)};u8.drawArrowShape=function(Q,J,Z,$,G,F,U,K,M){var q=this,L=this.usePaths()&&G!=="triangle-cross",z=!1,A,V=J,R={x:U,y:K},Y=Q.pstyle("arrow-scale").value,X=this.getArrowWidth($,Y),B=q.arrowShapes[G];if(L){var O=q.arrowPathCache=q.arrowPathCache||[],N=ZJ(G),H=O[N];if(H!=null)A=J=H,z=!0;else A=J=new Path2D,O[N]=A}if(!z){if(J.beginPath)J.beginPath();if(L)B.draw(J,1,0,{x:0,y:0},1);else B.draw(J,X,M,R,$);if(J.closePath)J.closePath()}if(J=V,L)J.translate(U,K),J.rotate(M),J.scale(X,X);if(Z==="filled"||Z==="both")if(L)J.fill(A);else J.fill();if(Z==="hollow"||Z==="both")if(J.lineWidth=F/(L?X:1),J.lineJoin="miter",L)J.stroke(A);else J.stroke();if(L)J.scale(1/X,1/X),J.rotate(-M),J.translate(-U,-K)};var B7={};B7.safeDrawImage=function(Q,J,Z,$,G,F,U,K,M,q){if(G<=0||F<=0||M<=0||q<=0)return;try{Q.drawImage(J,Z,$,G,F,U,K,M,q)}catch(L){P0(L)}};B7.drawInscribedImage=function(Q,J,Z,$,G){var F=this,U=Z.position(),K=U.x,M=U.y,q=Z.cy().style(),L=q.getIndexedStyle.bind(q),z=L(Z,"background-fit","value",$),A=L(Z,"background-repeat","value",$),V=Z.width(),R=Z.height(),Y=Z.padding()*2,X=V+(L(Z,"background-width-relative-to","value",$)==="inner"?0:Y),B=R+(L(Z,"background-height-relative-to","value",$)==="inner"?0:Y),O=Z._private.rscratch,N=L(Z,"background-clip","value",$),H=N==="node",j=L(Z,"background-image-opacity","value",$)*G,D=L(Z,"background-image-smoothing","value",$),k=J.width||J.cachedW,C=J.height||J.cachedH;if(k==null||C==null)document.body.appendChild(J),k=J.cachedW=J.width||J.offsetWidth,C=J.cachedH=J.height||J.offsetHeight,document.body.removeChild(J);var E=k,S=C;if(L(Z,"background-width","value",$)!=="auto")if(L(Z,"background-width","units",$)==="%")E=L(Z,"background-width","pfValue",$)*X;else E=L(Z,"background-width","pfValue",$);if(L(Z,"background-height","value",$)!=="auto")if(L(Z,"background-height","units",$)==="%")S=L(Z,"background-height","pfValue",$)*B;else S=L(Z,"background-height","pfValue",$);if(E===0||S===0)return;if(z==="contain"){var w=Math.min(X/E,B/S);E*=w,S*=w}else if(z==="cover"){var w=Math.max(X/E,B/S);E*=w,S*=w}var T=K-X/2,v=L(Z,"background-position-x","units",$),I=L(Z,"background-position-x","pfValue",$);if(v==="%")T+=(X-E)*I;else T+=I;var _=L(Z,"background-offset-x","units",$),b=L(Z,"background-offset-x","pfValue",$);if(_==="%")T+=(X-E)*b;else T+=b;var P=M-B/2,u=L(Z,"background-position-y","units",$),h=L(Z,"background-position-y","pfValue",$);if(u==="%")P+=(B-S)*h;else P+=h;var p=L(Z,"background-offset-y","units",$),m=L(Z,"background-offset-y","pfValue",$);if(p==="%")P+=(B-S)*m;else P+=m;if(O.pathCache)T-=K,P-=M,K=0,M=0;var c=Q.globalAlpha;Q.globalAlpha=j;var i=F.getImgSmoothing(Q),r=!1;if(D==="no"&&i)F.setImgSmoothing(Q,!1),r=!0;else if(D==="yes"&&!i)F.setImgSmoothing(Q,!0),r=!0;if(A==="no-repeat"){if(H)if(Q.save(),O.pathCache)Q.clip(O.pathCache);else F.nodeShapes[F.getNodeShape(Z)].draw(Q,K,M,X,B),Q.clip();if(F.safeDrawImage(Q,J,0,0,k,C,T,P,E,S),H)Q.restore()}else{var a=Q.createPattern(J,A);Q.fillStyle=a,F.nodeShapes[F.getNodeShape(Z)].draw(Q,K,M,X,B),Q.translate(T,P),Q.fill(),Q.translate(-T,-P)}if(Q.globalAlpha=c,r)F.setImgSmoothing(Q,i)};var MJ={};MJ.eleTextBiggerThanMin=function(Q,J){if(!J){var Z=Q.cy().zoom(),$=this.getPixelRatio(),G=Math.ceil(F7(Z*$));J=Math.pow(2,G)}var F=Q.pstyle("font-size").pfValue*J,U=Q.pstyle("min-zoomed-font-size").pfValue;if(F<U)return!1;return!0};MJ.drawElementText=function(Q,J,Z,$,G){var F=arguments.length>5&&arguments[5]!==void 0?arguments[5]:!0,U=this;if($==null){if(F&&!U.eleTextBiggerThanMin(J))return}else if($===!1)return;if(J.isNode()){var K=J.pstyle("label");if(!K||!K.value)return;var M=U.getLabelJustification(J);Q.textAlign=M,Q.textBaseline="bottom"}else{var q=J.element()._private.rscratch.badLine,L=J.pstyle("label"),z=J.pstyle("source-label"),A=J.pstyle("target-label");if(q||(!L||!L.value)&&(!z||!z.value)&&(!A||!A.value))return;Q.textAlign="center",Q.textBaseline="bottom"}var V=!Z,R;if(Z)R=Z,Q.translate(-R.x1,-R.y1);if(G==null){if(U.drawText(Q,J,null,V,F),J.isEdge())U.drawText(Q,J,"source",V,F),U.drawText(Q,J,"target",V,F)}else U.drawText(Q,J,G,V,F);if(Z)Q.translate(R.x1,R.y1)};MJ.getFontCache=function(Q){var J;this.fontCaches=this.fontCaches||[];for(var Z=0;Z<this.fontCaches.length;Z++)if(J=this.fontCaches[Z],J.context===Q)return J;return J={context:Q},this.fontCaches.push(J),J};MJ.setupTextStyle=function(Q,J){var Z=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0,$=J.pstyle("font-style").strValue,G=J.pstyle("font-size").pfValue+"px",F=J.pstyle("font-family").strValue,U=J.pstyle("font-weight").strValue,K=Z?J.effectiveOpacity()*J.pstyle("text-opacity").value:1,M=J.pstyle("text-outline-opacity").value*K,q=J.pstyle("color").value,L=J.pstyle("text-outline-color").value;Q.font=$+" "+U+" "+G+" "+F,Q.lineJoin="round",this.colorFillStyle(Q,q[0],q[1],q[2],K),this.colorStrokeStyle(Q,L[0],L[1],L[2],M)};MJ.getTextAngle=function(Q,J){var Z,$=Q._private,G=$.rscratch,F=J?J+"-":"",U=Q.pstyle(F+"text-rotation"),K=E8(G,"labelAngle",J);if(U.strValue==="autorotate")Z=Q.isEdge()?K:0;else if(U.strValue==="none")Z=0;else Z=U.pfValue;return Z};MJ.drawText=function(Q,J,Z){var $=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0,G=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!0,F=J._private,U=F.rscratch,K=G?J.effectiveOpacity():1;if(G&&(K===0||J.pstyle("text-opacity").value===0))return;if(Z==="main")Z=null;var M=E8(U,"labelX",Z),q=E8(U,"labelY",Z),L,z,A=this.getLabelText(J,Z);if(A!=null&&A!==""&&!isNaN(M)&&!isNaN(q)){this.setupTextStyle(Q,J,G);var V=Z?Z+"-":"",R=E8(U,"labelWidth",Z),Y=E8(U,"labelHeight",Z),X=J.pstyle(V+"text-margin-x").pfValue,B=J.pstyle(V+"text-margin-y").pfValue,O=J.isEdge(),N=J.pstyle("text-halign").value,H=J.pstyle("text-valign").value;if(O)N="center",H="center";M+=X,q+=B;var j;if(!$)j=0;else j=this.getTextAngle(J,Z);if(j!==0)L=M,z=q,Q.translate(L,z),Q.rotate(j),M=0,q=0;switch(H){case"top":break;case"center":q+=Y/2;break;case"bottom":q+=Y;break}var D=J.pstyle("text-background-opacity").value,k=J.pstyle("text-border-opacity").value,C=J.pstyle("text-border-width").pfValue,E=J.pstyle("text-background-padding").pfValue;if(D>0||C>0&&k>0){var S=M-E;switch(N){case"left":S-=R;break;case"center":S-=R/2;break}var w=q-Y-E,T=R+2*E,v=Y+2*E;if(D>0){var I=Q.fillStyle,_=J.pstyle("text-background-color").value;Q.fillStyle="rgba("+_[0]+","+_[1]+","+_[2]+","+D*K+")";var b=J.pstyle("text-background-shape").strValue;if(b.indexOf("round")===0)Jz(Q,S,w,T,v,2);else Q.fillRect(S,w,T,v);Q.fillStyle=I}if(C>0&&k>0){var{strokeStyle:P,lineWidth:u}=Q,h=J.pstyle("text-border-color").value,p=J.pstyle("text-border-style").value;if(Q.strokeStyle="rgba("+h[0]+","+h[1]+","+h[2]+","+k*K+")",Q.lineWidth=C,Q.setLineDash)switch(p){case"dotted":Q.setLineDash([1,1]);break;case"dashed":Q.setLineDash([4,2]);break;case"double":Q.lineWidth=C/4,Q.setLineDash([]);break;case"solid":Q.setLineDash([]);break}if(Q.strokeRect(S,w,T,v),p==="double"){var m=C/2;Q.strokeRect(S+m,w+m,T-m*2,v-m*2)}if(Q.setLineDash)Q.setLineDash([]);Q.lineWidth=u,Q.strokeStyle=P}}var c=2*J.pstyle("text-outline-width").pfValue;if(c>0)Q.lineWidth=c;if(J.pstyle("text-wrap").value==="wrap"){var i=E8(U,"labelWrapCachedLines",Z),r=E8(U,"labelLineHeight",Z),a=R/2,n=this.getLabelJustification(J);if(n==="auto");else if(N==="left"){if(n==="left")M+=-R;else if(n==="center")M+=-a}else if(N==="center"){if(n==="left")M+=-a;else if(n==="right")M+=a}else if(N==="right"){if(n==="center")M+=a;else if(n==="right")M+=R}switch(H){case"top":q-=(i.length-1)*r;break;case"center":case"bottom":q-=(i.length-1)*r;break}for(var f=0;f<i.length;f++){if(c>0)Q.strokeText(i[f],M,q);Q.fillText(i[f],M,q),q+=r}}else{if(c>0)Q.strokeText(A,M,q);Q.fillText(A,M,q)}if(j!==0)Q.rotate(-j),Q.translate(-L,-z)}};var fJ={};fJ.drawNode=function(Q,J,Z){var $=arguments.length>3&&arguments[3]!==void 0?arguments[3]:!0,G=arguments.length>4&&arguments[4]!==void 0?arguments[4]:!0,F=arguments.length>5&&arguments[5]!==void 0?arguments[5]:!0,U=this,K,M,q=J._private,L=q.rscratch,z=J.position();if(!$0(z.x)||!$0(z.y))return;if(F&&!J.visible())return;var A=F?J.effectiveOpacity():1,V=U.usePaths(),R,Y=!1,X=J.padding();K=J.width()+2*X,M=J.height()+2*X;var B;if(Z)B=Z,Q.translate(-B.x1,-B.y1);var O=J.pstyle("background-image"),N=O.value,H=new Array(N.length),j=new Array(N.length),D=0;for(var k=0;k<N.length;k++){var C=N[k],E=H[k]=C!=null&&C!=="none";if(E){var S=J.cy().style().getIndexedStyle(J,"background-image-crossorigin","value",k);D++,j[k]=U.getCachedImage(C,S,function(){q.backgroundTimestamp=Date.now(),J.emitAndNotify("background")})}}var w=J.pstyle("background-blacken").value,T=J.pstyle("border-width").pfValue,v=J.pstyle("background-opacity").value*A,I=J.pstyle("border-color").value,_=J.pstyle("border-style").value,b=J.pstyle("border-opacity").value*A,P=J.pstyle("outline-width").pfValue,u=J.pstyle("outline-color").value,h=J.pstyle("outline-style").value,p=J.pstyle("outline-opacity").value*A,m=J.pstyle("outline-offset").value;Q.lineJoin="miter";var c=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:v;U.eleFillStyle(Q,J,y)},i=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:b;U.colorStrokeStyle(Q,I[0],I[1],I[2],y)},r=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:p;U.colorStrokeStyle(Q,u[0],u[1],u[2],y)},a=function E0(y,W,g,s){var x=U.nodePathCache=U.nodePathCache||[],d=K$(g==="polygon"?g+","+s.join(","):g,""+W,""+y),A0=x[d],l,q0=!1;if(A0!=null)l=A0,q0=!0,L.pathCache=l;else l=new Path2D,x[d]=L.pathCache=l;return{path:l,cacheHit:q0}},n=J.pstyle("shape").strValue,f=J.pstyle("shape-polygon-points").pfValue;if(V){Q.translate(z.x,z.y);var o=a(K,M,n,f);R=o.path,Y=o.cacheHit}var e=function E0(){if(!Y){var y=z;if(V)y={x:0,y:0};U.nodeShapes[U.getNodeShape(J)].draw(R||Q,y.x,y.y,K,M)}if(V)Q.fill(R);else Q.fill()},t=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:A,W=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,g=q.backgrounding,s=0;for(var x=0;x<j.length;x++){var d=J.cy().style().getIndexedStyle(J,"background-image-containment","value",x);if(W&&d==="over"||!W&&d==="inside"){s++;continue}if(H[x]&&j[x].complete&&!j[x].error)s++,U.drawInscribedImage(Q,j[x],J,x,y)}if(q.backgrounding=s!==D,g!==q.backgrounding)J.updateStyle(!1)},J0=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:!1,W=arguments.length>1&&arguments[1]!==void 0?arguments[1]:A;if(U.hasPie(J)){if(U.drawPie(Q,J,W),y){if(!V)U.nodeShapes[U.getNodeShape(J)].draw(Q,z.x,z.y,K,M)}}},K0=function E0(){var y=arguments.length>0&&arguments[0]!==void 0?arguments[0]:A,W=(w>0?w:-w)*y,g=w>0?0:255;if(w!==0)if(U.colorFillStyle(Q,g,g,g,W),V)Q.fill(R);else Q.fill()},Y0=function E0(){if(T>0){if(Q.lineWidth=T,Q.lineCap="butt",Q.setLineDash)switch(_){case"dotted":Q.setLineDash([1,1]);break;case"dashed":Q.setLineDash([4,2]);break;case"solid":case"double":Q.setLineDash([]);break}if(V)Q.stroke(R);else Q.stroke();if(_==="double"){Q.lineWidth=T/3;var y=Q.globalCompositeOperation;if(Q.globalCompositeOperation="destination-out",V)Q.stroke(R);else Q.stroke();Q.globalCompositeOperation=y}if(Q.setLineDash)Q.setLineDash([])}},Q0=function E0(){if(P>0){if(Q.lineWidth=P,Q.lineCap="butt",Q.setLineDash)switch(h){case"dotted":Q.setLineDash([1,1]);break;case"dashed":Q.setLineDash([4,2]);break;case"solid":case"double":Q.setLineDash([]);break}var y=z;if(V)y={x:0,y:0};var W=U.getNodeShape(J),g=(K+T+(P+m))/K,s=(M+T+(P+m))/M,x=K*g,d=M*s,A0=U.nodeShapes[W].points,l;if(V){var q0=a(x,d,W,A0);l=q0.path}if(W==="ellipse")U.drawEllipsePath(l||Q,y.x,y.y,x,d);else if(["round-diamond","round-heptagon","round-hexagon","round-octagon","round-pentagon","round-polygon","round-triangle","round-tag"].includes(W)){var N0=0,C0=0,B0=0;if(W==="round-diamond")N0=(T+m+P)*1.4;else if(W==="round-heptagon")N0=(T+m+P)*1.075,B0=-(T/2+m+P)/35;else if(W==="round-hexagon")N0=(T+m+P)*1.12;else if(W==="round-pentagon")N0=(T+m+P)*1.13,B0=-(T/2+m+P)/15;else if(W==="round-tag")N0=(T+m+P)*1.12,C0=(T/2+P+m)*0.07;else if(W==="round-triangle")N0=(T+m+P)*(Math.PI/2),B0=-(T+m/2+P)/Math.PI;if(N0!==0)g=(K+N0)/K,s=(M+N0)/M;U.drawRoundPolygonPath(l||Q,y.x+C0,y.y+B0,K*g,M*s,A0)}else if(["roundrectangle","round-rectangle"].includes(W))U.drawRoundRectanglePath(l||Q,y.x,y.y,x,d);else if(["cutrectangle","cut-rectangle"].includes(W))U.drawCutRectanglePath(l||Q,y.x,y.y,x,d);else if(["bottomroundrectangle","bottom-round-rectangle"].includes(W))U.drawBottomRoundRectanglePath(l||Q,y.x,y.y,x,d);else if(W==="barrel")U.drawBarrelPath(l||Q,y.x,y.y,x,d);else if(W.startsWith("polygon")||["rhomboid","right-rhomboid","round-tag","tag","vee"].includes(W)){var T0=(T+P+m)/K;A0=r9(o9(A0,T0)),U.drawPolygonPath(l||Q,y.x,y.y,K,M,A0)}else{var O0=(T+P+m)/K;A0=r9(o9(A0,-O0)),U.drawPolygonPath(l||Q,y.x,y.y,K,M,A0)}if(V)Q.stroke(l);else Q.stroke();if(h==="double"){Q.lineWidth=T/3;var H0=Q.globalCompositeOperation;if(Q.globalCompositeOperation="destination-out",V)Q.stroke(l);else Q.stroke();Q.globalCompositeOperation=H0}if(Q.setLineDash)Q.setLineDash([])}},Z0=function E0(){if(G)U.drawNodeOverlay(Q,J,z,K,M)},L0=function E0(){if(G)U.drawNodeUnderlay(Q,J,z,K,M)},M0=function E0(){U.drawElementText(Q,J,null,$)},U0=J.pstyle("ghost").value==="yes";if(U0){var z0=J.pstyle("ghost-offset-x").pfValue,W0=J.pstyle("ghost-offset-y").pfValue,k0=J.pstyle("ghost-opacity").value,X0=k0*A;Q.translate(z0,W0),r(),Q0(),c(k0*v),e(),t(X0,!0),i(k0*b),Y0(),J0(w!==0||T!==0),t(X0,!1),K0(X0),Q.translate(-z0,-W0)}if(V)Q.translate(-z.x,-z.y);if(L0(),V)Q.translate(z.x,z.y);if(r(),Q0(),c(),e(),t(A,!0),i(),Y0(),J0(w!==0||T!==0),t(A,!1),K0(),V)Q.translate(-z.x,-z.y);if(M0(),Z0(),Z)Q.translate(B.x1,B.y1)};var z4=function Q(J){if(!["overlay","underlay"].includes(J))throw new Error("Invalid state");return function(Z,$,G,F,U){var K=this;if(!$.visible())return;var M=$.pstyle("".concat(J,"-padding")).pfValue,q=$.pstyle("".concat(J,"-opacity")).value,L=$.pstyle("".concat(J,"-color")).value,z=$.pstyle("".concat(J,"-shape")).value;if(q>0){if(G=G||$.position(),F==null||U==null){var A=$.padding();F=$.width()+2*A,U=$.height()+2*A}K.colorFillStyle(Z,L[0],L[1],L[2],q),K.nodeShapes[z].draw(Z,G.x,G.y,F+M*2,U+M*2),Z.fill()}}};fJ.drawNodeOverlay=z4("overlay");fJ.drawNodeUnderlay=z4("underlay");fJ.hasPie=function(Q){return Q=Q[0],Q._private.hasPie};fJ.drawPie=function(Q,J,Z,$){J=J[0],$=$||J.position();var G=J.cy().style(),F=J.pstyle("pie-size"),U=$.x,K=$.y,M=J.width(),q=J.height(),L=Math.min(M,q)/2,z=0,A=this.usePaths();if(A)U=0,K=0;if(F.units==="%")L=L*F.pfValue;else if(F.pfValue!==void 0)L=F.pfValue/2;for(var V=1;V<=G.pieBackgroundN;V++){var R=J.pstyle("pie-"+V+"-background-size").value,Y=J.pstyle("pie-"+V+"-background-color").value,X=J.pstyle("pie-"+V+"-background-opacity").value*Z,B=R/100;if(B+z>1)B=1-z;var O=1.5*Math.PI+2*Math.PI*z,N=2*Math.PI*B,H=O+N;if(R===0||z>=1||z+B>1)continue;Q.beginPath(),Q.moveTo(U,K),Q.arc(U,K,L,O,H),Q.closePath(),this.colorFillStyle(Q,Y[0],Y[1],Y[2],X),Q.fill(),z+=B}};var A8={},Qz=100;A8.getPixelRatio=function(){var Q=this.data.contexts[0];if(this.forcedPixelRatio!=null)return this.forcedPixelRatio;var J=Q.backingStorePixelRatio||Q.webkitBackingStorePixelRatio||Q.mozBackingStorePixelRatio||Q.msBackingStorePixelRatio||Q.oBackingStorePixelRatio||Q.backingStorePixelRatio||1;return(window.devicePixelRatio||1)/J};A8.paintCache=function(Q){var J=this.paintCaches=this.paintCaches||[],Z=!0,$;for(var G=0;G<J.length;G++)if($=J[G],$.context===Q){Z=!1;break}if(Z)$={context:Q},J.push($);return $};A8.createGradientStyleFor=function(Q,J,Z,$,G){var F,U=this.usePaths(),K=Z.pstyle(J+"-gradient-stop-colors").value,M=Z.pstyle(J+"-gradient-stop-positions").pfValue;if($==="radial-gradient")if(Z.isEdge()){var q=Z.sourceEndpoint(),L=Z.targetEndpoint(),z=Z.midpoint(),A=$J(q,z),V=$J(L,z);F=Q.createRadialGradient(z.x,z.y,0,z.x,z.y,Math.max(A,V))}else{var R=U?{x:0,y:0}:Z.position(),Y=Z.paddedWidth(),X=Z.paddedHeight();F=Q.createRadialGradient(R.x,R.y,0,R.x,R.y,Math.max(Y,X))}else if(Z.isEdge()){var B=Z.sourceEndpoint(),O=Z.targetEndpoint();F=Q.createLinearGradient(B.x,B.y,O.x,O.y)}else{var N=U?{x:0,y:0}:Z.position(),H=Z.paddedWidth(),j=Z.paddedHeight(),D=H/2,k=j/2,C=Z.pstyle("background-gradient-direction").value;switch(C){case"to-bottom":F=Q.createLinearGradient(N.x,N.y-k,N.x,N.y+k);break;case"to-top":F=Q.createLinearGradient(N.x,N.y+k,N.x,N.y-k);break;case"to-left":F=Q.createLinearGradient(N.x+D,N.y,N.x-D,N.y);break;case"to-right":F=Q.createLinearGradient(N.x-D,N.y,N.x+D,N.y);break;case"to-bottom-right":case"to-right-bottom":F=Q.createLinearGradient(N.x-D,N.y-k,N.x+D,N.y+k);break;case"to-top-right":case"to-right-top":F=Q.createLinearGradient(N.x-D,N.y+k,N.x+D,N.y-k);break;case"to-bottom-left":case"to-left-bottom":F=Q.createLinearGradient(N.x+D,N.y-k,N.x-D,N.y+k);break;case"to-top-left":case"to-left-top":F=Q.createLinearGradient(N.x+D,N.y+k,N.x-D,N.y-k);break}}if(!F)return null;var E=M.length===K.length,S=K.length;for(var w=0;w<S;w++)F.addColorStop(E?M[w]:w/(S-1),"rgba("+K[w][0]+","+K[w][1]+","+K[w][2]+","+G+")");return F};A8.gradientFillStyle=function(Q,J,Z,$){var G=this.createGradientStyleFor(Q,"background",J,Z,$);if(!G)return null;Q.fillStyle=G};A8.colorFillStyle=function(Q,J,Z,$,G){Q.fillStyle="rgba("+J+","+Z+","+$+","+G+")"};A8.eleFillStyle=function(Q,J,Z){var $=J.pstyle("background-fill").value;if($==="linear-gradient"||$==="radial-gradient")this.gradientFillStyle(Q,J,$,Z);else{var G=J.pstyle("background-color").value;this.colorFillStyle(Q,G[0],G[1],G[2],Z)}};A8.gradientStrokeStyle=function(Q,J,Z,$){var G=this.createGradientStyleFor(Q,"line",J,Z,$);if(!G)return null;Q.strokeStyle=G};A8.colorStrokeStyle=function(Q,J,Z,$,G){Q.strokeStyle="rgba("+J+","+Z+","+$+","+G+")"};A8.eleStrokeStyle=function(Q,J,Z){var $=J.pstyle("line-fill").value;if($==="linear-gradient"||$==="radial-gradient")this.gradientStrokeStyle(Q,J,$,Z);else{var G=J.pstyle("line-color").value;this.colorStrokeStyle(Q,G[0],G[1],G[2],Z)}};A8.matchCanvasSize=function(Q){var J=this,Z=J.data,$=J.findContainerClientCoords(),G=$[2],F=$[3],U=J.getPixelRatio(),K=J.motionBlurPxRatio;if(Q===J.data.bufferCanvases[J.MOTIONBLUR_BUFFER_NODE]||Q===J.data.bufferCanvases[J.MOTIONBLUR_BUFFER_DRAG])U=K;var M=G*U,q=F*U,L;if(M===J.canvasWidth&&q===J.canvasHeight)return;J.fontCaches=null;var z=Z.canvasContainer;z.style.width=G+"px",z.style.height=F+"px";for(var A=0;A<J.CANVAS_LAYERS;A++)L=Z.canvases[A],L.width=M,L.height=q,L.style.width=G+"px",L.style.height=F+"px";for(var A=0;A<J.BUFFER_COUNT;A++)L=Z.bufferCanvases[A],L.width=M,L.height=q,L.style.width=G+"px",L.style.height=F+"px";if(J.textureMult=1,U<=1)L=Z.bufferCanvases[J.TEXTURE_BUFFER],J.textureMult=2,L.width=M*J.textureMult,L.height=q*J.textureMult;J.canvasWidth=M,J.canvasHeight=q};A8.renderTo=function(Q,J,Z,$){this.render({forcedContext:Q,forcedZoom:J,forcedPan:Z,drawAllLayers:!0,forcedPxRatio:$})};A8.render=function(Q){Q=Q||z$();var{forcedContext:J,drawAllLayers:Z,drawOnlyNodeLayer:$,forcedZoom:G,forcedPan:F}=Q,U=this,K=Q.forcedPxRatio===void 0?this.getPixelRatio():Q.forcedPxRatio,M=U.cy,q=U.data,L=q.canvasNeedsRedraw,z=U.textureOnViewport&&!J&&(U.pinching||U.hoverData.dragging||U.swipePanning||U.data.wheelZooming),A=Q.motionBlur!==void 0?Q.motionBlur:U.motionBlur,V=U.motionBlurPxRatio,R=M.hasCompoundNodes(),Y=U.hoverData.draggingEles,X=U.hoverData.selecting||U.touchData.selecting?!0:!1;A=A&&!J&&U.motionBlurEnabled&&!X;var B=A;if(!J){if(U.prevPxRatio!==K)U.invalidateContainerClientCoordsCache(),U.matchCanvasSize(U.container),U.redrawHint("eles",!0),U.redrawHint("drag",!0);U.prevPxRatio=K}if(!J&&U.motionBlurTimeout)clearTimeout(U.motionBlurTimeout);if(A){if(U.mbFrames==null)U.mbFrames=0;if(U.mbFrames++,U.mbFrames<3)B=!1;if(U.mbFrames>U.minMbLowQualFrames)U.motionBlurPxRatio=U.mbPxRBlurry}if(U.clearingMotionBlur)U.motionBlurPxRatio=1;if(U.textureDrawLastFrame&&!z)L[U.NODE]=!0,L[U.SELECT_BOX]=!0;var O=M.style(),N=M.zoom(),H=G!==void 0?G:N,j=M.pan(),D={x:j.x,y:j.y},k={zoom:N,pan:{x:j.x,y:j.y}},C=U.prevViewport,E=C===void 0||k.zoom!==C.zoom||k.pan.x!==C.pan.x||k.pan.y!==C.pan.y;if(!E&&!(Y&&!R))U.motionBlurPxRatio=1;if(F)D=F;H*=K,D.x*=K,D.y*=K;var S=U.getCachedZSortedEles();function w(Q0,Z0,L0,M0,U0){var z0=Q0.globalCompositeOperation;Q0.globalCompositeOperation="destination-out",U.colorFillStyle(Q0,255,255,255,U.motionBlurTransparency),Q0.fillRect(Z0,L0,M0,U0),Q0.globalCompositeOperation=z0}function T(Q0,Z0){var L0,M0,U0,z0;if(!U.clearingMotionBlur&&(Q0===q.bufferContexts[U.MOTIONBLUR_BUFFER_NODE]||Q0===q.bufferContexts[U.MOTIONBLUR_BUFFER_DRAG]))L0={x:j.x*V,y:j.y*V},M0=N*V,U0=U.canvasWidth*V,z0=U.canvasHeight*V;else L0=D,M0=H,U0=U.canvasWidth,z0=U.canvasHeight;if(Q0.setTransform(1,0,0,1,0,0),Z0==="motionBlur")w(Q0,0,0,U0,z0);else if(!J&&(Z0===void 0||Z0))Q0.clearRect(0,0,U0,z0);if(!Z)Q0.translate(L0.x,L0.y),Q0.scale(M0,M0);if(F)Q0.translate(F.x,F.y);if(G)Q0.scale(G,G)}if(!z)U.textureDrawLastFrame=!1;if(z){if(U.textureDrawLastFrame=!0,!U.textureCache){U.textureCache={},U.textureCache.bb=M.mutableElements().boundingBox(),U.textureCache.texture=U.data.bufferCanvases[U.TEXTURE_BUFFER];var v=U.data.bufferContexts[U.TEXTURE_BUFFER];v.setTransform(1,0,0,1,0,0),v.clearRect(0,0,U.canvasWidth*U.textureMult,U.canvasHeight*U.textureMult),U.render({forcedContext:v,drawOnlyNodeLayer:!0,forcedPxRatio:K*U.textureMult});var k=U.textureCache.viewport={zoom:M.zoom(),pan:M.pan(),width:U.canvasWidth,height:U.canvasHeight};k.mpan={x:(0-k.pan.x)/k.zoom,y:(0-k.pan.y)/k.zoom}}L[U.DRAG]=!1,L[U.NODE]=!1;var I=q.contexts[U.NODE],_=U.textureCache.texture,k=U.textureCache.viewport;if(I.setTransform(1,0,0,1,0,0),A)w(I,0,0,k.width,k.height);else I.clearRect(0,0,k.width,k.height);var b=O.core("outside-texture-bg-color").value,P=O.core("outside-texture-bg-opacity").value;U.colorFillStyle(I,b[0],b[1],b[2],P),I.fillRect(0,0,k.width,k.height);var N=M.zoom();T(I,!1),I.clearRect(k.mpan.x,k.mpan.y,k.width/k.zoom/K,k.height/k.zoom/K),I.drawImage(_,k.mpan.x,k.mpan.y,k.width/k.zoom/K,k.height/k.zoom/K)}else if(U.textureOnViewport&&!J)U.textureCache=null;var u=M.extent(),h=U.pinching||U.hoverData.dragging||U.swipePanning||U.data.wheelZooming||U.hoverData.draggingEles||U.cy.animated(),p=U.hideEdgesOnViewport&&h,m=[];if(m[U.NODE]=!L[U.NODE]&&A&&!U.clearedForMotionBlur[U.NODE]||U.clearingMotionBlur,m[U.NODE])U.clearedForMotionBlur[U.NODE]=!0;if(m[U.DRAG]=!L[U.DRAG]&&A&&!U.clearedForMotionBlur[U.DRAG]||U.clearingMotionBlur,m[U.DRAG])U.clearedForMotionBlur[U.DRAG]=!0;if(L[U.NODE]||Z||$||m[U.NODE]){var c=A&&!m[U.NODE]&&V!==1,I=J||(c?U.data.bufferContexts[U.MOTIONBLUR_BUFFER_NODE]:q.contexts[U.NODE]),i=A&&!c?"motionBlur":void 0;if(T(I,i),p)U.drawCachedNodes(I,S.nondrag,K,u);else U.drawLayeredElements(I,S.nondrag,K,u);if(U.debug)U.drawDebugPoints(I,S.nondrag);if(!Z&&!A)L[U.NODE]=!1}if(!$&&(L[U.DRAG]||Z||m[U.DRAG])){var c=A&&!m[U.DRAG]&&V!==1,I=J||(c?U.data.bufferContexts[U.MOTIONBLUR_BUFFER_DRAG]:q.contexts[U.DRAG]);if(T(I,A&&!c?"motionBlur":void 0),p)U.drawCachedNodes(I,S.drag,K,u);else U.drawCachedElements(I,S.drag,K,u);if(U.debug)U.drawDebugPoints(I,S.drag);if(!Z&&!A)L[U.DRAG]=!1}if(U.showFps||!$&&L[U.SELECT_BOX]&&!Z){var I=J||q.contexts[U.SELECT_BOX];if(T(I),U.selection[4]==1&&(U.hoverData.selecting||U.touchData.selecting)){var N=U.cy.zoom(),r=O.core("selection-box-border-width").value/N;if(I.lineWidth=r,I.fillStyle="rgba("+O.core("selection-box-color").value[0]+","+O.core("selection-box-color").value[1]+","+O.core("selection-box-color").value[2]+","+O.core("selection-box-opacity").value+")",I.fillRect(U.selection[0],U.selection[1],U.selection[2]-U.selection[0],U.selection[3]-U.selection[1]),r>0)I.strokeStyle="rgba("+O.core("selection-box-border-color").value[0]+","+O.core("selection-box-border-color").value[1]+","+O.core("selection-box-border-color").value[2]+","+O.core("selection-box-opacity").value+")",I.strokeRect(U.selection[0],U.selection[1],U.selection[2]-U.selection[0],U.selection[3]-U.selection[1])}if(q.bgActivePosistion&&!U.hoverData.selecting){var N=U.cy.zoom(),a=q.bgActivePosistion;I.fillStyle="rgba("+O.core("active-bg-color").value[0]+","+O.core("active-bg-color").value[1]+","+O.core("active-bg-color").value[2]+","+O.core("active-bg-opacity").value+")",I.beginPath(),I.arc(a.x,a.y,O.core("active-bg-size").pfValue/N,0,2*Math.PI),I.fill()}var n=U.lastRedrawTime;if(U.showFps&&n){n=Math.round(n);var f=Math.round(1000/n);I.setTransform(1,0,0,1,0,0),I.fillStyle="rgba(255, 0, 0, 0.75)",I.strokeStyle="rgba(255, 0, 0, 0.75)",I.lineWidth=1,I.fillText("1 frame = "+n+" ms = "+f+" fps",0,20);var o=60;I.strokeRect(0,30,250,20),I.fillRect(0,30,250*Math.min(f/o,1),20)}if(!Z)L[U.SELECT_BOX]=!1}if(A&&V!==1){var e=q.contexts[U.NODE],t=U.data.bufferCanvases[U.MOTIONBLUR_BUFFER_NODE],J0=q.contexts[U.DRAG],K0=U.data.bufferCanvases[U.MOTIONBLUR_BUFFER_DRAG],Y0=function Q0(Z0,L0,M0){if(Z0.setTransform(1,0,0,1,0,0),M0||!B)Z0.clearRect(0,0,U.canvasWidth,U.canvasHeight);else w(Z0,0,0,U.canvasWidth,U.canvasHeight);var U0=V;Z0.drawImage(L0,0,0,U.canvasWidth*U0,U.canvasHeight*U0,0,0,U.canvasWidth,U.canvasHeight)};if(L[U.NODE]||m[U.NODE])Y0(e,t,m[U.NODE]),L[U.NODE]=!1;if(L[U.DRAG]||m[U.DRAG])Y0(J0,K0,m[U.DRAG]),L[U.DRAG]=!1}if(U.prevViewport=k,U.clearingMotionBlur)U.clearingMotionBlur=!1,U.motionBlurCleared=!0,U.motionBlur=!0;if(A)U.motionBlurTimeout=setTimeout(function(){U.motionBlurTimeout=null,U.clearedForMotionBlur[U.NODE]=!1,U.clearedForMotionBlur[U.DRAG]=!1,U.motionBlur=!1,U.clearingMotionBlur=!z,U.mbFrames=0,L[U.NODE]=!0,L[U.DRAG]=!0,U.redraw()},Qz);if(!J)M.emit("render")};var s8={};s8.drawPolygonPath=function(Q,J,Z,$,G,F){var U=$/2,K=G/2;if(Q.beginPath)Q.beginPath();Q.moveTo(J+U*F[0],Z+K*F[1]);for(var M=1;M<F.length/2;M++)Q.lineTo(J+U*F[M*2],Z+K*F[M*2+1]);Q.closePath()};s8.drawRoundPolygonPath=function(Q,J,Z,$,G,F){var U=$/2,K=G/2,M=K7($,G);if(Q.beginPath)Q.beginPath();for(var q=0;q<F.length/4;q++){var L=void 0,z=void 0;if(q===0)L=F.length-2;else L=q*4-2;z=q*4+2;var A=J+U*F[q*4],V=Z+K*F[q*4+1],R=-F[L]*F[z]-F[L+1]*F[z+1],Y=M/Math.tan(Math.acos(R)/2),X=A-Y*F[L],B=V-Y*F[L+1],O=A+Y*F[z],N=V+Y*F[z+1];if(q===0)Q.moveTo(X,B);else Q.lineTo(X,B);Q.arcTo(A,V,O,N,M)}Q.closePath()};s8.drawRoundRectanglePath=function(Q,J,Z,$,G){var F=$/2,U=G/2,K=X9($,G);if(Q.beginPath)Q.beginPath();Q.moveTo(J,Z-U),Q.arcTo(J+F,Z-U,J+F,Z,K),Q.arcTo(J+F,Z+U,J,Z+U,K),Q.arcTo(J-F,Z+U,J-F,Z,K),Q.arcTo(J-F,Z-U,J,Z-U,K),Q.lineTo(J,Z-U),Q.closePath()};s8.drawBottomRoundRectanglePath=function(Q,J,Z,$,G){var F=$/2,U=G/2,K=X9($,G);if(Q.beginPath)Q.beginPath();Q.moveTo(J,Z-U),Q.lineTo(J+F,Z-U),Q.lineTo(J+F,Z),Q.arcTo(J+F,Z+U,J,Z+U,K),Q.arcTo(J-F,Z+U,J-F,Z,K),Q.lineTo(J-F,Z-U),Q.lineTo(J,Z-U),Q.closePath()};s8.drawCutRectanglePath=function(Q,J,Z,$,G){var F=$/2,U=G/2,K=O$();if(Q.beginPath)Q.beginPath();Q.moveTo(J-F+K,Z-U),Q.lineTo(J+F-K,Z-U),Q.lineTo(J+F,Z-U+K),Q.lineTo(J+F,Z+U-K),Q.lineTo(J+F-K,Z+U),Q.lineTo(J-F+K,Z+U),Q.lineTo(J-F,Z+U-K),Q.lineTo(J-F,Z-U+K),Q.closePath()};s8.drawBarrelPath=function(Q,J,Z,$,G){var F=$/2,U=G/2,K=J-F,M=J+F,q=Z-U,L=Z+U,z=x6($,G),A=z.widthOffset,V=z.heightOffset,R=z.ctrlPtOffsetPct*A;if(Q.beginPath)Q.beginPath();Q.moveTo(K,q+V),Q.lineTo(K,L-V),Q.quadraticCurveTo(K+R,L,K+A,L),Q.lineTo(M-A,L),Q.quadraticCurveTo(M-R,L,M,L-V),Q.lineTo(M,q+V),Q.quadraticCurveTo(M-R,q,M-A,q),Q.lineTo(K+A,q),Q.quadraticCurveTo(K+R,q,K,q+V),Q.closePath()};var aZ=Math.sin(0),nZ=Math.cos(0),s6={},r6={},A4=Math.PI/40;for(t8=0*Math.PI;t8<2*Math.PI;t8+=A4)s6[t8]=Math.sin(t8),r6[t8]=Math.cos(t8);var t8;s8.drawEllipsePath=function(Q,J,Z,$,G){if(Q.beginPath)Q.beginPath();if(Q.ellipse)Q.ellipse(J,Z,$/2,G/2,0,0,2*Math.PI);else{var F,U,K=$/2,M=G/2;for(var q=0*Math.PI;q<2*Math.PI;q+=A4)if(F=J-K*s6[q]*aZ+K*r6[q]*nZ,U=Z+M*r6[q]*aZ+M*s6[q]*nZ,q===0)Q.moveTo(F,U);else Q.lineTo(F,U)}Q.closePath()};var k9={};k9.createBuffer=function(Q,J){var Z=document.createElement("canvas");return Z.width=Q,Z.height=J,[Z,Z.getContext("2d")]};k9.bufferCanvasImage=function(Q){var J=this.cy,Z=J.mutableElements(),$=Z.boundingBox(),G=this.findContainerClientCoords(),F=Q.full?Math.ceil($.w):G[2],U=Q.full?Math.ceil($.h):G[3],K=$0(Q.maxWidth)||$0(Q.maxHeight),M=this.getPixelRatio(),q=1;if(Q.scale!==void 0)F*=Q.scale,U*=Q.scale,q=Q.scale;else if(K){var L=Infinity,z=Infinity;if($0(Q.maxWidth))L=q*Q.maxWidth/F;if($0(Q.maxHeight))z=q*Q.maxHeight/U;q=Math.min(L,z),F*=q,U*=q}if(!K)F*=M,U*=M,q*=M;var A=document.createElement("canvas");A.width=F,A.height=U,A.style.width=F+"px",A.style.height=U+"px";var V=A.getContext("2d");if(F>0&&U>0){V.clearRect(0,0,F,U),V.globalCompositeOperation="source-over";var R=this.getCachedZSortedEles();if(Q.full)V.translate(-$.x1*q,-$.y1*q),V.scale(q,q),this.drawElements(V,R),V.scale(1/q,1/q),V.translate($.x1*q,$.y1*q);else{var Y=J.pan(),X={x:Y.x*q,y:Y.y*q};q*=J.zoom(),V.translate(X.x,X.y),V.scale(q,q),this.drawElements(V,R),V.scale(1/q,1/q),V.translate(-X.x,-X.y)}if(Q.bg)V.globalCompositeOperation="destination-over",V.fillStyle=Q.bg,V.rect(0,0,F,U),V.fill()}return A};k9.png=function(Q){return R4(Q,this.bufferCanvasImage(Q),"image/png")};k9.jpg=function(Q){return R4(Q,this.bufferCanvasImage(Q),"image/jpeg")};var V4={};V4.nodeShapeImpl=function(Q,J,Z,$,G,F,U){switch(Q){case"ellipse":return this.drawEllipsePath(J,Z,$,G,F);case"polygon":return this.drawPolygonPath(J,Z,$,G,F,U);case"round-polygon":return this.drawRoundPolygonPath(J,Z,$,G,F,U);case"roundrectangle":case"round-rectangle":return this.drawRoundRectanglePath(J,Z,$,G,F);case"cutrectangle":case"cut-rectangle":return this.drawCutRectanglePath(J,Z,$,G,F);case"bottomroundrectangle":case"bottom-round-rectangle":return this.drawBottomRoundRectanglePath(J,Z,$,G,F);case"barrel":return this.drawBarrelPath(J,Z,$,G,F)}};var $z=Y4,S0=Y4.prototype;S0.CANVAS_LAYERS=3;S0.SELECT_BOX=0;S0.DRAG=1;S0.NODE=2;S0.BUFFER_COUNT=3;S0.TEXTURE_BUFFER=0;S0.MOTIONBLUR_BUFFER_NODE=1;S0.MOTIONBLUR_BUFFER_DRAG=2;S0.redrawHint=function(Q,J){var Z=this;switch(Q){case"eles":Z.data.canvasNeedsRedraw[S0.NODE]=J;break;case"drag":Z.data.canvasNeedsRedraw[S0.DRAG]=J;break;case"select":Z.data.canvasNeedsRedraw[S0.SELECT_BOX]=J;break}};var Gz=typeof Path2D!=="undefined";S0.path2dEnabled=function(Q){if(Q===void 0)return this.pathsEnabled;this.pathsEnabled=Q?!0:!1};S0.usePaths=function(){return Gz&&this.pathsEnabled};S0.setImgSmoothing=function(Q,J){if(Q.imageSmoothingEnabled!=null)Q.imageSmoothingEnabled=J;else Q.webkitImageSmoothingEnabled=J,Q.mozImageSmoothingEnabled=J,Q.msImageSmoothingEnabled=J};S0.getImgSmoothing=function(Q){if(Q.imageSmoothingEnabled!=null)return Q.imageSmoothingEnabled;else return Q.webkitImageSmoothingEnabled||Q.mozImageSmoothingEnabled||Q.msImageSmoothingEnabled};S0.makeOffscreenCanvas=function(Q,J){var Z;if((typeof OffscreenCanvas==="undefined"?"undefined":d0(OffscreenCanvas))!=="undefined")Z=new OffscreenCanvas(Q,J);else Z=document.createElement("canvas"),Z.width=Q,Z.height=J;return Z};[M4,I8,u8,B7,MJ,fJ,A8,s8,k9,V4].forEach(function(Q){V0(S0,Q)});var Fz=[{name:"null",impl:e$},{name:"base",impl:U4},{name:"canvas",impl:$z}],Uz=[{type:"layout",extensions:RL},{type:"renderer",extensions:Fz}],X4={},B4={},o6=function Q(){if(arguments.length===2)return N4.apply(null,arguments);else if(arguments.length===3)return O4.apply(null,arguments);else if(arguments.length===4)return qz.apply(null,arguments);else if(arguments.length===5)return Kz.apply(null,arguments);else h0("Invalid extension access syntax")};z9.prototype.extension=o6;Uz.forEach(function(Q){Q.extensions.forEach(function(J){O4(Q.type,J.name,J.impl)})});var H4=function Q(){if(!(this instanceof Q))return new Q;this.length=0},UJ=H4.prototype;UJ.instanceString=function(){return"stylesheet"};UJ.selector=function(Q){var J=this.length++;return this[J]={selector:Q,properties:[]},this};UJ.css=function(Q,J){var Z=this.length-1;if(R0(Q))this[Z].properties.push({name:Q,value:J});else if(D0(Q)){var $=Q,G=Object.keys($);for(var F=0;F<G.length;F++){var U=G[F],K=$[U];if(K==null)continue;var M=J8.properties[U]||J8.properties[F6(U)];if(M==null)continue;var q=M.name,L=K;this[Z].properties.push({name:q,value:L})}}return this};UJ.style=UJ.css;UJ.generateStyle=function(Q){var J=new J8(Q);return this.appendToStyle(J)};UJ.appendToStyle=function(Q){for(var J=0;J<this.length;J++){var Z=this[J],$=Z.selector,G=Z.properties;Q.selector($);for(var F=0;F<G.length;F++){var U=G[F];Q.css(U.name,U.value)}}return Q};var Mz="3.28.0",KJ=function Q(J){if(J===void 0)J={};if(D0(J))return new z9(J);else if(R0(J))return o6.apply(o6,arguments)};KJ.use=function(Q){var J=Array.prototype.slice.call(arguments,1);return J.unshift(KJ),Q.apply(null,J),this};KJ.warnings=function(Q){return M$(Q)};KJ.version=Mz;KJ.stylesheet=KJ.Stylesheet=H4;k4.exports=KJ});var W4=f4(E4(),1),Lz=function(Q){const J=[],Z=/\((.+?)\)\s*->\s*\((.+?)\)/g;let $;while(($=Z.exec(Q))!==null)J.push({data:{id:$[1]}}),J.push({data:{id:$[2]}}),J.push({data:{source:$[1],target:$[2],weight:""}});return J};document.getElementById("generateGraph").addEventListener("click",()=>{const Q=document.getElementById("graphInput").value,J=Lz(Q),Z=W4.default({container:document.getElementById("cy"),elements:J,style:[{selector:"node",style:{"background-color":"#666",label:"data(id)"}},{selector:"edge",style:{width:3,"line-color":"#ccc","target-arrow-color":"#ccc","target-arrow-shape":"triangle","curve-style":"bezier",label:"data(weight)"}}],layout:{name:"grid",rows:1}})});

//# debugId=A49FEB65D4CE42F864756e2164756e21
//# sourceMappingURL=data:application/json;base64,
